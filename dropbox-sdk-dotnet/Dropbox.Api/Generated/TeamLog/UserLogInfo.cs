// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamLog
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>User's logged information.</para>
    /// </summary>
    /// <seealso cref="NonTeamMemberLogInfo" />
    /// <seealso cref="TeamMemberLogInfo" />
    /// <seealso cref="TrustedNonTeamMemberLogInfo" />
    public class UserLogInfo
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<UserLogInfo> Encoder = new UserLogInfoEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<UserLogInfo> Decoder = new UserLogInfoDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="UserLogInfo" /> class.</para>
        /// </summary>
        /// <param name="accountId">User unique ID. Might be missing due to historical data
        /// gap.</param>
        /// <param name="displayName">User display name. Might be missing due to historical
        /// data gap.</param>
        /// <param name="email">User email address. Might be missing due to historical data
        /// gap.</param>
        protected UserLogInfo(string accountId = null,
                              string displayName = null,
                              string email = null)
        {
            if (accountId != null)
            {
                if (accountId.Length < 40)
                {
                    throw new sys.ArgumentOutOfRangeException("accountId", "Length should be at least 40");
                }
                if (accountId.Length > 40)
                {
                    throw new sys.ArgumentOutOfRangeException("accountId", "Length should be at most 40");
                }
            }

            if (email != null)
            {
                if (email.Length > 255)
                {
                    throw new sys.ArgumentOutOfRangeException("email", "Length should be at most 255");
                }
            }

            this.AccountId = accountId;
            this.DisplayName = displayName;
            this.Email = email;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="UserLogInfo" /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public UserLogInfo()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is TeamMember</para>
        /// </summary>
        public bool IsTeamMember
        {
            get
            {
                return this is TeamMemberLogInfo;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a <see cref="TeamMemberLogInfo" />, or
        /// <c>null</c>.</para>
        /// </summary>
        public TeamMemberLogInfo AsTeamMember
        {
            get
            {
                return this as TeamMemberLogInfo;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is TrustedNonTeamMember</para>
        /// </summary>
        public bool IsTrustedNonTeamMember
        {
            get
            {
                return this is TrustedNonTeamMemberLogInfo;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a <see cref="TrustedNonTeamMemberLogInfo" />, or
        /// <c>null</c>.</para>
        /// </summary>
        public TrustedNonTeamMemberLogInfo AsTrustedNonTeamMember
        {
            get
            {
                return this as TrustedNonTeamMemberLogInfo;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is NonTeamMember</para>
        /// </summary>
        public bool IsNonTeamMember
        {
            get
            {
                return this is NonTeamMemberLogInfo;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a <see cref="NonTeamMemberLogInfo" />, or
        /// <c>null</c>.</para>
        /// </summary>
        public NonTeamMemberLogInfo AsNonTeamMember
        {
            get
            {
                return this as NonTeamMemberLogInfo;
            }
        }

        /// <summary>
        /// <para>User unique ID. Might be missing due to historical data gap.</para>
        /// </summary>
        public string AccountId { get; protected set; }

        /// <summary>
        /// <para>User display name. Might be missing due to historical data gap.</para>
        /// </summary>
        public string DisplayName { get; protected set; }

        /// <summary>
        /// <para>User email address. Might be missing due to historical data gap.</para>
        /// </summary>
        public string Email { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="UserLogInfo" />.</para>
        /// </summary>
        private class UserLogInfoEncoder : enc.StructEncoder<UserLogInfo>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(UserLogInfo value, enc.IJsonWriter writer)
            {
                if (value is TeamMemberLogInfo)
                {
                    WriteProperty(".tag", "team_member", writer, enc.StringEncoder.Instance);
                    TeamMemberLogInfo.Encoder.EncodeFields((TeamMemberLogInfo)value, writer);
                    return;
                }
                if (value is TrustedNonTeamMemberLogInfo)
                {
                    WriteProperty(".tag", "trusted_non_team_member", writer, enc.StringEncoder.Instance);
                    TrustedNonTeamMemberLogInfo.Encoder.EncodeFields((TrustedNonTeamMemberLogInfo)value, writer);
                    return;
                }
                if (value is NonTeamMemberLogInfo)
                {
                    WriteProperty(".tag", "non_team_member", writer, enc.StringEncoder.Instance);
                    NonTeamMemberLogInfo.Encoder.EncodeFields((NonTeamMemberLogInfo)value, writer);
                    return;
                }
                if (value.AccountId != null)
                {
                    WriteProperty("account_id", value.AccountId, writer, enc.StringEncoder.Instance);
                }
                if (value.DisplayName != null)
                {
                    WriteProperty("display_name", value.DisplayName, writer, enc.StringEncoder.Instance);
                }
                if (value.Email != null)
                {
                    WriteProperty("email", value.Email, writer, enc.StringEncoder.Instance);
                }
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="UserLogInfo" />.</para>
        /// </summary>
        private class UserLogInfoDecoder : enc.UnionDecoder<UserLogInfo>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="UserLogInfo" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override UserLogInfo Create()
            {
                return new UserLogInfo();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override UserLogInfo Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "team_member":
                        return TeamMemberLogInfo.Decoder.DecodeFields(reader);
                    case "trusted_non_team_member":
                        return TrustedNonTeamMemberLogInfo.Decoder.DecodeFields(reader);
                    case "non_team_member":
                        return NonTeamMemberLogInfo.Decoder.DecodeFields(reader);
                    default:
                        return base.Decode(reader);
                }
            }
            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(UserLogInfo value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "account_id":
                        value.AccountId = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "display_name":
                        value.DisplayName = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "email":
                        value.Email = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
