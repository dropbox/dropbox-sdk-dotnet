// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The upload session finish error object</para>
    /// </summary>
    public class UploadSessionFinishError
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<UploadSessionFinishError> Encoder = new UploadSessionFinishErrorEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<UploadSessionFinishError> Decoder = new UploadSessionFinishErrorDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="UploadSessionFinishError" />
        /// class.</para>
        /// </summary>
        public UploadSessionFinishError()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is LookupFailed</para>
        /// </summary>
        public bool IsLookupFailed
        {
            get
            {
                return this is LookupFailed;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a LookupFailed, or <c>null</c>.</para>
        /// </summary>
        public LookupFailed AsLookupFailed
        {
            get
            {
                return this as LookupFailed;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Path</para>
        /// </summary>
        public bool IsPath
        {
            get
            {
                return this is Path;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Path, or <c>null</c>.</para>
        /// </summary>
        public Path AsPath
        {
            get
            {
                return this as Path;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is PropertiesError</para>
        /// </summary>
        public bool IsPropertiesError
        {
            get
            {
                return this is PropertiesError;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a PropertiesError, or <c>null</c>.</para>
        /// </summary>
        public PropertiesError AsPropertiesError
        {
            get
            {
                return this as PropertiesError;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is
        /// TooManySharedFolderTargets</para>
        /// </summary>
        public bool IsTooManySharedFolderTargets
        {
            get
            {
                return this is TooManySharedFolderTargets;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TooManySharedFolderTargets, or <c>null</c>.</para>
        /// </summary>
        public TooManySharedFolderTargets AsTooManySharedFolderTargets
        {
            get
            {
                return this as TooManySharedFolderTargets;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is
        /// TooManyWriteOperations</para>
        /// </summary>
        public bool IsTooManyWriteOperations
        {
            get
            {
                return this is TooManyWriteOperations;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TooManyWriteOperations, or <c>null</c>.</para>
        /// </summary>
        public TooManyWriteOperations AsTooManyWriteOperations
        {
            get
            {
                return this as TooManyWriteOperations;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is
        /// ConcurrentSessionDataNotAllowed</para>
        /// </summary>
        public bool IsConcurrentSessionDataNotAllowed
        {
            get
            {
                return this is ConcurrentSessionDataNotAllowed;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a ConcurrentSessionDataNotAllowed, or
        /// <c>null</c>.</para>
        /// </summary>
        public ConcurrentSessionDataNotAllowed AsConcurrentSessionDataNotAllowed
        {
            get
            {
                return this as ConcurrentSessionDataNotAllowed;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is
        /// ConcurrentSessionNotClosed</para>
        /// </summary>
        public bool IsConcurrentSessionNotClosed
        {
            get
            {
                return this is ConcurrentSessionNotClosed;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a ConcurrentSessionNotClosed, or <c>null</c>.</para>
        /// </summary>
        public ConcurrentSessionNotClosed AsConcurrentSessionNotClosed
        {
            get
            {
                return this as ConcurrentSessionNotClosed;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is
        /// ConcurrentSessionMissingData</para>
        /// </summary>
        public bool IsConcurrentSessionMissingData
        {
            get
            {
                return this is ConcurrentSessionMissingData;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a ConcurrentSessionMissingData, or <c>null</c>.</para>
        /// </summary>
        public ConcurrentSessionMissingData AsConcurrentSessionMissingData
        {
            get
            {
                return this as ConcurrentSessionMissingData;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="UploadSessionFinishError" />.</para>
        /// </summary>
        private class UploadSessionFinishErrorEncoder : enc.StructEncoder<UploadSessionFinishError>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(UploadSessionFinishError value, enc.IJsonWriter writer)
            {
                if (value is LookupFailed)
                {
                    WriteProperty(".tag", "lookup_failed", writer, enc.StringEncoder.Instance);
                    LookupFailed.Encoder.EncodeFields((LookupFailed)value, writer);
                    return;
                }
                if (value is Path)
                {
                    WriteProperty(".tag", "path", writer, enc.StringEncoder.Instance);
                    Path.Encoder.EncodeFields((Path)value, writer);
                    return;
                }
                if (value is PropertiesError)
                {
                    WriteProperty(".tag", "properties_error", writer, enc.StringEncoder.Instance);
                    PropertiesError.Encoder.EncodeFields((PropertiesError)value, writer);
                    return;
                }
                if (value is TooManySharedFolderTargets)
                {
                    WriteProperty(".tag", "too_many_shared_folder_targets", writer, enc.StringEncoder.Instance);
                    TooManySharedFolderTargets.Encoder.EncodeFields((TooManySharedFolderTargets)value, writer);
                    return;
                }
                if (value is TooManyWriteOperations)
                {
                    WriteProperty(".tag", "too_many_write_operations", writer, enc.StringEncoder.Instance);
                    TooManyWriteOperations.Encoder.EncodeFields((TooManyWriteOperations)value, writer);
                    return;
                }
                if (value is ConcurrentSessionDataNotAllowed)
                {
                    WriteProperty(".tag", "concurrent_session_data_not_allowed", writer, enc.StringEncoder.Instance);
                    ConcurrentSessionDataNotAllowed.Encoder.EncodeFields((ConcurrentSessionDataNotAllowed)value, writer);
                    return;
                }
                if (value is ConcurrentSessionNotClosed)
                {
                    WriteProperty(".tag", "concurrent_session_not_closed", writer, enc.StringEncoder.Instance);
                    ConcurrentSessionNotClosed.Encoder.EncodeFields((ConcurrentSessionNotClosed)value, writer);
                    return;
                }
                if (value is ConcurrentSessionMissingData)
                {
                    WriteProperty(".tag", "concurrent_session_missing_data", writer, enc.StringEncoder.Instance);
                    ConcurrentSessionMissingData.Encoder.EncodeFields((ConcurrentSessionMissingData)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="UploadSessionFinishError" />.</para>
        /// </summary>
        private class UploadSessionFinishErrorDecoder : enc.UnionDecoder<UploadSessionFinishError>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="UploadSessionFinishError"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override UploadSessionFinishError Create()
            {
                return new UploadSessionFinishError();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override UploadSessionFinishError Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "lookup_failed":
                        return LookupFailed.Decoder.DecodeFields(reader);
                    case "path":
                        return Path.Decoder.DecodeFields(reader);
                    case "properties_error":
                        return PropertiesError.Decoder.DecodeFields(reader);
                    case "too_many_shared_folder_targets":
                        return TooManySharedFolderTargets.Decoder.DecodeFields(reader);
                    case "too_many_write_operations":
                        return TooManyWriteOperations.Decoder.DecodeFields(reader);
                    case "concurrent_session_data_not_allowed":
                        return ConcurrentSessionDataNotAllowed.Decoder.DecodeFields(reader);
                    case "concurrent_session_not_closed":
                        return ConcurrentSessionNotClosed.Decoder.DecodeFields(reader);
                    case "concurrent_session_missing_data":
                        return ConcurrentSessionMissingData.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The session arguments are incorrect; the value explains the reason.</para>
        /// </summary>
        public sealed class LookupFailed : UploadSessionFinishError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<LookupFailed> Encoder = new LookupFailedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<LookupFailed> Decoder = new LookupFailedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="LookupFailed" />
            /// class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public LookupFailed(UploadSessionLookupError value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="LookupFailed" />
            /// class.</para>
            /// </summary>
            private LookupFailed()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public UploadSessionLookupError Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="LookupFailed" />.</para>
            /// </summary>
            private class LookupFailedEncoder : enc.StructEncoder<LookupFailed>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(LookupFailed value, enc.IJsonWriter writer)
                {
                    WriteProperty("lookup_failed", value.Value, writer, global::Dropbox.Api.Files.UploadSessionLookupError.Encoder);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="LookupFailed" />.</para>
            /// </summary>
            private class LookupFailedDecoder : enc.StructDecoder<LookupFailed>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="LookupFailed" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override LookupFailed Create()
                {
                    return new LookupFailed();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(LookupFailed value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "lookup_failed":
                            value.Value = global::Dropbox.Api.Files.UploadSessionLookupError.Decoder.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>Unable to save the uploaded contents to a file. Data has already been
        /// appended to the upload session. Please retry with empty data body and updated
        /// offset.</para>
        /// </summary>
        public sealed class Path : UploadSessionFinishError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Path> Encoder = new PathEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Path> Decoder = new PathDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Path" /> class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public Path(WriteError value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Path" /> class.</para>
            /// </summary>
            private Path()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public WriteError Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Path" />.</para>
            /// </summary>
            private class PathEncoder : enc.StructEncoder<Path>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Path value, enc.IJsonWriter writer)
                {
                    WriteProperty("path", value.Value, writer, global::Dropbox.Api.Files.WriteError.Encoder);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Path" />.</para>
            /// </summary>
            private class PathDecoder : enc.StructDecoder<Path>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Path" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Path Create()
                {
                    return new Path();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(Path value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "path":
                            value.Value = global::Dropbox.Api.Files.WriteError.Decoder.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>The supplied property group is invalid. The file has uploaded without
        /// property groups.</para>
        /// </summary>
        public sealed class PropertiesError : UploadSessionFinishError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<PropertiesError> Encoder = new PropertiesErrorEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<PropertiesError> Decoder = new PropertiesErrorDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="PropertiesError" />
            /// class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public PropertiesError(global::Dropbox.Api.FileProperties.InvalidPropertyGroupError value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="PropertiesError" />
            /// class.</para>
            /// </summary>
            private PropertiesError()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public global::Dropbox.Api.FileProperties.InvalidPropertyGroupError Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="PropertiesError" />.</para>
            /// </summary>
            private class PropertiesErrorEncoder : enc.StructEncoder<PropertiesError>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(PropertiesError value, enc.IJsonWriter writer)
                {
                    WriteProperty("properties_error", value.Value, writer, global::Dropbox.Api.FileProperties.InvalidPropertyGroupError.Encoder);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="PropertiesError" />.</para>
            /// </summary>
            private class PropertiesErrorDecoder : enc.StructDecoder<PropertiesError>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="PropertiesError" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override PropertiesError Create()
                {
                    return new PropertiesError();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(PropertiesError value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "properties_error":
                            value.Value = global::Dropbox.Api.FileProperties.InvalidPropertyGroupError.Decoder.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>The batch request commits files into too many different shared folders.
        /// Please limit your batch request to files contained in a single shared
        /// folder.</para>
        /// </summary>
        public sealed class TooManySharedFolderTargets : UploadSessionFinishError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<TooManySharedFolderTargets> Encoder = new TooManySharedFolderTargetsEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<TooManySharedFolderTargets> Decoder = new TooManySharedFolderTargetsDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TooManySharedFolderTargets"
            /// /> class.</para>
            /// </summary>
            private TooManySharedFolderTargets()
            {
            }

            /// <summary>
            /// <para>A singleton instance of TooManySharedFolderTargets</para>
            /// </summary>
            public static readonly TooManySharedFolderTargets Instance = new TooManySharedFolderTargets();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="TooManySharedFolderTargets" />.</para>
            /// </summary>
            private class TooManySharedFolderTargetsEncoder : enc.StructEncoder<TooManySharedFolderTargets>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(TooManySharedFolderTargets value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="TooManySharedFolderTargets" />.</para>
            /// </summary>
            private class TooManySharedFolderTargetsDecoder : enc.StructDecoder<TooManySharedFolderTargets>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="TooManySharedFolderTargets"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override TooManySharedFolderTargets Create()
                {
                    return TooManySharedFolderTargets.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>There are too many write operations happening in the user's Dropbox. You
        /// should retry uploading this file.</para>
        /// </summary>
        public sealed class TooManyWriteOperations : UploadSessionFinishError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<TooManyWriteOperations> Encoder = new TooManyWriteOperationsEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<TooManyWriteOperations> Decoder = new TooManyWriteOperationsDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TooManyWriteOperations" />
            /// class.</para>
            /// </summary>
            private TooManyWriteOperations()
            {
            }

            /// <summary>
            /// <para>A singleton instance of TooManyWriteOperations</para>
            /// </summary>
            public static readonly TooManyWriteOperations Instance = new TooManyWriteOperations();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="TooManyWriteOperations" />.</para>
            /// </summary>
            private class TooManyWriteOperationsEncoder : enc.StructEncoder<TooManyWriteOperations>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(TooManyWriteOperations value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="TooManyWriteOperations" />.</para>
            /// </summary>
            private class TooManyWriteOperationsDecoder : enc.StructDecoder<TooManyWriteOperations>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="TooManyWriteOperations"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override TooManyWriteOperations Create()
                {
                    return TooManyWriteOperations.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Uploading data not allowed when finishing concurrent upload session.</para>
        /// </summary>
        public sealed class ConcurrentSessionDataNotAllowed : UploadSessionFinishError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<ConcurrentSessionDataNotAllowed> Encoder = new ConcurrentSessionDataNotAllowedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<ConcurrentSessionDataNotAllowed> Decoder = new ConcurrentSessionDataNotAllowedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see
            /// cref="ConcurrentSessionDataNotAllowed" /> class.</para>
            /// </summary>
            private ConcurrentSessionDataNotAllowed()
            {
            }

            /// <summary>
            /// <para>A singleton instance of ConcurrentSessionDataNotAllowed</para>
            /// </summary>
            public static readonly ConcurrentSessionDataNotAllowed Instance = new ConcurrentSessionDataNotAllowed();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="ConcurrentSessionDataNotAllowed" />.</para>
            /// </summary>
            private class ConcurrentSessionDataNotAllowedEncoder : enc.StructEncoder<ConcurrentSessionDataNotAllowed>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(ConcurrentSessionDataNotAllowed value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="ConcurrentSessionDataNotAllowed" />.</para>
            /// </summary>
            private class ConcurrentSessionDataNotAllowedDecoder : enc.StructDecoder<ConcurrentSessionDataNotAllowed>
            {
                /// <summary>
                /// <para>Create a new instance of type <see
                /// cref="ConcurrentSessionDataNotAllowed" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override ConcurrentSessionDataNotAllowed Create()
                {
                    return ConcurrentSessionDataNotAllowed.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Concurrent upload sessions need to be closed before finishing.</para>
        /// </summary>
        public sealed class ConcurrentSessionNotClosed : UploadSessionFinishError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<ConcurrentSessionNotClosed> Encoder = new ConcurrentSessionNotClosedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<ConcurrentSessionNotClosed> Decoder = new ConcurrentSessionNotClosedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="ConcurrentSessionNotClosed"
            /// /> class.</para>
            /// </summary>
            private ConcurrentSessionNotClosed()
            {
            }

            /// <summary>
            /// <para>A singleton instance of ConcurrentSessionNotClosed</para>
            /// </summary>
            public static readonly ConcurrentSessionNotClosed Instance = new ConcurrentSessionNotClosed();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="ConcurrentSessionNotClosed" />.</para>
            /// </summary>
            private class ConcurrentSessionNotClosedEncoder : enc.StructEncoder<ConcurrentSessionNotClosed>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(ConcurrentSessionNotClosed value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="ConcurrentSessionNotClosed" />.</para>
            /// </summary>
            private class ConcurrentSessionNotClosedDecoder : enc.StructDecoder<ConcurrentSessionNotClosed>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="ConcurrentSessionNotClosed"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override ConcurrentSessionNotClosed Create()
                {
                    return ConcurrentSessionNotClosed.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Not all pieces of data were uploaded before trying to finish the
        /// session.</para>
        /// </summary>
        public sealed class ConcurrentSessionMissingData : UploadSessionFinishError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<ConcurrentSessionMissingData> Encoder = new ConcurrentSessionMissingDataEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<ConcurrentSessionMissingData> Decoder = new ConcurrentSessionMissingDataDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see
            /// cref="ConcurrentSessionMissingData" /> class.</para>
            /// </summary>
            private ConcurrentSessionMissingData()
            {
            }

            /// <summary>
            /// <para>A singleton instance of ConcurrentSessionMissingData</para>
            /// </summary>
            public static readonly ConcurrentSessionMissingData Instance = new ConcurrentSessionMissingData();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="ConcurrentSessionMissingData" />.</para>
            /// </summary>
            private class ConcurrentSessionMissingDataEncoder : enc.StructEncoder<ConcurrentSessionMissingData>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(ConcurrentSessionMissingData value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="ConcurrentSessionMissingData" />.</para>
            /// </summary>
            private class ConcurrentSessionMissingDataDecoder : enc.StructDecoder<ConcurrentSessionMissingData>
            {
                /// <summary>
                /// <para>Create a new instance of type <see
                /// cref="ConcurrentSessionMissingData" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override ConcurrentSessionMissingData Create()
                {
                    return ConcurrentSessionMissingData.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : UploadSessionFinishError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}
