// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamLog
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Non team member's logged information.</para>
    /// </summary>
    /// <seealso cref="Global::Dropbox.Api.TeamLog.UserLogInfo" />
    public class NonTeamMemberLogInfo : UserLogInfo
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<NonTeamMemberLogInfo> Encoder = new NonTeamMemberLogInfoEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<NonTeamMemberLogInfo> Decoder = new NonTeamMemberLogInfoDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="NonTeamMemberLogInfo" />
        /// class.</para>
        /// </summary>
        /// <param name="accountId">User unique ID.</param>
        /// <param name="displayName">User display name.</param>
        /// <param name="email">User email address.</param>
        public NonTeamMemberLogInfo(string accountId = null,
                                    string displayName = null,
                                    string email = null)
            : base(accountId, displayName, email)
        {
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="NonTeamMemberLogInfo" />
        /// class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public NonTeamMemberLogInfo()
        {
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="NonTeamMemberLogInfo" />.</para>
        /// </summary>
        private class NonTeamMemberLogInfoEncoder : enc.StructEncoder<NonTeamMemberLogInfo>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(NonTeamMemberLogInfo value, enc.IJsonWriter writer)
            {
                if (value.AccountId != null)
                {
                    WriteProperty("account_id", value.AccountId, writer, enc.StringEncoder.Instance);
                }
                if (value.DisplayName != null)
                {
                    WriteProperty("display_name", value.DisplayName, writer, enc.StringEncoder.Instance);
                }
                if (value.Email != null)
                {
                    WriteProperty("email", value.Email, writer, enc.StringEncoder.Instance);
                }
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="NonTeamMemberLogInfo" />.</para>
        /// </summary>
        private class NonTeamMemberLogInfoDecoder : enc.StructDecoder<NonTeamMemberLogInfo>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="NonTeamMemberLogInfo" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override NonTeamMemberLogInfo Create()
            {
                return new NonTeamMemberLogInfo();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(NonTeamMemberLogInfo value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "account_id":
                        value.AccountId = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "display_name":
                        value.DisplayName = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "email":
                        value.Email = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
