// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Team
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The legal holds policy create arg object</para>
    /// </summary>
    public class LegalHoldsPolicyCreateArg
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<LegalHoldsPolicyCreateArg> Encoder = new LegalHoldsPolicyCreateArgEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<LegalHoldsPolicyCreateArg> Decoder = new LegalHoldsPolicyCreateArgDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="LegalHoldsPolicyCreateArg" />
        /// class.</para>
        /// </summary>
        /// <param name="name">Policy name.</param>
        /// <param name="members">List of team member IDs added to the hold.</param>
        /// <param name="description">A description of the legal hold policy.</param>
        /// <param name="startDate">start date of the legal hold policy.</param>
        /// <param name="endDate">end date of the legal hold policy.</param>
        public LegalHoldsPolicyCreateArg(string name,
                                         col.IEnumerable<string> members,
                                         string description = null,
                                         sys.DateTime? startDate = null,
                                         sys.DateTime? endDate = null)
        {
            if (name == null)
            {
                throw new sys.ArgumentNullException("name");
            }
            if (name.Length > 140)
            {
                throw new sys.ArgumentOutOfRangeException("name", "Length should be at most 140");
            }

            var membersList = enc.Util.ToList(members);

            if (members == null)
            {
                throw new sys.ArgumentNullException("members");
            }

            if (description != null)
            {
                if (description.Length > 501)
                {
                    throw new sys.ArgumentOutOfRangeException("description", "Length should be at most 501");
                }
            }

            this.Name = name;
            this.Members = membersList;
            this.Description = description;
            this.StartDate = startDate;
            this.EndDate = endDate;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="LegalHoldsPolicyCreateArg" />
        /// class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public LegalHoldsPolicyCreateArg()
        {
        }

        /// <summary>
        /// <para>Policy name.</para>
        /// </summary>
        public string Name { get; protected set; }

        /// <summary>
        /// <para>List of team member IDs added to the hold.</para>
        /// </summary>
        public col.IList<string> Members { get; protected set; }

        /// <summary>
        /// <para>A description of the legal hold policy.</para>
        /// </summary>
        public string Description { get; protected set; }

        /// <summary>
        /// <para>start date of the legal hold policy.</para>
        /// </summary>
        public sys.DateTime? StartDate { get; protected set; }

        /// <summary>
        /// <para>end date of the legal hold policy.</para>
        /// </summary>
        public sys.DateTime? EndDate { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="LegalHoldsPolicyCreateArg" />.</para>
        /// </summary>
        private class LegalHoldsPolicyCreateArgEncoder : enc.StructEncoder<LegalHoldsPolicyCreateArg>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(LegalHoldsPolicyCreateArg value, enc.IJsonWriter writer)
            {
                WriteProperty("name", value.Name, writer, enc.StringEncoder.Instance);
                WriteListProperty("members", value.Members, writer, enc.StringEncoder.Instance);
                if (value.Description != null)
                {
                    WriteProperty("description", value.Description, writer, enc.StringEncoder.Instance);
                }
                if (value.StartDate != null)
                {
                    WriteProperty("start_date", value.StartDate.Value, writer, enc.DateTimeEncoder.Instance);
                }
                if (value.EndDate != null)
                {
                    WriteProperty("end_date", value.EndDate.Value, writer, enc.DateTimeEncoder.Instance);
                }
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="LegalHoldsPolicyCreateArg" />.</para>
        /// </summary>
        private class LegalHoldsPolicyCreateArgDecoder : enc.StructDecoder<LegalHoldsPolicyCreateArg>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="LegalHoldsPolicyCreateArg"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override LegalHoldsPolicyCreateArg Create()
            {
                return new LegalHoldsPolicyCreateArg();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(LegalHoldsPolicyCreateArg value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "name":
                        value.Name = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "members":
                        value.Members = ReadList<string>(reader, enc.StringDecoder.Instance);
                        break;
                    case "description":
                        value.Description = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "start_date":
                        value.StartDate = enc.DateTimeDecoder.Instance.Decode(reader);
                        break;
                    case "end_date":
                        value.EndDate = enc.DateTimeDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
