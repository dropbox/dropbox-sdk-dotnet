// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Team
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Profile of a user as a member of a team.</para>
    /// </summary>
    /// <seealso cref="TeamMemberInfo" />
    /// <seealso cref="TeamMemberInfoV2" />
    /// <seealso cref="TokenGetAuthenticatedAdminResult" />
    /// <seealso cref="Global::Dropbox.Api.Team.MemberProfile" />
    public class TeamMemberProfile : MemberProfile
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<TeamMemberProfile> Encoder = new TeamMemberProfileEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<TeamMemberProfile> Decoder = new TeamMemberProfileDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="TeamMemberProfile" />
        /// class.</para>
        /// </summary>
        /// <param name="teamMemberId">ID of user as a member of a team.</param>
        /// <param name="email">Email address of user.</param>
        /// <param name="emailVerified">Is true if the user's email is verified to be owned by
        /// the user.</param>
        /// <param name="status">The user's status as a member of a specific team.</param>
        /// <param name="name">Representations for a person's name.</param>
        /// <param name="membershipType">The user's membership type: full (normal team member)
        /// vs limited (does not use a license; no access to the team's shared quota).</param>
        /// <param name="groups">List of group IDs of groups that the user belongs to.</param>
        /// <param name="memberFolderId">The namespace id of the user's root folder.</param>
        /// <param name="externalId">External ID that a team can attach to the user. An
        /// application using the API may find it easier to use their own IDs instead of
        /// Dropbox IDs like account_id or team_member_id.</param>
        /// <param name="accountId">A user's account identifier.</param>
        /// <param name="secondaryEmails">Secondary emails of a user.</param>
        /// <param name="invitedOn">The date and time the user was invited to the team
        /// (contains value only when the member's status matches <see
        /// cref="Dropbox.Api.Team.TeamMemberStatus.Invited" />).</param>
        /// <param name="joinedOn">The date and time the user joined as a member of a specific
        /// team.</param>
        /// <param name="suspendedOn">The date and time the user was suspended from the team
        /// (contains value only when the member's status matches <see
        /// cref="Dropbox.Api.Team.TeamMemberStatus.Suspended" />).</param>
        /// <param name="persistentId">Persistent ID that a team can attach to the user. The
        /// persistent ID is unique ID to be used for SAML authentication.</param>
        /// <param name="isDirectoryRestricted">Whether the user is a directory restricted
        /// user.</param>
        /// <param name="profilePhotoUrl">URL for the photo representing the user, if one is
        /// set.</param>
        public TeamMemberProfile(string teamMemberId,
                                 string email,
                                 bool emailVerified,
                                 TeamMemberStatus status,
                                 global::Dropbox.Api.Users.Name name,
                                 TeamMembershipType membershipType,
                                 col.IEnumerable<string> groups,
                                 string memberFolderId,
                                 string externalId = null,
                                 string accountId = null,
                                 col.IEnumerable<global::Dropbox.Api.SecondaryEmails.SecondaryEmail> secondaryEmails = null,
                                 sys.DateTime? invitedOn = null,
                                 sys.DateTime? joinedOn = null,
                                 sys.DateTime? suspendedOn = null,
                                 string persistentId = null,
                                 bool? isDirectoryRestricted = null,
                                 string profilePhotoUrl = null)
            : base(teamMemberId, email, emailVerified, status, name, membershipType, externalId, accountId, secondaryEmails, invitedOn, joinedOn, suspendedOn, persistentId, isDirectoryRestricted, profilePhotoUrl)
        {
            var groupsList = enc.Util.ToList(groups);

            if (groups == null)
            {
                throw new sys.ArgumentNullException("groups");
            }

            if (memberFolderId == null)
            {
                throw new sys.ArgumentNullException("memberFolderId");
            }
            if (!re.Regex.IsMatch(memberFolderId, @"\A(?:[-_0-9a-zA-Z:]+)\z"))
            {
                throw new sys.ArgumentOutOfRangeException("memberFolderId", @"Value should match pattern '\A(?:[-_0-9a-zA-Z:]+)\z'");
            }

            this.Groups = groupsList;
            this.MemberFolderId = memberFolderId;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="TeamMemberProfile" />
        /// class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public TeamMemberProfile()
        {
        }

        /// <summary>
        /// <para>List of group IDs of groups that the user belongs to.</para>
        /// </summary>
        public col.IList<string> Groups { get; protected set; }

        /// <summary>
        /// <para>The namespace id of the user's root folder.</para>
        /// </summary>
        public string MemberFolderId { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="TeamMemberProfile" />.</para>
        /// </summary>
        private class TeamMemberProfileEncoder : enc.StructEncoder<TeamMemberProfile>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(TeamMemberProfile value, enc.IJsonWriter writer)
            {
                WriteProperty("team_member_id", value.TeamMemberId, writer, enc.StringEncoder.Instance);
                WriteProperty("email", value.Email, writer, enc.StringEncoder.Instance);
                WriteProperty("email_verified", value.EmailVerified, writer, enc.BooleanEncoder.Instance);
                WriteProperty("status", value.Status, writer, global::Dropbox.Api.Team.TeamMemberStatus.Encoder);
                WriteProperty("name", value.Name, writer, global::Dropbox.Api.Users.Name.Encoder);
                WriteProperty("membership_type", value.MembershipType, writer, global::Dropbox.Api.Team.TeamMembershipType.Encoder);
                WriteListProperty("groups", value.Groups, writer, enc.StringEncoder.Instance);
                WriteProperty("member_folder_id", value.MemberFolderId, writer, enc.StringEncoder.Instance);
                if (value.ExternalId != null)
                {
                    WriteProperty("external_id", value.ExternalId, writer, enc.StringEncoder.Instance);
                }
                if (value.AccountId != null)
                {
                    WriteProperty("account_id", value.AccountId, writer, enc.StringEncoder.Instance);
                }
                if (value.SecondaryEmails.Count > 0)
                {
                    WriteListProperty("secondary_emails", value.SecondaryEmails, writer, global::Dropbox.Api.SecondaryEmails.SecondaryEmail.Encoder);
                }
                if (value.InvitedOn != null)
                {
                    WriteProperty("invited_on", value.InvitedOn.Value, writer, enc.DateTimeEncoder.Instance);
                }
                if (value.JoinedOn != null)
                {
                    WriteProperty("joined_on", value.JoinedOn.Value, writer, enc.DateTimeEncoder.Instance);
                }
                if (value.SuspendedOn != null)
                {
                    WriteProperty("suspended_on", value.SuspendedOn.Value, writer, enc.DateTimeEncoder.Instance);
                }
                if (value.PersistentId != null)
                {
                    WriteProperty("persistent_id", value.PersistentId, writer, enc.StringEncoder.Instance);
                }
                if (value.IsDirectoryRestricted != null)
                {
                    WriteProperty("is_directory_restricted", value.IsDirectoryRestricted.Value, writer, enc.BooleanEncoder.Instance);
                }
                if (value.ProfilePhotoUrl != null)
                {
                    WriteProperty("profile_photo_url", value.ProfilePhotoUrl, writer, enc.StringEncoder.Instance);
                }
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="TeamMemberProfile" />.</para>
        /// </summary>
        private class TeamMemberProfileDecoder : enc.StructDecoder<TeamMemberProfile>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="TeamMemberProfile" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override TeamMemberProfile Create()
            {
                return new TeamMemberProfile();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(TeamMemberProfile value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "team_member_id":
                        value.TeamMemberId = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "email":
                        value.Email = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "email_verified":
                        value.EmailVerified = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    case "status":
                        value.Status = global::Dropbox.Api.Team.TeamMemberStatus.Decoder.Decode(reader);
                        break;
                    case "name":
                        value.Name = global::Dropbox.Api.Users.Name.Decoder.Decode(reader);
                        break;
                    case "membership_type":
                        value.MembershipType = global::Dropbox.Api.Team.TeamMembershipType.Decoder.Decode(reader);
                        break;
                    case "groups":
                        value.Groups = ReadList<string>(reader, enc.StringDecoder.Instance);
                        break;
                    case "member_folder_id":
                        value.MemberFolderId = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "external_id":
                        value.ExternalId = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "account_id":
                        value.AccountId = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "secondary_emails":
                        value.SecondaryEmails = ReadList<global::Dropbox.Api.SecondaryEmails.SecondaryEmail>(reader, global::Dropbox.Api.SecondaryEmails.SecondaryEmail.Decoder);
                        break;
                    case "invited_on":
                        value.InvitedOn = enc.DateTimeDecoder.Instance.Decode(reader);
                        break;
                    case "joined_on":
                        value.JoinedOn = enc.DateTimeDecoder.Instance.Decode(reader);
                        break;
                    case "suspended_on":
                        value.SuspendedOn = enc.DateTimeDecoder.Instance.Decode(reader);
                        break;
                    case "persistent_id":
                        value.PersistentId = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "is_directory_restricted":
                        value.IsDirectoryRestricted = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    case "profile_photo_url":
                        value.ProfilePhotoUrl = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
