// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Sharing
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The shared link settings object</para>
    /// </summary>
    /// <seealso cref="ModifySharedLinkSettingsArgs" />
    public class SharedLinkSettings
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<SharedLinkSettings> Encoder = new SharedLinkSettingsEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<SharedLinkSettings> Decoder = new SharedLinkSettingsDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="SharedLinkSettings" />
        /// class.</para>
        /// </summary>
        /// <param name="requirePassword">Boolean flag to enable or disable password
        /// protection.</param>
        /// <param name="linkPassword">If <paramref name="requirePassword" /> is true, this is
        /// needed to specify the password to access the link.</param>
        /// <param name="expires">Expiration time of the shared link. By default the link won't
        /// expire.</param>
        /// <param name="audience">The new audience who can benefit from the access level
        /// specified by the link's access level specified in the `link_access_level` field of
        /// `LinkPermissions`. This is used in conjunction with team policies and shared folder
        /// policies to determine the final effective audience type in the `effective_audience`
        /// field of `LinkPermissions.</param>
        /// <param name="access">Requested access level you want the audience to gain from this
        /// link. Note, modifying access level for an existing link is not supported.</param>
        /// <param name="requestedVisibility">Use <paramref name="audience" /> instead.  The
        /// requested access for this shared link.</param>
        public SharedLinkSettings(bool? requirePassword = null,
                                  string linkPassword = null,
                                  sys.DateTime? expires = null,
                                  LinkAudience audience = null,
                                  RequestedLinkAccessLevel access = null,
                                  RequestedVisibility requestedVisibility = null)
        {
            this.RequirePassword = requirePassword;
            this.LinkPassword = linkPassword;
            this.Expires = expires;
            this.Audience = audience;
            this.Access = access;
            this.RequestedVisibility = requestedVisibility;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="SharedLinkSettings" />
        /// class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public SharedLinkSettings()
        {
        }

        /// <summary>
        /// <para>Boolean flag to enable or disable password protection.</para>
        /// </summary>
        public bool? RequirePassword { get; protected set; }

        /// <summary>
        /// <para>If <see cref="RequirePassword" /> is true, this is needed to specify the
        /// password to access the link.</para>
        /// </summary>
        public string LinkPassword { get; protected set; }

        /// <summary>
        /// <para>Expiration time of the shared link. By default the link won't expire.</para>
        /// </summary>
        public sys.DateTime? Expires { get; protected set; }

        /// <summary>
        /// <para>The new audience who can benefit from the access level specified by the
        /// link's access level specified in the `link_access_level` field of
        /// `LinkPermissions`. This is used in conjunction with team policies and shared folder
        /// policies to determine the final effective audience type in the `effective_audience`
        /// field of `LinkPermissions.</para>
        /// </summary>
        public LinkAudience Audience { get; protected set; }

        /// <summary>
        /// <para>Requested access level you want the audience to gain from this link. Note,
        /// modifying access level for an existing link is not supported.</para>
        /// </summary>
        public RequestedLinkAccessLevel Access { get; protected set; }

        /// <summary>
        /// <para>Use <see cref="Audience" /> instead.  The requested access for this shared
        /// link.</para>
        /// </summary>
        public RequestedVisibility RequestedVisibility { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="SharedLinkSettings" />.</para>
        /// </summary>
        private class SharedLinkSettingsEncoder : enc.StructEncoder<SharedLinkSettings>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(SharedLinkSettings value, enc.IJsonWriter writer)
            {
                if (value.RequirePassword != null)
                {
                    WriteProperty("require_password", value.RequirePassword.Value, writer, enc.BooleanEncoder.Instance);
                }
                if (value.LinkPassword != null)
                {
                    WriteProperty("link_password", value.LinkPassword, writer, enc.StringEncoder.Instance);
                }
                if (value.Expires != null)
                {
                    WriteProperty("expires", value.Expires.Value, writer, enc.DateTimeEncoder.Instance);
                }
                if (value.Audience != null)
                {
                    WriteProperty("audience", value.Audience, writer, global::Dropbox.Api.Sharing.LinkAudience.Encoder);
                }
                if (value.Access != null)
                {
                    WriteProperty("access", value.Access, writer, global::Dropbox.Api.Sharing.RequestedLinkAccessLevel.Encoder);
                }
                if (value.RequestedVisibility != null)
                {
                    WriteProperty("requested_visibility", value.RequestedVisibility, writer, global::Dropbox.Api.Sharing.RequestedVisibility.Encoder);
                }
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="SharedLinkSettings" />.</para>
        /// </summary>
        private class SharedLinkSettingsDecoder : enc.StructDecoder<SharedLinkSettings>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="SharedLinkSettings" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override SharedLinkSettings Create()
            {
                return new SharedLinkSettings();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(SharedLinkSettings value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "require_password":
                        value.RequirePassword = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    case "link_password":
                        value.LinkPassword = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "expires":
                        value.Expires = enc.DateTimeDecoder.Instance.Decode(reader);
                        break;
                    case "audience":
                        value.Audience = global::Dropbox.Api.Sharing.LinkAudience.Decoder.Decode(reader);
                        break;
                    case "access":
                        value.Access = global::Dropbox.Api.Sharing.RequestedLinkAccessLevel.Decoder.Decode(reader);
                        break;
                    case "requested_visibility":
                        value.RequestedVisibility = global::Dropbox.Api.Sharing.RequestedVisibility.Decoder.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
