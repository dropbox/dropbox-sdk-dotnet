// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Team
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The members remove arg object</para>
    /// </summary>
    /// <seealso cref="Global::Dropbox.Api.Team.MembersDeactivateArg" />
    public class MembersRemoveArg : MembersDeactivateArg
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<MembersRemoveArg> Encoder = new MembersRemoveArgEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<MembersRemoveArg> Decoder = new MembersRemoveArgDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="MembersRemoveArg" />
        /// class.</para>
        /// </summary>
        /// <param name="user">Identity of user to remove/suspend/have their files
        /// moved.</param>
        /// <param name="wipeData">If provided, controls if the user's data will be deleted on
        /// their linked devices.</param>
        /// <param name="transferDestId">If provided, files from the deleted member account
        /// will be transferred to this user.</param>
        /// <param name="transferAdminId">If provided, errors during the transfer process will
        /// be sent via email to this user. If the transfer_dest_id argument was provided, then
        /// this argument must be provided as well.</param>
        /// <param name="keepAccount">Downgrade the member to a Basic account. The user will
        /// retain the email address associated with their Dropbox  account and data in their
        /// account that is not restricted to team members. In order to keep the account the
        /// argument <paramref name="wipeData" /> should be set to <c>false</c>.</param>
        /// <param name="retainTeamShares">If provided, allows removed users to keep access to
        /// Dropbox folders (not Dropbox Paper folders) already explicitly shared with them
        /// (not via a group) when they are downgraded to a Basic account. Users will not
        /// retain access to folders that do not allow external sharing. In order to keep the
        /// sharing relationships, the arguments <paramref name="wipeData" /> should be set to
        /// <c>false</c> and <paramref name="keepAccount" /> should be set to
        /// <c>true</c>.</param>
        public MembersRemoveArg(UserSelectorArg user,
                                bool wipeData = true,
                                UserSelectorArg transferDestId = null,
                                UserSelectorArg transferAdminId = null,
                                bool keepAccount = false,
                                bool retainTeamShares = false)
            : base(user, wipeData)
        {
            this.TransferDestId = transferDestId;
            this.TransferAdminId = transferAdminId;
            this.KeepAccount = keepAccount;
            this.RetainTeamShares = retainTeamShares;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="MembersRemoveArg" />
        /// class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public MembersRemoveArg()
        {
            this.KeepAccount = false;
            this.RetainTeamShares = false;
        }

        /// <summary>
        /// <para>If provided, files from the deleted member account will be transferred to
        /// this user.</para>
        /// </summary>
        public UserSelectorArg TransferDestId { get; protected set; }

        /// <summary>
        /// <para>If provided, errors during the transfer process will be sent via email to
        /// this user. If the transfer_dest_id argument was provided, then this argument must
        /// be provided as well.</para>
        /// </summary>
        public UserSelectorArg TransferAdminId { get; protected set; }

        /// <summary>
        /// <para>Downgrade the member to a Basic account. The user will retain the email
        /// address associated with their Dropbox  account and data in their account that is
        /// not restricted to team members. In order to keep the account the argument <see
        /// cref="WipeData" /> should be set to <c>false</c>.</para>
        /// </summary>
        public bool KeepAccount { get; protected set; }

        /// <summary>
        /// <para>If provided, allows removed users to keep access to Dropbox folders (not
        /// Dropbox Paper folders) already explicitly shared with them (not via a group) when
        /// they are downgraded to a Basic account. Users will not retain access to folders
        /// that do not allow external sharing. In order to keep the sharing relationships, the
        /// arguments <see cref="WipeData" /> should be set to <c>false</c> and <see
        /// cref="KeepAccount" /> should be set to <c>true</c>.</para>
        /// </summary>
        public bool RetainTeamShares { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="MembersRemoveArg" />.</para>
        /// </summary>
        private class MembersRemoveArgEncoder : enc.StructEncoder<MembersRemoveArg>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(MembersRemoveArg value, enc.IJsonWriter writer)
            {
                WriteProperty("user", value.User, writer, global::Dropbox.Api.Team.UserSelectorArg.Encoder);
                WriteProperty("wipe_data", value.WipeData, writer, enc.BooleanEncoder.Instance);
                if (value.TransferDestId != null)
                {
                    WriteProperty("transfer_dest_id", value.TransferDestId, writer, global::Dropbox.Api.Team.UserSelectorArg.Encoder);
                }
                if (value.TransferAdminId != null)
                {
                    WriteProperty("transfer_admin_id", value.TransferAdminId, writer, global::Dropbox.Api.Team.UserSelectorArg.Encoder);
                }
                WriteProperty("keep_account", value.KeepAccount, writer, enc.BooleanEncoder.Instance);
                WriteProperty("retain_team_shares", value.RetainTeamShares, writer, enc.BooleanEncoder.Instance);
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="MembersRemoveArg" />.</para>
        /// </summary>
        private class MembersRemoveArgDecoder : enc.StructDecoder<MembersRemoveArg>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="MembersRemoveArg" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override MembersRemoveArg Create()
            {
                return new MembersRemoveArg();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(MembersRemoveArg value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "user":
                        value.User = global::Dropbox.Api.Team.UserSelectorArg.Decoder.Decode(reader);
                        break;
                    case "wipe_data":
                        value.WipeData = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    case "transfer_dest_id":
                        value.TransferDestId = global::Dropbox.Api.Team.UserSelectorArg.Decoder.Decode(reader);
                        break;
                    case "transfer_admin_id":
                        value.TransferAdminId = global::Dropbox.Api.Team.UserSelectorArg.Decoder.Decode(reader);
                        break;
                    case "keep_account":
                        value.KeepAccount = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    case "retain_team_shares":
                        value.RetainTeamShares = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
