// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The relocation error object</para>
    /// </summary>
    public class RelocationError
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<RelocationError> Encoder = new RelocationErrorEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<RelocationError> Decoder = new RelocationErrorDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="RelocationError" />
        /// class.</para>
        /// </summary>
        public RelocationError()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is FromLookup</para>
        /// </summary>
        public bool IsFromLookup
        {
            get
            {
                return this is FromLookup;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a FromLookup, or <c>null</c>.</para>
        /// </summary>
        public FromLookup AsFromLookup
        {
            get
            {
                return this as FromLookup;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is FromWrite</para>
        /// </summary>
        public bool IsFromWrite
        {
            get
            {
                return this is FromWrite;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a FromWrite, or <c>null</c>.</para>
        /// </summary>
        public FromWrite AsFromWrite
        {
            get
            {
                return this as FromWrite;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is To</para>
        /// </summary>
        public bool IsTo
        {
            get
            {
                return this is To;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a To, or <c>null</c>.</para>
        /// </summary>
        public To AsTo
        {
            get
            {
                return this as To;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is CantCopySharedFolder</para>
        /// </summary>
        public bool IsCantCopySharedFolder
        {
            get
            {
                return this is CantCopySharedFolder;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a CantCopySharedFolder, or <c>null</c>.</para>
        /// </summary>
        public CantCopySharedFolder AsCantCopySharedFolder
        {
            get
            {
                return this as CantCopySharedFolder;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is CantNestSharedFolder</para>
        /// </summary>
        public bool IsCantNestSharedFolder
        {
            get
            {
                return this is CantNestSharedFolder;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a CantNestSharedFolder, or <c>null</c>.</para>
        /// </summary>
        public CantNestSharedFolder AsCantNestSharedFolder
        {
            get
            {
                return this as CantNestSharedFolder;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is
        /// CantMoveFolderIntoItself</para>
        /// </summary>
        public bool IsCantMoveFolderIntoItself
        {
            get
            {
                return this is CantMoveFolderIntoItself;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a CantMoveFolderIntoItself, or <c>null</c>.</para>
        /// </summary>
        public CantMoveFolderIntoItself AsCantMoveFolderIntoItself
        {
            get
            {
                return this as CantMoveFolderIntoItself;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is TooManyFiles</para>
        /// </summary>
        public bool IsTooManyFiles
        {
            get
            {
                return this is TooManyFiles;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TooManyFiles, or <c>null</c>.</para>
        /// </summary>
        public TooManyFiles AsTooManyFiles
        {
            get
            {
                return this as TooManyFiles;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is
        /// DuplicatedOrNestedPaths</para>
        /// </summary>
        public bool IsDuplicatedOrNestedPaths
        {
            get
            {
                return this is DuplicatedOrNestedPaths;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a DuplicatedOrNestedPaths, or <c>null</c>.</para>
        /// </summary>
        public DuplicatedOrNestedPaths AsDuplicatedOrNestedPaths
        {
            get
            {
                return this as DuplicatedOrNestedPaths;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is CantTransferOwnership</para>
        /// </summary>
        public bool IsCantTransferOwnership
        {
            get
            {
                return this is CantTransferOwnership;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a CantTransferOwnership, or <c>null</c>.</para>
        /// </summary>
        public CantTransferOwnership AsCantTransferOwnership
        {
            get
            {
                return this as CantTransferOwnership;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is InsufficientQuota</para>
        /// </summary>
        public bool IsInsufficientQuota
        {
            get
            {
                return this is InsufficientQuota;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a InsufficientQuota, or <c>null</c>.</para>
        /// </summary>
        public InsufficientQuota AsInsufficientQuota
        {
            get
            {
                return this as InsufficientQuota;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is InternalError</para>
        /// </summary>
        public bool IsInternalError
        {
            get
            {
                return this is InternalError;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a InternalError, or <c>null</c>.</para>
        /// </summary>
        public InternalError AsInternalError
        {
            get
            {
                return this as InternalError;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="RelocationError" />.</para>
        /// </summary>
        private class RelocationErrorEncoder : enc.StructEncoder<RelocationError>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(RelocationError value, enc.IJsonWriter writer)
            {
                if (value is FromLookup)
                {
                    WriteProperty(".tag", "from_lookup", writer, enc.StringEncoder.Instance);
                    FromLookup.Encoder.EncodeFields((FromLookup)value, writer);
                    return;
                }
                if (value is FromWrite)
                {
                    WriteProperty(".tag", "from_write", writer, enc.StringEncoder.Instance);
                    FromWrite.Encoder.EncodeFields((FromWrite)value, writer);
                    return;
                }
                if (value is To)
                {
                    WriteProperty(".tag", "to", writer, enc.StringEncoder.Instance);
                    To.Encoder.EncodeFields((To)value, writer);
                    return;
                }
                if (value is CantCopySharedFolder)
                {
                    WriteProperty(".tag", "cant_copy_shared_folder", writer, enc.StringEncoder.Instance);
                    CantCopySharedFolder.Encoder.EncodeFields((CantCopySharedFolder)value, writer);
                    return;
                }
                if (value is CantNestSharedFolder)
                {
                    WriteProperty(".tag", "cant_nest_shared_folder", writer, enc.StringEncoder.Instance);
                    CantNestSharedFolder.Encoder.EncodeFields((CantNestSharedFolder)value, writer);
                    return;
                }
                if (value is CantMoveFolderIntoItself)
                {
                    WriteProperty(".tag", "cant_move_folder_into_itself", writer, enc.StringEncoder.Instance);
                    CantMoveFolderIntoItself.Encoder.EncodeFields((CantMoveFolderIntoItself)value, writer);
                    return;
                }
                if (value is TooManyFiles)
                {
                    WriteProperty(".tag", "too_many_files", writer, enc.StringEncoder.Instance);
                    TooManyFiles.Encoder.EncodeFields((TooManyFiles)value, writer);
                    return;
                }
                if (value is DuplicatedOrNestedPaths)
                {
                    WriteProperty(".tag", "duplicated_or_nested_paths", writer, enc.StringEncoder.Instance);
                    DuplicatedOrNestedPaths.Encoder.EncodeFields((DuplicatedOrNestedPaths)value, writer);
                    return;
                }
                if (value is CantTransferOwnership)
                {
                    WriteProperty(".tag", "cant_transfer_ownership", writer, enc.StringEncoder.Instance);
                    CantTransferOwnership.Encoder.EncodeFields((CantTransferOwnership)value, writer);
                    return;
                }
                if (value is InsufficientQuota)
                {
                    WriteProperty(".tag", "insufficient_quota", writer, enc.StringEncoder.Instance);
                    InsufficientQuota.Encoder.EncodeFields((InsufficientQuota)value, writer);
                    return;
                }
                if (value is InternalError)
                {
                    WriteProperty(".tag", "internal_error", writer, enc.StringEncoder.Instance);
                    InternalError.Encoder.EncodeFields((InternalError)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="RelocationError" />.</para>
        /// </summary>
        private class RelocationErrorDecoder : enc.UnionDecoder<RelocationError>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="RelocationError" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override RelocationError Create()
            {
                return new RelocationError();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override RelocationError Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "from_lookup":
                        return FromLookup.Decoder.DecodeFields(reader);
                    case "from_write":
                        return FromWrite.Decoder.DecodeFields(reader);
                    case "to":
                        return To.Decoder.DecodeFields(reader);
                    case "cant_copy_shared_folder":
                        return CantCopySharedFolder.Decoder.DecodeFields(reader);
                    case "cant_nest_shared_folder":
                        return CantNestSharedFolder.Decoder.DecodeFields(reader);
                    case "cant_move_folder_into_itself":
                        return CantMoveFolderIntoItself.Decoder.DecodeFields(reader);
                    case "too_many_files":
                        return TooManyFiles.Decoder.DecodeFields(reader);
                    case "duplicated_or_nested_paths":
                        return DuplicatedOrNestedPaths.Decoder.DecodeFields(reader);
                    case "cant_transfer_ownership":
                        return CantTransferOwnership.Decoder.DecodeFields(reader);
                    case "insufficient_quota":
                        return InsufficientQuota.Decoder.DecodeFields(reader);
                    case "internal_error":
                        return InternalError.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The from lookup object</para>
        /// </summary>
        public sealed class FromLookup : RelocationError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<FromLookup> Encoder = new FromLookupEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<FromLookup> Decoder = new FromLookupDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="FromLookup" /> class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public FromLookup(LookupError value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="FromLookup" /> class.</para>
            /// </summary>
            private FromLookup()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public LookupError Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="FromLookup" />.</para>
            /// </summary>
            private class FromLookupEncoder : enc.StructEncoder<FromLookup>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(FromLookup value, enc.IJsonWriter writer)
                {
                    WriteProperty("from_lookup", value.Value, writer, global::Dropbox.Api.Files.LookupError.Encoder);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="FromLookup" />.</para>
            /// </summary>
            private class FromLookupDecoder : enc.StructDecoder<FromLookup>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="FromLookup" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override FromLookup Create()
                {
                    return new FromLookup();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(FromLookup value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "from_lookup":
                            value.Value = global::Dropbox.Api.Files.LookupError.Decoder.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>The from write object</para>
        /// </summary>
        public sealed class FromWrite : RelocationError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<FromWrite> Encoder = new FromWriteEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<FromWrite> Decoder = new FromWriteDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="FromWrite" /> class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public FromWrite(WriteError value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="FromWrite" /> class.</para>
            /// </summary>
            private FromWrite()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public WriteError Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="FromWrite" />.</para>
            /// </summary>
            private class FromWriteEncoder : enc.StructEncoder<FromWrite>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(FromWrite value, enc.IJsonWriter writer)
                {
                    WriteProperty("from_write", value.Value, writer, global::Dropbox.Api.Files.WriteError.Encoder);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="FromWrite" />.</para>
            /// </summary>
            private class FromWriteDecoder : enc.StructDecoder<FromWrite>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="FromWrite" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override FromWrite Create()
                {
                    return new FromWrite();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(FromWrite value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "from_write":
                            value.Value = global::Dropbox.Api.Files.WriteError.Decoder.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>The to object</para>
        /// </summary>
        public sealed class To : RelocationError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<To> Encoder = new ToEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<To> Decoder = new ToDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="To" /> class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public To(WriteError value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="To" /> class.</para>
            /// </summary>
            private To()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public WriteError Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="To" />.</para>
            /// </summary>
            private class ToEncoder : enc.StructEncoder<To>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(To value, enc.IJsonWriter writer)
                {
                    WriteProperty("to", value.Value, writer, global::Dropbox.Api.Files.WriteError.Encoder);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="To" />.</para>
            /// </summary>
            private class ToDecoder : enc.StructDecoder<To>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="To" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override To Create()
                {
                    return new To();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(To value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "to":
                            value.Value = global::Dropbox.Api.Files.WriteError.Decoder.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>Shared folders can't be copied.</para>
        /// </summary>
        public sealed class CantCopySharedFolder : RelocationError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<CantCopySharedFolder> Encoder = new CantCopySharedFolderEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<CantCopySharedFolder> Decoder = new CantCopySharedFolderDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="CantCopySharedFolder" />
            /// class.</para>
            /// </summary>
            private CantCopySharedFolder()
            {
            }

            /// <summary>
            /// <para>A singleton instance of CantCopySharedFolder</para>
            /// </summary>
            public static readonly CantCopySharedFolder Instance = new CantCopySharedFolder();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="CantCopySharedFolder" />.</para>
            /// </summary>
            private class CantCopySharedFolderEncoder : enc.StructEncoder<CantCopySharedFolder>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(CantCopySharedFolder value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="CantCopySharedFolder" />.</para>
            /// </summary>
            private class CantCopySharedFolderDecoder : enc.StructDecoder<CantCopySharedFolder>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="CantCopySharedFolder"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override CantCopySharedFolder Create()
                {
                    return CantCopySharedFolder.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Your move operation would result in nested shared folders.  This is not
        /// allowed.</para>
        /// </summary>
        public sealed class CantNestSharedFolder : RelocationError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<CantNestSharedFolder> Encoder = new CantNestSharedFolderEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<CantNestSharedFolder> Decoder = new CantNestSharedFolderDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="CantNestSharedFolder" />
            /// class.</para>
            /// </summary>
            private CantNestSharedFolder()
            {
            }

            /// <summary>
            /// <para>A singleton instance of CantNestSharedFolder</para>
            /// </summary>
            public static readonly CantNestSharedFolder Instance = new CantNestSharedFolder();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="CantNestSharedFolder" />.</para>
            /// </summary>
            private class CantNestSharedFolderEncoder : enc.StructEncoder<CantNestSharedFolder>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(CantNestSharedFolder value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="CantNestSharedFolder" />.</para>
            /// </summary>
            private class CantNestSharedFolderDecoder : enc.StructDecoder<CantNestSharedFolder>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="CantNestSharedFolder"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override CantNestSharedFolder Create()
                {
                    return CantNestSharedFolder.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>You cannot move a folder into itself.</para>
        /// </summary>
        public sealed class CantMoveFolderIntoItself : RelocationError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<CantMoveFolderIntoItself> Encoder = new CantMoveFolderIntoItselfEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<CantMoveFolderIntoItself> Decoder = new CantMoveFolderIntoItselfDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="CantMoveFolderIntoItself" />
            /// class.</para>
            /// </summary>
            private CantMoveFolderIntoItself()
            {
            }

            /// <summary>
            /// <para>A singleton instance of CantMoveFolderIntoItself</para>
            /// </summary>
            public static readonly CantMoveFolderIntoItself Instance = new CantMoveFolderIntoItself();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="CantMoveFolderIntoItself" />.</para>
            /// </summary>
            private class CantMoveFolderIntoItselfEncoder : enc.StructEncoder<CantMoveFolderIntoItself>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(CantMoveFolderIntoItself value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="CantMoveFolderIntoItself" />.</para>
            /// </summary>
            private class CantMoveFolderIntoItselfDecoder : enc.StructDecoder<CantMoveFolderIntoItself>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="CantMoveFolderIntoItself"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override CantMoveFolderIntoItself Create()
                {
                    return CantMoveFolderIntoItself.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The operation would involve more than 10,000 files and folders.</para>
        /// </summary>
        public sealed class TooManyFiles : RelocationError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<TooManyFiles> Encoder = new TooManyFilesEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<TooManyFiles> Decoder = new TooManyFilesDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TooManyFiles" />
            /// class.</para>
            /// </summary>
            private TooManyFiles()
            {
            }

            /// <summary>
            /// <para>A singleton instance of TooManyFiles</para>
            /// </summary>
            public static readonly TooManyFiles Instance = new TooManyFiles();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="TooManyFiles" />.</para>
            /// </summary>
            private class TooManyFilesEncoder : enc.StructEncoder<TooManyFiles>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(TooManyFiles value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="TooManyFiles" />.</para>
            /// </summary>
            private class TooManyFilesDecoder : enc.StructDecoder<TooManyFiles>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="TooManyFiles" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override TooManyFiles Create()
                {
                    return TooManyFiles.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>There are duplicated/nested paths among <see
        /// cref="Dropbox.Api.Files.RelocationArg.FromPath" /> and <see
        /// cref="Dropbox.Api.Files.RelocationArg.ToPath" />.</para>
        /// </summary>
        public sealed class DuplicatedOrNestedPaths : RelocationError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<DuplicatedOrNestedPaths> Encoder = new DuplicatedOrNestedPathsEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<DuplicatedOrNestedPaths> Decoder = new DuplicatedOrNestedPathsDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="DuplicatedOrNestedPaths" />
            /// class.</para>
            /// </summary>
            private DuplicatedOrNestedPaths()
            {
            }

            /// <summary>
            /// <para>A singleton instance of DuplicatedOrNestedPaths</para>
            /// </summary>
            public static readonly DuplicatedOrNestedPaths Instance = new DuplicatedOrNestedPaths();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="DuplicatedOrNestedPaths" />.</para>
            /// </summary>
            private class DuplicatedOrNestedPathsEncoder : enc.StructEncoder<DuplicatedOrNestedPaths>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(DuplicatedOrNestedPaths value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="DuplicatedOrNestedPaths" />.</para>
            /// </summary>
            private class DuplicatedOrNestedPathsDecoder : enc.StructDecoder<DuplicatedOrNestedPaths>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="DuplicatedOrNestedPaths"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override DuplicatedOrNestedPaths Create()
                {
                    return DuplicatedOrNestedPaths.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Your move operation would result in an ownership transfer. You may reissue
        /// the request with the field <see
        /// cref="Dropbox.Api.Files.RelocationArg.AllowOwnershipTransfer" /> to true.</para>
        /// </summary>
        public sealed class CantTransferOwnership : RelocationError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<CantTransferOwnership> Encoder = new CantTransferOwnershipEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<CantTransferOwnership> Decoder = new CantTransferOwnershipDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="CantTransferOwnership" />
            /// class.</para>
            /// </summary>
            private CantTransferOwnership()
            {
            }

            /// <summary>
            /// <para>A singleton instance of CantTransferOwnership</para>
            /// </summary>
            public static readonly CantTransferOwnership Instance = new CantTransferOwnership();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="CantTransferOwnership" />.</para>
            /// </summary>
            private class CantTransferOwnershipEncoder : enc.StructEncoder<CantTransferOwnership>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(CantTransferOwnership value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="CantTransferOwnership" />.</para>
            /// </summary>
            private class CantTransferOwnershipDecoder : enc.StructDecoder<CantTransferOwnership>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="CantTransferOwnership"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override CantTransferOwnership Create()
                {
                    return CantTransferOwnership.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The current user does not have enough space to move or copy the files.</para>
        /// </summary>
        public sealed class InsufficientQuota : RelocationError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<InsufficientQuota> Encoder = new InsufficientQuotaEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<InsufficientQuota> Decoder = new InsufficientQuotaDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="InsufficientQuota" />
            /// class.</para>
            /// </summary>
            private InsufficientQuota()
            {
            }

            /// <summary>
            /// <para>A singleton instance of InsufficientQuota</para>
            /// </summary>
            public static readonly InsufficientQuota Instance = new InsufficientQuota();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="InsufficientQuota" />.</para>
            /// </summary>
            private class InsufficientQuotaEncoder : enc.StructEncoder<InsufficientQuota>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(InsufficientQuota value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="InsufficientQuota" />.</para>
            /// </summary>
            private class InsufficientQuotaDecoder : enc.StructDecoder<InsufficientQuota>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="InsufficientQuota"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override InsufficientQuota Create()
                {
                    return InsufficientQuota.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Something went wrong with the job on Dropbox's end. You'll need to verify
        /// that the action you were taking succeeded, and if not, try again. This should
        /// happen very rarely.</para>
        /// </summary>
        public sealed class InternalError : RelocationError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<InternalError> Encoder = new InternalErrorEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<InternalError> Decoder = new InternalErrorDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="InternalError" />
            /// class.</para>
            /// </summary>
            private InternalError()
            {
            }

            /// <summary>
            /// <para>A singleton instance of InternalError</para>
            /// </summary>
            public static readonly InternalError Instance = new InternalError();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="InternalError" />.</para>
            /// </summary>
            private class InternalErrorEncoder : enc.StructEncoder<InternalError>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(InternalError value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="InternalError" />.</para>
            /// </summary>
            private class InternalErrorDecoder : enc.StructDecoder<InternalError>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="InternalError" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override InternalError Create()
                {
                    return InternalError.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : RelocationError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}
