// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The upload session type object</para>
    /// </summary>
    public class UploadSessionType
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<UploadSessionType> Encoder = new UploadSessionTypeEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<UploadSessionType> Decoder = new UploadSessionTypeDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="UploadSessionType" />
        /// class.</para>
        /// </summary>
        public UploadSessionType()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Sequential</para>
        /// </summary>
        public bool IsSequential
        {
            get
            {
                return this is Sequential;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Sequential, or <c>null</c>.</para>
        /// </summary>
        public Sequential AsSequential
        {
            get
            {
                return this as Sequential;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Concurrent</para>
        /// </summary>
        public bool IsConcurrent
        {
            get
            {
                return this is Concurrent;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Concurrent, or <c>null</c>.</para>
        /// </summary>
        public Concurrent AsConcurrent
        {
            get
            {
                return this as Concurrent;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="UploadSessionType" />.</para>
        /// </summary>
        private class UploadSessionTypeEncoder : enc.StructEncoder<UploadSessionType>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(UploadSessionType value, enc.IJsonWriter writer)
            {
                if (value is Sequential)
                {
                    WriteProperty(".tag", "sequential", writer, enc.StringEncoder.Instance);
                    Sequential.Encoder.EncodeFields((Sequential)value, writer);
                    return;
                }
                if (value is Concurrent)
                {
                    WriteProperty(".tag", "concurrent", writer, enc.StringEncoder.Instance);
                    Concurrent.Encoder.EncodeFields((Concurrent)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="UploadSessionType" />.</para>
        /// </summary>
        private class UploadSessionTypeDecoder : enc.UnionDecoder<UploadSessionType>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="UploadSessionType" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override UploadSessionType Create()
            {
                return new UploadSessionType();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override UploadSessionType Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "sequential":
                        return Sequential.Decoder.DecodeFields(reader);
                    case "concurrent":
                        return Concurrent.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>Pieces of data are uploaded sequentially one after another. This is the
        /// default behavior.</para>
        /// </summary>
        public sealed class Sequential : UploadSessionType
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Sequential> Encoder = new SequentialEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Sequential> Decoder = new SequentialDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Sequential" /> class.</para>
            /// </summary>
            private Sequential()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Sequential</para>
            /// </summary>
            public static readonly Sequential Instance = new Sequential();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Sequential" />.</para>
            /// </summary>
            private class SequentialEncoder : enc.StructEncoder<Sequential>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Sequential value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Sequential" />.</para>
            /// </summary>
            private class SequentialDecoder : enc.StructDecoder<Sequential>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Sequential" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Sequential Create()
                {
                    return Sequential.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Pieces of data can be uploaded in concurrent RPCs in any order.</para>
        /// </summary>
        public sealed class Concurrent : UploadSessionType
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Concurrent> Encoder = new ConcurrentEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Concurrent> Decoder = new ConcurrentDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Concurrent" /> class.</para>
            /// </summary>
            private Concurrent()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Concurrent</para>
            /// </summary>
            public static readonly Concurrent Instance = new Concurrent();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Concurrent" />.</para>
            /// </summary>
            private class ConcurrentEncoder : enc.StructEncoder<Concurrent>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Concurrent value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Concurrent" />.</para>
            /// </summary>
            private class ConcurrentDecoder : enc.StructDecoder<Concurrent>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Concurrent" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Concurrent Create()
                {
                    return Concurrent.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : UploadSessionType
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}
