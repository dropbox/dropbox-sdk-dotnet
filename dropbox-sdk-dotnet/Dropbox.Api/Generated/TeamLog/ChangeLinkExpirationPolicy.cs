// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamLog
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Policy for deciding whether the team's default expiration days policy must be
    /// enforced when an externally shared is updated</para>
    /// </summary>
    public class ChangeLinkExpirationPolicy
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<ChangeLinkExpirationPolicy> Encoder = new ChangeLinkExpirationPolicyEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<ChangeLinkExpirationPolicy> Decoder = new ChangeLinkExpirationPolicyDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="ChangeLinkExpirationPolicy" />
        /// class.</para>
        /// </summary>
        public ChangeLinkExpirationPolicy()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Allowed</para>
        /// </summary>
        public bool IsAllowed
        {
            get
            {
                return this is Allowed;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Allowed, or <c>null</c>.</para>
        /// </summary>
        public Allowed AsAllowed
        {
            get
            {
                return this as Allowed;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is NotAllowed</para>
        /// </summary>
        public bool IsNotAllowed
        {
            get
            {
                return this is NotAllowed;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a NotAllowed, or <c>null</c>.</para>
        /// </summary>
        public NotAllowed AsNotAllowed
        {
            get
            {
                return this as NotAllowed;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="ChangeLinkExpirationPolicy" />.</para>
        /// </summary>
        private class ChangeLinkExpirationPolicyEncoder : enc.StructEncoder<ChangeLinkExpirationPolicy>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(ChangeLinkExpirationPolicy value, enc.IJsonWriter writer)
            {
                if (value is Allowed)
                {
                    WriteProperty(".tag", "allowed", writer, enc.StringEncoder.Instance);
                    Allowed.Encoder.EncodeFields((Allowed)value, writer);
                    return;
                }
                if (value is NotAllowed)
                {
                    WriteProperty(".tag", "not_allowed", writer, enc.StringEncoder.Instance);
                    NotAllowed.Encoder.EncodeFields((NotAllowed)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="ChangeLinkExpirationPolicy" />.</para>
        /// </summary>
        private class ChangeLinkExpirationPolicyDecoder : enc.UnionDecoder<ChangeLinkExpirationPolicy>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="ChangeLinkExpirationPolicy"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override ChangeLinkExpirationPolicy Create()
            {
                return new ChangeLinkExpirationPolicy();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override ChangeLinkExpirationPolicy Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "allowed":
                        return Allowed.Decoder.DecodeFields(reader);
                    case "not_allowed":
                        return NotAllowed.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The allowed object</para>
        /// </summary>
        public sealed class Allowed : ChangeLinkExpirationPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Allowed> Encoder = new AllowedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Allowed> Decoder = new AllowedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Allowed" /> class.</para>
            /// </summary>
            private Allowed()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Allowed</para>
            /// </summary>
            public static readonly Allowed Instance = new Allowed();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Allowed" />.</para>
            /// </summary>
            private class AllowedEncoder : enc.StructEncoder<Allowed>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Allowed value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Allowed" />.</para>
            /// </summary>
            private class AllowedDecoder : enc.StructDecoder<Allowed>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Allowed" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Allowed Create()
                {
                    return Allowed.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The not allowed object</para>
        /// </summary>
        public sealed class NotAllowed : ChangeLinkExpirationPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<NotAllowed> Encoder = new NotAllowedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<NotAllowed> Decoder = new NotAllowedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="NotAllowed" /> class.</para>
            /// </summary>
            private NotAllowed()
            {
            }

            /// <summary>
            /// <para>A singleton instance of NotAllowed</para>
            /// </summary>
            public static readonly NotAllowed Instance = new NotAllowed();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="NotAllowed" />.</para>
            /// </summary>
            private class NotAllowedEncoder : enc.StructEncoder<NotAllowed>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(NotAllowed value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="NotAllowed" />.</para>
            /// </summary>
            private class NotAllowedDecoder : enc.StructDecoder<NotAllowed>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="NotAllowed" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override NotAllowed Create()
                {
                    return NotAllowed.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : ChangeLinkExpirationPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}
