// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The create folder batch arg object</para>
    /// </summary>
    public class CreateFolderBatchArg
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<CreateFolderBatchArg> Encoder = new CreateFolderBatchArgEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<CreateFolderBatchArg> Decoder = new CreateFolderBatchArgDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="CreateFolderBatchArg" />
        /// class.</para>
        /// </summary>
        /// <param name="paths">List of paths to be created in the user's Dropbox. Duplicate
        /// path arguments in the batch are considered only once.</param>
        /// <param name="autorename">If there's a conflict, have the Dropbox server try to
        /// autorename the folder to avoid the conflict.</param>
        /// <param name="forceAsync">Whether to force the create to happen
        /// asynchronously.</param>
        public CreateFolderBatchArg(col.IEnumerable<string> paths,
                                    bool autorename = false,
                                    bool forceAsync = false)
        {
            var pathsList = enc.Util.ToList(paths);

            if (paths == null)
            {
                throw new sys.ArgumentNullException("paths");
            }
            if (pathsList.Count > 10000)
            {
                throw new sys.ArgumentOutOfRangeException("paths", "List should at at most 10000 items");
            }

            this.Paths = pathsList;
            this.Autorename = autorename;
            this.ForceAsync = forceAsync;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="CreateFolderBatchArg" />
        /// class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public CreateFolderBatchArg()
        {
            this.Autorename = false;
            this.ForceAsync = false;
        }

        /// <summary>
        /// <para>List of paths to be created in the user's Dropbox. Duplicate path arguments
        /// in the batch are considered only once.</para>
        /// </summary>
        public col.IList<string> Paths { get; protected set; }

        /// <summary>
        /// <para>If there's a conflict, have the Dropbox server try to autorename the folder
        /// to avoid the conflict.</para>
        /// </summary>
        public bool Autorename { get; protected set; }

        /// <summary>
        /// <para>Whether to force the create to happen asynchronously.</para>
        /// </summary>
        public bool ForceAsync { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="CreateFolderBatchArg" />.</para>
        /// </summary>
        private class CreateFolderBatchArgEncoder : enc.StructEncoder<CreateFolderBatchArg>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(CreateFolderBatchArg value, enc.IJsonWriter writer)
            {
                WriteListProperty("paths", value.Paths, writer, enc.StringEncoder.Instance);
                WriteProperty("autorename", value.Autorename, writer, enc.BooleanEncoder.Instance);
                WriteProperty("force_async", value.ForceAsync, writer, enc.BooleanEncoder.Instance);
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="CreateFolderBatchArg" />.</para>
        /// </summary>
        private class CreateFolderBatchArgDecoder : enc.StructDecoder<CreateFolderBatchArg>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="CreateFolderBatchArg" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override CreateFolderBatchArg Create()
            {
                return new CreateFolderBatchArg();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(CreateFolderBatchArg value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "paths":
                        value.Paths = ReadList<string>(reader, enc.StringDecoder.Instance);
                        break;
                    case "autorename":
                        value.Autorename = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    case "force_async":
                        value.ForceAsync = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
