// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Team
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The legal hold held revision metadata object</para>
    /// </summary>
    public class LegalHoldHeldRevisionMetadata
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<LegalHoldHeldRevisionMetadata> Encoder = new LegalHoldHeldRevisionMetadataEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<LegalHoldHeldRevisionMetadata> Decoder = new LegalHoldHeldRevisionMetadataDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="LegalHoldHeldRevisionMetadata"
        /// /> class.</para>
        /// </summary>
        /// <param name="newFilename">The held revision filename.</param>
        /// <param name="originalRevisionId">The id of the held revision.</param>
        /// <param name="originalFilePath">The original path of the held revision.</param>
        /// <param name="serverModified">The last time the file was modified on
        /// Dropbox.</param>
        /// <param name="authorMemberId">The member id of the revision's author.</param>
        /// <param name="authorMemberStatus">The member status of the revision's
        /// author.</param>
        /// <param name="authorEmail">The email address of the held revision author.</param>
        /// <param name="fileType">The type of the held revision's file.</param>
        /// <param name="size">The file size in bytes.</param>
        /// <param name="contentHash">A hash of the file content. This field can be used to
        /// verify data integrity. For more information see our <a
        /// href="https://www.dropbox.com/developers/reference/content-hash">Content hash</a>
        /// page.</param>
        public LegalHoldHeldRevisionMetadata(string newFilename,
                                             string originalRevisionId,
                                             string originalFilePath,
                                             sys.DateTime serverModified,
                                             string authorMemberId,
                                             TeamMemberStatus authorMemberStatus,
                                             string authorEmail,
                                             string fileType,
                                             ulong size,
                                             string contentHash)
        {
            if (newFilename == null)
            {
                throw new sys.ArgumentNullException("newFilename");
            }

            if (originalRevisionId == null)
            {
                throw new sys.ArgumentNullException("originalRevisionId");
            }
            if (originalRevisionId.Length < 9)
            {
                throw new sys.ArgumentOutOfRangeException("originalRevisionId", "Length should be at least 9");
            }
            if (!re.Regex.IsMatch(originalRevisionId, @"\A(?:[0-9a-f]+)\z"))
            {
                throw new sys.ArgumentOutOfRangeException("originalRevisionId", @"Value should match pattern '\A(?:[0-9a-f]+)\z'");
            }

            if (originalFilePath == null)
            {
                throw new sys.ArgumentNullException("originalFilePath");
            }
            if (!re.Regex.IsMatch(originalFilePath, @"\A(?:(/(.|[\r\n])*)?)\z"))
            {
                throw new sys.ArgumentOutOfRangeException("originalFilePath", @"Value should match pattern '\A(?:(/(.|[\r\n])*)?)\z'");
            }

            if (authorMemberId == null)
            {
                throw new sys.ArgumentNullException("authorMemberId");
            }

            if (authorMemberStatus == null)
            {
                throw new sys.ArgumentNullException("authorMemberStatus");
            }

            if (authorEmail == null)
            {
                throw new sys.ArgumentNullException("authorEmail");
            }
            if (authorEmail.Length > 255)
            {
                throw new sys.ArgumentOutOfRangeException("authorEmail", "Length should be at most 255");
            }
            if (!re.Regex.IsMatch(authorEmail, @"\A(?:^['#&A-Za-z0-9._%+-]+@[A-Za-z0-9-][A-Za-z0-9.-]*\.[A-Za-z]{2,15}$)\z"))
            {
                throw new sys.ArgumentOutOfRangeException("authorEmail", @"Value should match pattern '\A(?:^['#&A-Za-z0-9._%+-]+@[A-Za-z0-9-][A-Za-z0-9.-]*\.[A-Za-z]{2,15}$)\z'");
            }

            if (fileType == null)
            {
                throw new sys.ArgumentNullException("fileType");
            }

            if (contentHash == null)
            {
                throw new sys.ArgumentNullException("contentHash");
            }
            if (contentHash.Length < 64)
            {
                throw new sys.ArgumentOutOfRangeException("contentHash", "Length should be at least 64");
            }
            if (contentHash.Length > 64)
            {
                throw new sys.ArgumentOutOfRangeException("contentHash", "Length should be at most 64");
            }

            this.NewFilename = newFilename;
            this.OriginalRevisionId = originalRevisionId;
            this.OriginalFilePath = originalFilePath;
            this.ServerModified = serverModified;
            this.AuthorMemberId = authorMemberId;
            this.AuthorMemberStatus = authorMemberStatus;
            this.AuthorEmail = authorEmail;
            this.FileType = fileType;
            this.Size = size;
            this.ContentHash = contentHash;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="LegalHoldHeldRevisionMetadata"
        /// /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public LegalHoldHeldRevisionMetadata()
        {
        }

        /// <summary>
        /// <para>The held revision filename.</para>
        /// </summary>
        public string NewFilename { get; protected set; }

        /// <summary>
        /// <para>The id of the held revision.</para>
        /// </summary>
        public string OriginalRevisionId { get; protected set; }

        /// <summary>
        /// <para>The original path of the held revision.</para>
        /// </summary>
        public string OriginalFilePath { get; protected set; }

        /// <summary>
        /// <para>The last time the file was modified on Dropbox.</para>
        /// </summary>
        public sys.DateTime ServerModified { get; protected set; }

        /// <summary>
        /// <para>The member id of the revision's author.</para>
        /// </summary>
        public string AuthorMemberId { get; protected set; }

        /// <summary>
        /// <para>The member status of the revision's author.</para>
        /// </summary>
        public TeamMemberStatus AuthorMemberStatus { get; protected set; }

        /// <summary>
        /// <para>The email address of the held revision author.</para>
        /// </summary>
        public string AuthorEmail { get; protected set; }

        /// <summary>
        /// <para>The type of the held revision's file.</para>
        /// </summary>
        public string FileType { get; protected set; }

        /// <summary>
        /// <para>The file size in bytes.</para>
        /// </summary>
        public ulong Size { get; protected set; }

        /// <summary>
        /// <para>A hash of the file content. This field can be used to verify data integrity.
        /// For more information see our <a
        /// href="https://www.dropbox.com/developers/reference/content-hash">Content hash</a>
        /// page.</para>
        /// </summary>
        public string ContentHash { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="LegalHoldHeldRevisionMetadata" />.</para>
        /// </summary>
        private class LegalHoldHeldRevisionMetadataEncoder : enc.StructEncoder<LegalHoldHeldRevisionMetadata>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(LegalHoldHeldRevisionMetadata value, enc.IJsonWriter writer)
            {
                WriteProperty("new_filename", value.NewFilename, writer, enc.StringEncoder.Instance);
                WriteProperty("original_revision_id", value.OriginalRevisionId, writer, enc.StringEncoder.Instance);
                WriteProperty("original_file_path", value.OriginalFilePath, writer, enc.StringEncoder.Instance);
                WriteProperty("server_modified", value.ServerModified, writer, enc.DateTimeEncoder.Instance);
                WriteProperty("author_member_id", value.AuthorMemberId, writer, enc.StringEncoder.Instance);
                WriteProperty("author_member_status", value.AuthorMemberStatus, writer, global::Dropbox.Api.Team.TeamMemberStatus.Encoder);
                WriteProperty("author_email", value.AuthorEmail, writer, enc.StringEncoder.Instance);
                WriteProperty("file_type", value.FileType, writer, enc.StringEncoder.Instance);
                WriteProperty("size", value.Size, writer, enc.UInt64Encoder.Instance);
                WriteProperty("content_hash", value.ContentHash, writer, enc.StringEncoder.Instance);
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="LegalHoldHeldRevisionMetadata" />.</para>
        /// </summary>
        private class LegalHoldHeldRevisionMetadataDecoder : enc.StructDecoder<LegalHoldHeldRevisionMetadata>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="LegalHoldHeldRevisionMetadata"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override LegalHoldHeldRevisionMetadata Create()
            {
                return new LegalHoldHeldRevisionMetadata();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(LegalHoldHeldRevisionMetadata value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "new_filename":
                        value.NewFilename = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "original_revision_id":
                        value.OriginalRevisionId = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "original_file_path":
                        value.OriginalFilePath = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "server_modified":
                        value.ServerModified = enc.DateTimeDecoder.Instance.Decode(reader);
                        break;
                    case "author_member_id":
                        value.AuthorMemberId = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "author_member_status":
                        value.AuthorMemberStatus = global::Dropbox.Api.Team.TeamMemberStatus.Decoder.Decode(reader);
                        break;
                    case "author_email":
                        value.AuthorEmail = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "file_type":
                        value.FileType = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "size":
                        value.Size = enc.UInt64Decoder.Instance.Decode(reader);
                        break;
                    case "content_hash":
                        value.ContentHash = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
