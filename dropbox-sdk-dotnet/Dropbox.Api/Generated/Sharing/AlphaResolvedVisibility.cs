// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Sharing
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>check documentation for ResolvedVisibility.</para>
    /// </summary>
    public class AlphaResolvedVisibility
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<AlphaResolvedVisibility> Encoder = new AlphaResolvedVisibilityEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<AlphaResolvedVisibility> Decoder = new AlphaResolvedVisibilityDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="AlphaResolvedVisibility" />
        /// class.</para>
        /// </summary>
        public AlphaResolvedVisibility()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is TeamAndPassword</para>
        /// </summary>
        public bool IsTeamAndPassword
        {
            get
            {
                return this is TeamAndPassword;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TeamAndPassword, or <c>null</c>.</para>
        /// </summary>
        public TeamAndPassword AsTeamAndPassword
        {
            get
            {
                return this as TeamAndPassword;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is SharedFolderOnly</para>
        /// </summary>
        public bool IsSharedFolderOnly
        {
            get
            {
                return this is SharedFolderOnly;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a SharedFolderOnly, or <c>null</c>.</para>
        /// </summary>
        public SharedFolderOnly AsSharedFolderOnly
        {
            get
            {
                return this as SharedFolderOnly;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is NoOne</para>
        /// </summary>
        public bool IsNoOne
        {
            get
            {
                return this is NoOne;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a NoOne, or <c>null</c>.</para>
        /// </summary>
        public NoOne AsNoOne
        {
            get
            {
                return this as NoOne;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is OnlyYou</para>
        /// </summary>
        public bool IsOnlyYou
        {
            get
            {
                return this is OnlyYou;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a OnlyYou, or <c>null</c>.</para>
        /// </summary>
        public OnlyYou AsOnlyYou
        {
            get
            {
                return this as OnlyYou;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="AlphaResolvedVisibility" />.</para>
        /// </summary>
        private class AlphaResolvedVisibilityEncoder : enc.StructEncoder<AlphaResolvedVisibility>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(AlphaResolvedVisibility value, enc.IJsonWriter writer)
            {
                if (value is TeamAndPassword)
                {
                    WriteProperty(".tag", "team_and_password", writer, enc.StringEncoder.Instance);
                    TeamAndPassword.Encoder.EncodeFields((TeamAndPassword)value, writer);
                    return;
                }
                if (value is SharedFolderOnly)
                {
                    WriteProperty(".tag", "shared_folder_only", writer, enc.StringEncoder.Instance);
                    SharedFolderOnly.Encoder.EncodeFields((SharedFolderOnly)value, writer);
                    return;
                }
                if (value is NoOne)
                {
                    WriteProperty(".tag", "no_one", writer, enc.StringEncoder.Instance);
                    NoOne.Encoder.EncodeFields((NoOne)value, writer);
                    return;
                }
                if (value is OnlyYou)
                {
                    WriteProperty(".tag", "only_you", writer, enc.StringEncoder.Instance);
                    OnlyYou.Encoder.EncodeFields((OnlyYou)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="AlphaResolvedVisibility" />.</para>
        /// </summary>
        private class AlphaResolvedVisibilityDecoder : enc.UnionDecoder<AlphaResolvedVisibility>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="AlphaResolvedVisibility"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override AlphaResolvedVisibility Create()
            {
                return new AlphaResolvedVisibility();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override AlphaResolvedVisibility Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "team_and_password":
                        return TeamAndPassword.Decoder.DecodeFields(reader);
                    case "shared_folder_only":
                        return SharedFolderOnly.Decoder.DecodeFields(reader);
                    case "no_one":
                        return NoOne.Decoder.DecodeFields(reader);
                    case "only_you":
                        return OnlyYou.Decoder.DecodeFields(reader);
                    case "other":
                        return Other.Decoder.DecodeFields(reader);
                    default:
                        throw new sys.InvalidOperationException();
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>Only members of the same team who have the link-specific password can access
        /// the link. Login is required.</para>
        /// </summary>
        public sealed class TeamAndPassword : AlphaResolvedVisibility
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<TeamAndPassword> Encoder = new TeamAndPasswordEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<TeamAndPassword> Decoder = new TeamAndPasswordDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TeamAndPassword" />
            /// class.</para>
            /// </summary>
            private TeamAndPassword()
            {
            }

            /// <summary>
            /// <para>A singleton instance of TeamAndPassword</para>
            /// </summary>
            public static readonly TeamAndPassword Instance = new TeamAndPassword();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="TeamAndPassword" />.</para>
            /// </summary>
            private class TeamAndPasswordEncoder : enc.StructEncoder<TeamAndPassword>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(TeamAndPassword value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="TeamAndPassword" />.</para>
            /// </summary>
            private class TeamAndPasswordDecoder : enc.StructDecoder<TeamAndPassword>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="TeamAndPassword" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override TeamAndPassword Create()
                {
                    return TeamAndPassword.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Only members of the shared folder containing the linked file can access the
        /// link. Login is required.</para>
        /// </summary>
        public sealed class SharedFolderOnly : AlphaResolvedVisibility
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<SharedFolderOnly> Encoder = new SharedFolderOnlyEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<SharedFolderOnly> Decoder = new SharedFolderOnlyDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="SharedFolderOnly" />
            /// class.</para>
            /// </summary>
            private SharedFolderOnly()
            {
            }

            /// <summary>
            /// <para>A singleton instance of SharedFolderOnly</para>
            /// </summary>
            public static readonly SharedFolderOnly Instance = new SharedFolderOnly();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="SharedFolderOnly" />.</para>
            /// </summary>
            private class SharedFolderOnlyEncoder : enc.StructEncoder<SharedFolderOnly>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(SharedFolderOnly value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="SharedFolderOnly" />.</para>
            /// </summary>
            private class SharedFolderOnlyDecoder : enc.StructDecoder<SharedFolderOnly>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="SharedFolderOnly" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override SharedFolderOnly Create()
                {
                    return SharedFolderOnly.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The link merely points the user to the content, and does not grant any
        /// additional rights. Existing members of the content who use this link can only
        /// access the content with their pre-existing access rights. Either on the file
        /// directly, or inherited from a parent folder.</para>
        /// </summary>
        public sealed class NoOne : AlphaResolvedVisibility
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<NoOne> Encoder = new NoOneEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<NoOne> Decoder = new NoOneDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="NoOne" /> class.</para>
            /// </summary>
            private NoOne()
            {
            }

            /// <summary>
            /// <para>A singleton instance of NoOne</para>
            /// </summary>
            public static readonly NoOne Instance = new NoOne();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="NoOne" />.</para>
            /// </summary>
            private class NoOneEncoder : enc.StructEncoder<NoOne>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(NoOne value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="NoOne" />.</para>
            /// </summary>
            private class NoOneDecoder : enc.StructDecoder<NoOne>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="NoOne" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override NoOne Create()
                {
                    return NoOne.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Only the current user can view this link.</para>
        /// </summary>
        public sealed class OnlyYou : AlphaResolvedVisibility
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<OnlyYou> Encoder = new OnlyYouEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<OnlyYou> Decoder = new OnlyYouDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="OnlyYou" /> class.</para>
            /// </summary>
            private OnlyYou()
            {
            }

            /// <summary>
            /// <para>A singleton instance of OnlyYou</para>
            /// </summary>
            public static readonly OnlyYou Instance = new OnlyYou();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="OnlyYou" />.</para>
            /// </summary>
            private class OnlyYouEncoder : enc.StructEncoder<OnlyYou>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(OnlyYou value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="OnlyYou" />.</para>
            /// </summary>
            private class OnlyYouDecoder : enc.StructDecoder<OnlyYou>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="OnlyYou" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override OnlyYou Create()
                {
                    return OnlyYou.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : AlphaResolvedVisibility
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}
