// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Paper.Routes
{
    using sys = System;
    using io = System.IO;
    using col = System.Collections.Generic;
    using t = System.Threading.Tasks;
    using tr = System.Threading;
    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The routes for the <see cref="N:Dropbox.Api.Paper"/> namespace</para>
    /// </summary>
    public class PaperUserRoutes
    {
        /// <summary>
        /// <para>Initializes a new instance of the <see cref="PaperUserRoutes" />
        /// class.</para>
        /// </summary>
        /// <param name="transport">The transport to use</param>
        internal PaperUserRoutes(enc.ITransport transport)
        {
            this.Transport = transport;
        }

        /// <summary>
        /// <para>Gets the transport used for these routes</para>
        /// </summary>
        internal enc.ITransport Transport { get; private set; }

        /// <summary>
        /// <para>Marks the given Paper doc as archived.</para>
        /// <para>This action can be performed or undone by anyone with edit permissions to the
        /// doc.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>This endpoint will be retired in September 2020. Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for more information.</para>
        /// </summary>
        /// <param name="refPaperDoc">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DocLookupError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task DocsArchiveAsync(RefPaperDoc refPaperDoc, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<RefPaperDoc, enc.Empty, DocLookupError>(refPaperDoc, "api", "/paper/docs/archive", "user", global::Dropbox.Api.Paper.RefPaperDoc.Encoder, enc.EmptyDecoder.Instance, global::Dropbox.Api.Paper.DocLookupError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs archive route.</para>
        /// </summary>
        /// <param name="refPaperDoc">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsArchive(RefPaperDoc refPaperDoc, sys.AsyncCallback callback, object state = null)
        {
            var task = this.DocsArchiveAsync(refPaperDoc);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Marks the given Paper doc as archived.</para>
        /// <para>This action can be performed or undone by anyone with edit permissions to the
        /// doc.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>This endpoint will be retired in September 2020. Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for more information.</para>
        /// </summary>
        /// <param name="docId">The Paper doc ID.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DocLookupError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task DocsArchiveAsync(string docId,
                                       tr.CancellationToken cancellationToken = default)
        {
            var refPaperDoc = new RefPaperDoc(docId);

            return this.DocsArchiveAsync(refPaperDoc, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs archive route.</para>
        /// </summary>
        /// <param name="docId">The Paper doc ID.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsArchive(string docId,
                                                 sys.AsyncCallback callback,
                                                 object callbackState = null)
        {
            var refPaperDoc = new RefPaperDoc(docId);

            return this.BeginDocsArchive(refPaperDoc, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the docs archive route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DocLookupError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public void EndDocsArchive(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }
        }

        /// <summary>
        /// <para>Creates a new Paper doc with the provided content.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>This endpoint will be retired in September 2020. Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for more information.</para>
        /// </summary>
        /// <param name="paperDocCreateArgs">The request parameters</param>
        /// <param name="body">The content to upload.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="PaperDocCreateError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task<PaperDocCreateUpdateResult> DocsCreateAsync(PaperDocCreateArgs paperDocCreateArgs, io.Stream body, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendUploadRequestAsync<PaperDocCreateArgs, PaperDocCreateUpdateResult, PaperDocCreateError>(paperDocCreateArgs, body, "api", "/paper/docs/create", "user", global::Dropbox.Api.Paper.PaperDocCreateArgs.Encoder, global::Dropbox.Api.Paper.PaperDocCreateUpdateResult.Decoder, global::Dropbox.Api.Paper.PaperDocCreateError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs create route.</para>
        /// </summary>
        /// <param name="paperDocCreateArgs">The request parameters.</param>
        /// <param name="body">The content to upload.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsCreate(PaperDocCreateArgs paperDocCreateArgs, io.Stream body, sys.AsyncCallback callback, object state = null)
        {
            var task = this.DocsCreateAsync(paperDocCreateArgs, body);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Creates a new Paper doc with the provided content.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>This endpoint will be retired in September 2020. Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for more information.</para>
        /// </summary>
        /// <param name="importFormat">The format of provided data.</param>
        /// <param name="parentFolderId">The Paper folder ID where the Paper document should be
        /// created. The API user has to have write access to this folder or error is
        /// thrown.</param>
        /// <param name="body">The document to upload</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="PaperDocCreateError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task<PaperDocCreateUpdateResult> DocsCreateAsync(ImportFormat importFormat,
                                                                  string parentFolderId = null,
                                                                  io.Stream body = null,
                                                                  tr.CancellationToken cancellationToken = default)
        {
            var paperDocCreateArgs = new PaperDocCreateArgs(importFormat,
                                                            parentFolderId);

            return this.DocsCreateAsync(paperDocCreateArgs, body, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs create route.</para>
        /// </summary>
        /// <param name="importFormat">The format of provided data.</param>
        /// <param name="parentFolderId">The Paper folder ID where the Paper document should be
        /// created. The API user has to have write access to this folder or error is
        /// thrown.</param>
        /// <param name="body">The document to upload</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsCreate(ImportFormat importFormat,
                                                string parentFolderId = null,
                                                io.Stream body = null,
                                                sys.AsyncCallback callback = null,
                                                object callbackState = null)
        {
            var paperDocCreateArgs = new PaperDocCreateArgs(importFormat,
                                                            parentFolderId);

            return this.BeginDocsCreate(paperDocCreateArgs, body, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the docs create route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="PaperDocCreateError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public PaperDocCreateUpdateResult EndDocsCreate(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<PaperDocCreateUpdateResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Exports and downloads Paper doc either as HTML or markdown.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for migration information.</para>
        /// </summary>
        /// <param name="paperDocExport">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DocLookupError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task<enc.IDownloadResponse<PaperDocExportResult>> DocsDownloadAsync(PaperDocExport paperDocExport, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendDownloadRequestAsync<PaperDocExport, PaperDocExportResult, DocLookupError>(paperDocExport, "api", "/paper/docs/download", "user", global::Dropbox.Api.Paper.PaperDocExport.Encoder, global::Dropbox.Api.Paper.PaperDocExportResult.Decoder, global::Dropbox.Api.Paper.DocLookupError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs download route.</para>
        /// </summary>
        /// <param name="paperDocExport">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsDownload(PaperDocExport paperDocExport, sys.AsyncCallback callback, object state = null)
        {
            var task = this.DocsDownloadAsync(paperDocExport);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Exports and downloads Paper doc either as HTML or markdown.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for migration information.</para>
        /// </summary>
        /// <param name="docId">The Paper doc ID.</param>
        /// <param name="exportFormat">The export format</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DocLookupError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task<enc.IDownloadResponse<PaperDocExportResult>> DocsDownloadAsync(string docId,
                                                                                     ExportFormat exportFormat,
                                                                                     tr.CancellationToken cancellationToken = default)
        {
            var paperDocExport = new PaperDocExport(docId,
                                                    exportFormat);

            return this.DocsDownloadAsync(paperDocExport, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs download route.</para>
        /// </summary>
        /// <param name="docId">The Paper doc ID.</param>
        /// <param name="exportFormat">The export format</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsDownload(string docId,
                                                  ExportFormat exportFormat,
                                                  sys.AsyncCallback callback,
                                                  object callbackState = null)
        {
            var paperDocExport = new PaperDocExport(docId,
                                                    exportFormat);

            return this.BeginDocsDownload(paperDocExport, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the docs download route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DocLookupError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public enc.IDownloadResponse<PaperDocExportResult> EndDocsDownload(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<enc.IDownloadResponse<PaperDocExportResult>>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Lists the users who are explicitly invited to the Paper folder in which the
        /// Paper doc is contained. For private folders all users (including owner) shared on
        /// the folder are listed and for team folders all non-team users shared on the folder
        /// are returned.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for migration information.</para>
        /// </summary>
        /// <param name="listUsersOnFolderArgs">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DocLookupError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task<ListUsersOnFolderResponse> DocsFolderUsersListAsync(ListUsersOnFolderArgs listUsersOnFolderArgs, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<ListUsersOnFolderArgs, ListUsersOnFolderResponse, DocLookupError>(listUsersOnFolderArgs, "api", "/paper/docs/folder_users/list", "user", global::Dropbox.Api.Paper.ListUsersOnFolderArgs.Encoder, global::Dropbox.Api.Paper.ListUsersOnFolderResponse.Decoder, global::Dropbox.Api.Paper.DocLookupError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs folder users list route.</para>
        /// </summary>
        /// <param name="listUsersOnFolderArgs">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsFolderUsersList(ListUsersOnFolderArgs listUsersOnFolderArgs, sys.AsyncCallback callback, object state = null)
        {
            var task = this.DocsFolderUsersListAsync(listUsersOnFolderArgs);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Lists the users who are explicitly invited to the Paper folder in which the
        /// Paper doc is contained. For private folders all users (including owner) shared on
        /// the folder are listed and for team folders all non-team users shared on the folder
        /// are returned.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for migration information.</para>
        /// </summary>
        /// <param name="docId">The Paper doc ID.</param>
        /// <param name="limit">Size limit per batch. The maximum number of users that can be
        /// retrieved per batch is 1000. Higher value results in invalid arguments
        /// error.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DocLookupError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task<ListUsersOnFolderResponse> DocsFolderUsersListAsync(string docId,
                                                                          int limit = 1000,
                                                                          tr.CancellationToken cancellationToken = default)
        {
            var listUsersOnFolderArgs = new ListUsersOnFolderArgs(docId,
                                                                  limit);

            return this.DocsFolderUsersListAsync(listUsersOnFolderArgs, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs folder users list route.</para>
        /// </summary>
        /// <param name="docId">The Paper doc ID.</param>
        /// <param name="limit">Size limit per batch. The maximum number of users that can be
        /// retrieved per batch is 1000. Higher value results in invalid arguments
        /// error.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsFolderUsersList(string docId,
                                                         int limit = 1000,
                                                         sys.AsyncCallback callback = null,
                                                         object callbackState = null)
        {
            var listUsersOnFolderArgs = new ListUsersOnFolderArgs(docId,
                                                                  limit);

            return this.BeginDocsFolderUsersList(listUsersOnFolderArgs, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the docs folder users list route
        /// to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DocLookupError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public ListUsersOnFolderResponse EndDocsFolderUsersList(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<ListUsersOnFolderResponse>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Once a cursor has been retrieved from <see
        /// cref="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListAsync" />, use
        /// this to paginate through all users on the Paper folder.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for migration information.</para>
        /// </summary>
        /// <param name="listUsersOnFolderContinueArgs">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListUsersCursorError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task<ListUsersOnFolderResponse> DocsFolderUsersListContinueAsync(ListUsersOnFolderContinueArgs listUsersOnFolderContinueArgs, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<ListUsersOnFolderContinueArgs, ListUsersOnFolderResponse, ListUsersCursorError>(listUsersOnFolderContinueArgs, "api", "/paper/docs/folder_users/list/continue", "user", global::Dropbox.Api.Paper.ListUsersOnFolderContinueArgs.Encoder, global::Dropbox.Api.Paper.ListUsersOnFolderResponse.Decoder, global::Dropbox.Api.Paper.ListUsersCursorError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs folder users list continue
        /// route.</para>
        /// </summary>
        /// <param name="listUsersOnFolderContinueArgs">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsFolderUsersListContinue(ListUsersOnFolderContinueArgs listUsersOnFolderContinueArgs, sys.AsyncCallback callback, object state = null)
        {
            var task = this.DocsFolderUsersListContinueAsync(listUsersOnFolderContinueArgs);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Once a cursor has been retrieved from <see
        /// cref="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListAsync" />, use
        /// this to paginate through all users on the Paper folder.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for migration information.</para>
        /// </summary>
        /// <param name="docId">The Paper doc ID.</param>
        /// <param name="cursor">The cursor obtained from <see
        /// cref="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListAsync" /> or <see
        /// cref="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListContinueAsync"
        /// />. Allows for pagination.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListUsersCursorError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task<ListUsersOnFolderResponse> DocsFolderUsersListContinueAsync(string docId,
                                                                                  string cursor,
                                                                                  tr.CancellationToken cancellationToken = default)
        {
            var listUsersOnFolderContinueArgs = new ListUsersOnFolderContinueArgs(docId,
                                                                                  cursor);

            return this.DocsFolderUsersListContinueAsync(listUsersOnFolderContinueArgs, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs folder users list continue
        /// route.</para>
        /// </summary>
        /// <param name="docId">The Paper doc ID.</param>
        /// <param name="cursor">The cursor obtained from <see
        /// cref="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListAsync" /> or <see
        /// cref="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListContinueAsync"
        /// />. Allows for pagination.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsFolderUsersListContinue(string docId,
                                                                 string cursor,
                                                                 sys.AsyncCallback callback,
                                                                 object callbackState = null)
        {
            var listUsersOnFolderContinueArgs = new ListUsersOnFolderContinueArgs(docId,
                                                                                  cursor);

            return this.BeginDocsFolderUsersListContinue(listUsersOnFolderContinueArgs, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the docs folder users list
        /// continue route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListUsersCursorError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public ListUsersOnFolderResponse EndDocsFolderUsersListContinue(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<ListUsersOnFolderResponse>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Retrieves folder information for the given Paper doc. This includes:</para>
        /// <para>  - folder sharing policy; permissions for subfolders are set by the
        /// top-level folder.</para>
        /// <para>  - full 'filepath', i.e. the list of folders (both folderId and folderName)
        /// from     the root folder to the folder directly containing the Paper doc.</para>
        /// <para></para>
        /// <para>If the Paper doc is not in any folder (aka unfiled) the response will be
        /// empty.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for migration information.</para>
        /// </summary>
        /// <param name="refPaperDoc">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DocLookupError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task<FoldersContainingPaperDoc> DocsGetFolderInfoAsync(RefPaperDoc refPaperDoc, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<RefPaperDoc, FoldersContainingPaperDoc, DocLookupError>(refPaperDoc, "api", "/paper/docs/get_folder_info", "user", global::Dropbox.Api.Paper.RefPaperDoc.Encoder, global::Dropbox.Api.Paper.FoldersContainingPaperDoc.Decoder, global::Dropbox.Api.Paper.DocLookupError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs get folder info route.</para>
        /// </summary>
        /// <param name="refPaperDoc">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsGetFolderInfo(RefPaperDoc refPaperDoc, sys.AsyncCallback callback, object state = null)
        {
            var task = this.DocsGetFolderInfoAsync(refPaperDoc);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Retrieves folder information for the given Paper doc. This includes:</para>
        /// <para>  - folder sharing policy; permissions for subfolders are set by the
        /// top-level folder.</para>
        /// <para>  - full 'filepath', i.e. the list of folders (both folderId and folderName)
        /// from     the root folder to the folder directly containing the Paper doc.</para>
        /// <para></para>
        /// <para>If the Paper doc is not in any folder (aka unfiled) the response will be
        /// empty.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for migration information.</para>
        /// </summary>
        /// <param name="docId">The Paper doc ID.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DocLookupError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task<FoldersContainingPaperDoc> DocsGetFolderInfoAsync(string docId,
                                                                        tr.CancellationToken cancellationToken = default)
        {
            var refPaperDoc = new RefPaperDoc(docId);

            return this.DocsGetFolderInfoAsync(refPaperDoc, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs get folder info route.</para>
        /// </summary>
        /// <param name="docId">The Paper doc ID.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsGetFolderInfo(string docId,
                                                       sys.AsyncCallback callback,
                                                       object callbackState = null)
        {
            var refPaperDoc = new RefPaperDoc(docId);

            return this.BeginDocsGetFolderInfo(refPaperDoc, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the docs get folder info route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DocLookupError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public FoldersContainingPaperDoc EndDocsGetFolderInfo(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<FoldersContainingPaperDoc>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Return the list of all Paper docs according to the argument specifications.
        /// To iterate over through the full pagination, pass the cursor to <see
        /// cref="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListContinueAsync" />.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for migration information.</para>
        /// </summary>
        /// <param name="listPaperDocsArgs">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        [sys.Obsolete("This function is deprecated")]
        public t.Task<ListPaperDocsResponse> DocsListAsync(ListPaperDocsArgs listPaperDocsArgs, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<ListPaperDocsArgs, ListPaperDocsResponse, enc.Empty>(listPaperDocsArgs, "api", "/paper/docs/list", "user", global::Dropbox.Api.Paper.ListPaperDocsArgs.Encoder, global::Dropbox.Api.Paper.ListPaperDocsResponse.Decoder, enc.EmptyDecoder.Instance, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs list route.</para>
        /// </summary>
        /// <param name="listPaperDocsArgs">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsList(ListPaperDocsArgs listPaperDocsArgs, sys.AsyncCallback callback, object state = null)
        {
            var task = this.DocsListAsync(listPaperDocsArgs);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Return the list of all Paper docs according to the argument specifications.
        /// To iterate over through the full pagination, pass the cursor to <see
        /// cref="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListContinueAsync" />.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for migration information.</para>
        /// </summary>
        /// <param name="filterBy">Allows user to specify how the Paper docs should be
        /// filtered.</param>
        /// <param name="sortBy">Allows user to specify how the Paper docs should be
        /// sorted.</param>
        /// <param name="sortOrder">Allows user to specify the sort order of the
        /// result.</param>
        /// <param name="limit">Size limit per batch. The maximum number of docs that can be
        /// retrieved per batch is 1000. Higher value results in invalid arguments
        /// error.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        [sys.Obsolete("This function is deprecated")]
        public t.Task<ListPaperDocsResponse> DocsListAsync(ListPaperDocsFilterBy filterBy = null,
                                                           ListPaperDocsSortBy sortBy = null,
                                                           ListPaperDocsSortOrder sortOrder = null,
                                                           int limit = 1000,
                                                           tr.CancellationToken cancellationToken = default)
        {
            var listPaperDocsArgs = new ListPaperDocsArgs(filterBy,
                                                          sortBy,
                                                          sortOrder,
                                                          limit);

            return this.DocsListAsync(listPaperDocsArgs, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs list route.</para>
        /// </summary>
        /// <param name="filterBy">Allows user to specify how the Paper docs should be
        /// filtered.</param>
        /// <param name="sortBy">Allows user to specify how the Paper docs should be
        /// sorted.</param>
        /// <param name="sortOrder">Allows user to specify the sort order of the
        /// result.</param>
        /// <param name="limit">Size limit per batch. The maximum number of docs that can be
        /// retrieved per batch is 1000. Higher value results in invalid arguments
        /// error.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsList(ListPaperDocsFilterBy filterBy = null,
                                              ListPaperDocsSortBy sortBy = null,
                                              ListPaperDocsSortOrder sortOrder = null,
                                              int limit = 1000,
                                              sys.AsyncCallback callback = null,
                                              object callbackState = null)
        {
            var listPaperDocsArgs = new ListPaperDocsArgs(filterBy,
                                                          sortBy,
                                                          sortOrder,
                                                          limit);

            return this.BeginDocsList(listPaperDocsArgs, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the docs list route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        [sys.Obsolete("This function is deprecated")]
        public ListPaperDocsResponse EndDocsList(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<ListPaperDocsResponse>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Once a cursor has been retrieved from <see
        /// cref="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListAsync" />, use this to
        /// paginate through all Paper doc.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for migration information.</para>
        /// </summary>
        /// <param name="listPaperDocsContinueArgs">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListDocsCursorError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task<ListPaperDocsResponse> DocsListContinueAsync(ListPaperDocsContinueArgs listPaperDocsContinueArgs, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<ListPaperDocsContinueArgs, ListPaperDocsResponse, ListDocsCursorError>(listPaperDocsContinueArgs, "api", "/paper/docs/list/continue", "user", global::Dropbox.Api.Paper.ListPaperDocsContinueArgs.Encoder, global::Dropbox.Api.Paper.ListPaperDocsResponse.Decoder, global::Dropbox.Api.Paper.ListDocsCursorError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs list continue route.</para>
        /// </summary>
        /// <param name="listPaperDocsContinueArgs">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsListContinue(ListPaperDocsContinueArgs listPaperDocsContinueArgs, sys.AsyncCallback callback, object state = null)
        {
            var task = this.DocsListContinueAsync(listPaperDocsContinueArgs);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Once a cursor has been retrieved from <see
        /// cref="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListAsync" />, use this to
        /// paginate through all Paper doc.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for migration information.</para>
        /// </summary>
        /// <param name="cursor">The cursor obtained from <see
        /// cref="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListAsync" /> or <see
        /// cref="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListContinueAsync" />. Allows
        /// for pagination.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListDocsCursorError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task<ListPaperDocsResponse> DocsListContinueAsync(string cursor,
                                                                   tr.CancellationToken cancellationToken = default)
        {
            var listPaperDocsContinueArgs = new ListPaperDocsContinueArgs(cursor);

            return this.DocsListContinueAsync(listPaperDocsContinueArgs, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs list continue route.</para>
        /// </summary>
        /// <param name="cursor">The cursor obtained from <see
        /// cref="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListAsync" /> or <see
        /// cref="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListContinueAsync" />. Allows
        /// for pagination.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsListContinue(string cursor,
                                                      sys.AsyncCallback callback,
                                                      object callbackState = null)
        {
            var listPaperDocsContinueArgs = new ListPaperDocsContinueArgs(cursor);

            return this.BeginDocsListContinue(listPaperDocsContinueArgs, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the docs list continue route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListDocsCursorError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public ListPaperDocsResponse EndDocsListContinue(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<ListPaperDocsResponse>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Permanently deletes the given Paper doc. This operation is final as the doc
        /// cannot be recovered.</para>
        /// <para>This action can be performed only by the doc owner.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for migration information.</para>
        /// </summary>
        /// <param name="refPaperDoc">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DocLookupError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task DocsPermanentlyDeleteAsync(RefPaperDoc refPaperDoc, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<RefPaperDoc, enc.Empty, DocLookupError>(refPaperDoc, "api", "/paper/docs/permanently_delete", "user", global::Dropbox.Api.Paper.RefPaperDoc.Encoder, enc.EmptyDecoder.Instance, global::Dropbox.Api.Paper.DocLookupError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs permanently delete route.</para>
        /// </summary>
        /// <param name="refPaperDoc">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsPermanentlyDelete(RefPaperDoc refPaperDoc, sys.AsyncCallback callback, object state = null)
        {
            var task = this.DocsPermanentlyDeleteAsync(refPaperDoc);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Permanently deletes the given Paper doc. This operation is final as the doc
        /// cannot be recovered.</para>
        /// <para>This action can be performed only by the doc owner.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for migration information.</para>
        /// </summary>
        /// <param name="docId">The Paper doc ID.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DocLookupError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task DocsPermanentlyDeleteAsync(string docId,
                                                 tr.CancellationToken cancellationToken = default)
        {
            var refPaperDoc = new RefPaperDoc(docId);

            return this.DocsPermanentlyDeleteAsync(refPaperDoc, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs permanently delete route.</para>
        /// </summary>
        /// <param name="docId">The Paper doc ID.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsPermanentlyDelete(string docId,
                                                           sys.AsyncCallback callback,
                                                           object callbackState = null)
        {
            var refPaperDoc = new RefPaperDoc(docId);

            return this.BeginDocsPermanentlyDelete(refPaperDoc, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the docs permanently delete route
        /// to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DocLookupError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public void EndDocsPermanentlyDelete(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }
        }

        /// <summary>
        /// <para>Gets the default sharing policy for the given Paper doc.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for migration information.</para>
        /// </summary>
        /// <param name="refPaperDoc">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DocLookupError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task<SharingPolicy> DocsSharingPolicyGetAsync(RefPaperDoc refPaperDoc, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<RefPaperDoc, SharingPolicy, DocLookupError>(refPaperDoc, "api", "/paper/docs/sharing_policy/get", "user", global::Dropbox.Api.Paper.RefPaperDoc.Encoder, global::Dropbox.Api.Paper.SharingPolicy.Decoder, global::Dropbox.Api.Paper.DocLookupError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs sharing policy get route.</para>
        /// </summary>
        /// <param name="refPaperDoc">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsSharingPolicyGet(RefPaperDoc refPaperDoc, sys.AsyncCallback callback, object state = null)
        {
            var task = this.DocsSharingPolicyGetAsync(refPaperDoc);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Gets the default sharing policy for the given Paper doc.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for migration information.</para>
        /// </summary>
        /// <param name="docId">The Paper doc ID.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DocLookupError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task<SharingPolicy> DocsSharingPolicyGetAsync(string docId,
                                                               tr.CancellationToken cancellationToken = default)
        {
            var refPaperDoc = new RefPaperDoc(docId);

            return this.DocsSharingPolicyGetAsync(refPaperDoc, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs sharing policy get route.</para>
        /// </summary>
        /// <param name="docId">The Paper doc ID.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsSharingPolicyGet(string docId,
                                                          sys.AsyncCallback callback,
                                                          object callbackState = null)
        {
            var refPaperDoc = new RefPaperDoc(docId);

            return this.BeginDocsSharingPolicyGet(refPaperDoc, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the docs sharing policy get route
        /// to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DocLookupError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public SharingPolicy EndDocsSharingPolicyGet(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<SharingPolicy>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Sets the default sharing policy for the given Paper doc. The default
        /// 'team_sharing_policy' can be changed only by teams, omit this field for personal
        /// accounts.</para>
        /// <para>The 'public_sharing_policy' policy can't be set to the value 'disabled'
        /// because this setting can be changed only via the team admin console.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for migration information.</para>
        /// </summary>
        /// <param name="paperDocSharingPolicy">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DocLookupError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task DocsSharingPolicySetAsync(PaperDocSharingPolicy paperDocSharingPolicy, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<PaperDocSharingPolicy, enc.Empty, DocLookupError>(paperDocSharingPolicy, "api", "/paper/docs/sharing_policy/set", "user", global::Dropbox.Api.Paper.PaperDocSharingPolicy.Encoder, enc.EmptyDecoder.Instance, global::Dropbox.Api.Paper.DocLookupError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs sharing policy set route.</para>
        /// </summary>
        /// <param name="paperDocSharingPolicy">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsSharingPolicySet(PaperDocSharingPolicy paperDocSharingPolicy, sys.AsyncCallback callback, object state = null)
        {
            var task = this.DocsSharingPolicySetAsync(paperDocSharingPolicy);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Sets the default sharing policy for the given Paper doc. The default
        /// 'team_sharing_policy' can be changed only by teams, omit this field for personal
        /// accounts.</para>
        /// <para>The 'public_sharing_policy' policy can't be set to the value 'disabled'
        /// because this setting can be changed only via the team admin console.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for migration information.</para>
        /// </summary>
        /// <param name="docId">The Paper doc ID.</param>
        /// <param name="sharingPolicy">The default sharing policy to be set for the Paper
        /// doc.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DocLookupError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task DocsSharingPolicySetAsync(string docId,
                                                SharingPolicy sharingPolicy,
                                                tr.CancellationToken cancellationToken = default)
        {
            var paperDocSharingPolicy = new PaperDocSharingPolicy(docId,
                                                                  sharingPolicy);

            return this.DocsSharingPolicySetAsync(paperDocSharingPolicy, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs sharing policy set route.</para>
        /// </summary>
        /// <param name="docId">The Paper doc ID.</param>
        /// <param name="sharingPolicy">The default sharing policy to be set for the Paper
        /// doc.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsSharingPolicySet(string docId,
                                                          SharingPolicy sharingPolicy,
                                                          sys.AsyncCallback callback,
                                                          object callbackState = null)
        {
            var paperDocSharingPolicy = new PaperDocSharingPolicy(docId,
                                                                  sharingPolicy);

            return this.BeginDocsSharingPolicySet(paperDocSharingPolicy, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the docs sharing policy set route
        /// to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DocLookupError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public void EndDocsSharingPolicySet(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }
        }

        /// <summary>
        /// <para>Updates an existing Paper doc with the provided content.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>This endpoint will be retired in September 2020. Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for more information.</para>
        /// </summary>
        /// <param name="paperDocUpdateArgs">The request parameters</param>
        /// <param name="body">The content to upload.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="PaperDocUpdateError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task<PaperDocCreateUpdateResult> DocsUpdateAsync(PaperDocUpdateArgs paperDocUpdateArgs, io.Stream body, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendUploadRequestAsync<PaperDocUpdateArgs, PaperDocCreateUpdateResult, PaperDocUpdateError>(paperDocUpdateArgs, body, "api", "/paper/docs/update", "user", global::Dropbox.Api.Paper.PaperDocUpdateArgs.Encoder, global::Dropbox.Api.Paper.PaperDocCreateUpdateResult.Decoder, global::Dropbox.Api.Paper.PaperDocUpdateError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs update route.</para>
        /// </summary>
        /// <param name="paperDocUpdateArgs">The request parameters.</param>
        /// <param name="body">The content to upload.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsUpdate(PaperDocUpdateArgs paperDocUpdateArgs, io.Stream body, sys.AsyncCallback callback, object state = null)
        {
            var task = this.DocsUpdateAsync(paperDocUpdateArgs, body);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Updates an existing Paper doc with the provided content.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>This endpoint will be retired in September 2020. Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for more information.</para>
        /// </summary>
        /// <param name="docId">The Paper doc ID.</param>
        /// <param name="docUpdatePolicy">The policy used for the current update call.</param>
        /// <param name="revision">The latest doc revision. This value must match the head
        /// revision or an error code will be returned. This is to prevent colliding
        /// writes.</param>
        /// <param name="importFormat">The format of provided data.</param>
        /// <param name="body">The document to upload</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="PaperDocUpdateError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task<PaperDocCreateUpdateResult> DocsUpdateAsync(string docId,
                                                                  PaperDocUpdatePolicy docUpdatePolicy,
                                                                  long revision,
                                                                  ImportFormat importFormat,
                                                                  io.Stream body,
                                                                  tr.CancellationToken cancellationToken = default)
        {
            var paperDocUpdateArgs = new PaperDocUpdateArgs(docId,
                                                            docUpdatePolicy,
                                                            revision,
                                                            importFormat);

            return this.DocsUpdateAsync(paperDocUpdateArgs, body, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs update route.</para>
        /// </summary>
        /// <param name="docId">The Paper doc ID.</param>
        /// <param name="docUpdatePolicy">The policy used for the current update call.</param>
        /// <param name="revision">The latest doc revision. This value must match the head
        /// revision or an error code will be returned. This is to prevent colliding
        /// writes.</param>
        /// <param name="importFormat">The format of provided data.</param>
        /// <param name="body">The document to upload</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsUpdate(string docId,
                                                PaperDocUpdatePolicy docUpdatePolicy,
                                                long revision,
                                                ImportFormat importFormat,
                                                io.Stream body,
                                                sys.AsyncCallback callback,
                                                object callbackState = null)
        {
            var paperDocUpdateArgs = new PaperDocUpdateArgs(docId,
                                                            docUpdatePolicy,
                                                            revision,
                                                            importFormat);

            return this.BeginDocsUpdate(paperDocUpdateArgs, body, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the docs update route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="PaperDocUpdateError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public PaperDocCreateUpdateResult EndDocsUpdate(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<PaperDocCreateUpdateResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Allows an owner or editor to add users to a Paper doc or change their
        /// permissions using their email address or Dropbox account ID.</para>
        /// <para>The doc owner's permissions cannot be changed.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for migration information.</para>
        /// </summary>
        /// <param name="addPaperDocUser">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DocLookupError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task<col.List<AddPaperDocUserMemberResult>> DocsUsersAddAsync(AddPaperDocUser addPaperDocUser, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<AddPaperDocUser, col.List<AddPaperDocUserMemberResult>, DocLookupError>(addPaperDocUser, "api", "/paper/docs/users/add", "user", global::Dropbox.Api.Paper.AddPaperDocUser.Encoder, enc.Decoder.CreateListDecoder(global::Dropbox.Api.Paper.AddPaperDocUserMemberResult.Decoder), global::Dropbox.Api.Paper.DocLookupError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs users add route.</para>
        /// </summary>
        /// <param name="addPaperDocUser">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsUsersAdd(AddPaperDocUser addPaperDocUser, sys.AsyncCallback callback, object state = null)
        {
            var task = this.DocsUsersAddAsync(addPaperDocUser);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Allows an owner or editor to add users to a Paper doc or change their
        /// permissions using their email address or Dropbox account ID.</para>
        /// <para>The doc owner's permissions cannot be changed.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for migration information.</para>
        /// </summary>
        /// <param name="docId">The Paper doc ID.</param>
        /// <param name="members">User which should be added to the Paper doc. Specify only
        /// email address or Dropbox account ID.</param>
        /// <param name="customMessage">A personal message that will be emailed to each
        /// successfully added member.</param>
        /// <param name="quiet">Clients should set this to true if no email message shall be
        /// sent to added users.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DocLookupError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task<col.List<AddPaperDocUserMemberResult>> DocsUsersAddAsync(string docId,
                                                                               col.IEnumerable<AddMember> members,
                                                                               string customMessage = null,
                                                                               bool quiet = false,
                                                                               tr.CancellationToken cancellationToken = default)
        {
            var addPaperDocUser = new AddPaperDocUser(docId,
                                                      members,
                                                      customMessage,
                                                      quiet);

            return this.DocsUsersAddAsync(addPaperDocUser, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs users add route.</para>
        /// </summary>
        /// <param name="docId">The Paper doc ID.</param>
        /// <param name="members">User which should be added to the Paper doc. Specify only
        /// email address or Dropbox account ID.</param>
        /// <param name="customMessage">A personal message that will be emailed to each
        /// successfully added member.</param>
        /// <param name="quiet">Clients should set this to true if no email message shall be
        /// sent to added users.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsUsersAdd(string docId,
                                                  col.IEnumerable<AddMember> members,
                                                  string customMessage = null,
                                                  bool quiet = false,
                                                  sys.AsyncCallback callback = null,
                                                  object callbackState = null)
        {
            var addPaperDocUser = new AddPaperDocUser(docId,
                                                      members,
                                                      customMessage,
                                                      quiet);

            return this.BeginDocsUsersAdd(addPaperDocUser, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the docs users add route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DocLookupError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public col.List<AddPaperDocUserMemberResult> EndDocsUsersAdd(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<col.List<AddPaperDocUserMemberResult>>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Lists all users who visited the Paper doc or users with explicit access. This
        /// call excludes users who have been removed. The list is sorted by the date of the
        /// visit or the share date.</para>
        /// <para>The list will include both users, the explicitly shared ones as well as those
        /// who came in using the Paper url link.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for migration information.</para>
        /// </summary>
        /// <param name="listUsersOnPaperDocArgs">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DocLookupError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task<ListUsersOnPaperDocResponse> DocsUsersListAsync(ListUsersOnPaperDocArgs listUsersOnPaperDocArgs, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<ListUsersOnPaperDocArgs, ListUsersOnPaperDocResponse, DocLookupError>(listUsersOnPaperDocArgs, "api", "/paper/docs/users/list", "user", global::Dropbox.Api.Paper.ListUsersOnPaperDocArgs.Encoder, global::Dropbox.Api.Paper.ListUsersOnPaperDocResponse.Decoder, global::Dropbox.Api.Paper.DocLookupError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs users list route.</para>
        /// </summary>
        /// <param name="listUsersOnPaperDocArgs">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsUsersList(ListUsersOnPaperDocArgs listUsersOnPaperDocArgs, sys.AsyncCallback callback, object state = null)
        {
            var task = this.DocsUsersListAsync(listUsersOnPaperDocArgs);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Lists all users who visited the Paper doc or users with explicit access. This
        /// call excludes users who have been removed. The list is sorted by the date of the
        /// visit or the share date.</para>
        /// <para>The list will include both users, the explicitly shared ones as well as those
        /// who came in using the Paper url link.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for migration information.</para>
        /// </summary>
        /// <param name="docId">The Paper doc ID.</param>
        /// <param name="limit">Size limit per batch. The maximum number of users that can be
        /// retrieved per batch is 1000. Higher value results in invalid arguments
        /// error.</param>
        /// <param name="filterBy">Specify this attribute if you want to obtain users that have
        /// already accessed the Paper doc.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DocLookupError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task<ListUsersOnPaperDocResponse> DocsUsersListAsync(string docId,
                                                                      int limit = 1000,
                                                                      UserOnPaperDocFilter filterBy = null,
                                                                      tr.CancellationToken cancellationToken = default)
        {
            var listUsersOnPaperDocArgs = new ListUsersOnPaperDocArgs(docId,
                                                                      limit,
                                                                      filterBy);

            return this.DocsUsersListAsync(listUsersOnPaperDocArgs, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs users list route.</para>
        /// </summary>
        /// <param name="docId">The Paper doc ID.</param>
        /// <param name="limit">Size limit per batch. The maximum number of users that can be
        /// retrieved per batch is 1000. Higher value results in invalid arguments
        /// error.</param>
        /// <param name="filterBy">Specify this attribute if you want to obtain users that have
        /// already accessed the Paper doc.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsUsersList(string docId,
                                                   int limit = 1000,
                                                   UserOnPaperDocFilter filterBy = null,
                                                   sys.AsyncCallback callback = null,
                                                   object callbackState = null)
        {
            var listUsersOnPaperDocArgs = new ListUsersOnPaperDocArgs(docId,
                                                                      limit,
                                                                      filterBy);

            return this.BeginDocsUsersList(listUsersOnPaperDocArgs, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the docs users list route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DocLookupError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public ListUsersOnPaperDocResponse EndDocsUsersList(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<ListUsersOnPaperDocResponse>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Once a cursor has been retrieved from <see
        /// cref="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListAsync" />, use this to
        /// paginate through all users on the Paper doc.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for migration information.</para>
        /// </summary>
        /// <param name="listUsersOnPaperDocContinueArgs">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListUsersCursorError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task<ListUsersOnPaperDocResponse> DocsUsersListContinueAsync(ListUsersOnPaperDocContinueArgs listUsersOnPaperDocContinueArgs, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<ListUsersOnPaperDocContinueArgs, ListUsersOnPaperDocResponse, ListUsersCursorError>(listUsersOnPaperDocContinueArgs, "api", "/paper/docs/users/list/continue", "user", global::Dropbox.Api.Paper.ListUsersOnPaperDocContinueArgs.Encoder, global::Dropbox.Api.Paper.ListUsersOnPaperDocResponse.Decoder, global::Dropbox.Api.Paper.ListUsersCursorError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs users list continue route.</para>
        /// </summary>
        /// <param name="listUsersOnPaperDocContinueArgs">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsUsersListContinue(ListUsersOnPaperDocContinueArgs listUsersOnPaperDocContinueArgs, sys.AsyncCallback callback, object state = null)
        {
            var task = this.DocsUsersListContinueAsync(listUsersOnPaperDocContinueArgs);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Once a cursor has been retrieved from <see
        /// cref="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListAsync" />, use this to
        /// paginate through all users on the Paper doc.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for migration information.</para>
        /// </summary>
        /// <param name="docId">The Paper doc ID.</param>
        /// <param name="cursor">The cursor obtained from <see
        /// cref="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListAsync" /> or <see
        /// cref="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListContinueAsync" />.
        /// Allows for pagination.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListUsersCursorError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task<ListUsersOnPaperDocResponse> DocsUsersListContinueAsync(string docId,
                                                                              string cursor,
                                                                              tr.CancellationToken cancellationToken = default)
        {
            var listUsersOnPaperDocContinueArgs = new ListUsersOnPaperDocContinueArgs(docId,
                                                                                      cursor);

            return this.DocsUsersListContinueAsync(listUsersOnPaperDocContinueArgs, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs users list continue route.</para>
        /// </summary>
        /// <param name="docId">The Paper doc ID.</param>
        /// <param name="cursor">The cursor obtained from <see
        /// cref="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListAsync" /> or <see
        /// cref="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListContinueAsync" />.
        /// Allows for pagination.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsUsersListContinue(string docId,
                                                           string cursor,
                                                           sys.AsyncCallback callback,
                                                           object callbackState = null)
        {
            var listUsersOnPaperDocContinueArgs = new ListUsersOnPaperDocContinueArgs(docId,
                                                                                      cursor);

            return this.BeginDocsUsersListContinue(listUsersOnPaperDocContinueArgs, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the docs users list continue route
        /// to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListUsersCursorError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public ListUsersOnPaperDocResponse EndDocsUsersListContinue(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<ListUsersOnPaperDocResponse>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Allows an owner or editor to remove users from a Paper doc using their email
        /// address or Dropbox account ID.</para>
        /// <para>The doc owner cannot be removed.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for migration information.</para>
        /// </summary>
        /// <param name="removePaperDocUser">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DocLookupError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task DocsUsersRemoveAsync(RemovePaperDocUser removePaperDocUser, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<RemovePaperDocUser, enc.Empty, DocLookupError>(removePaperDocUser, "api", "/paper/docs/users/remove", "user", global::Dropbox.Api.Paper.RemovePaperDocUser.Encoder, enc.EmptyDecoder.Instance, global::Dropbox.Api.Paper.DocLookupError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs users remove route.</para>
        /// </summary>
        /// <param name="removePaperDocUser">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsUsersRemove(RemovePaperDocUser removePaperDocUser, sys.AsyncCallback callback, object state = null)
        {
            var task = this.DocsUsersRemoveAsync(removePaperDocUser);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Allows an owner or editor to remove users from a Paper doc using their email
        /// address or Dropbox account ID.</para>
        /// <para>The doc owner cannot be removed.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for migration information.</para>
        /// </summary>
        /// <param name="docId">The Paper doc ID.</param>
        /// <param name="member">User which should be removed from the Paper doc. Specify only
        /// email address or Dropbox account ID.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DocLookupError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task DocsUsersRemoveAsync(string docId,
                                           global::Dropbox.Api.Sharing.MemberSelector member,
                                           tr.CancellationToken cancellationToken = default)
        {
            var removePaperDocUser = new RemovePaperDocUser(docId,
                                                            member);

            return this.DocsUsersRemoveAsync(removePaperDocUser, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the docs users remove route.</para>
        /// </summary>
        /// <param name="docId">The Paper doc ID.</param>
        /// <param name="member">User which should be removed from the Paper doc. Specify only
        /// email address or Dropbox account ID.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginDocsUsersRemove(string docId,
                                                     global::Dropbox.Api.Sharing.MemberSelector member,
                                                     sys.AsyncCallback callback,
                                                     object callbackState = null)
        {
            var removePaperDocUser = new RemovePaperDocUser(docId,
                                                            member);

            return this.BeginDocsUsersRemove(removePaperDocUser, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the docs users remove route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DocLookupError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public void EndDocsUsersRemove(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }
        }

        /// <summary>
        /// <para>Create a new Paper folder with the provided info.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for migration information.</para>
        /// </summary>
        /// <param name="paperFolderCreateArg">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="PaperFolderCreateError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task<PaperFolderCreateResult> FoldersCreateAsync(PaperFolderCreateArg paperFolderCreateArg, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<PaperFolderCreateArg, PaperFolderCreateResult, PaperFolderCreateError>(paperFolderCreateArg, "api", "/paper/folders/create", "user", global::Dropbox.Api.Paper.PaperFolderCreateArg.Encoder, global::Dropbox.Api.Paper.PaperFolderCreateResult.Decoder, global::Dropbox.Api.Paper.PaperFolderCreateError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the folders create route.</para>
        /// </summary>
        /// <param name="paperFolderCreateArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginFoldersCreate(PaperFolderCreateArg paperFolderCreateArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.FoldersCreateAsync(paperFolderCreateArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Create a new Paper folder with the provided info.</para>
        /// <para>Note that this endpoint will continue to work for content created by users on
        /// the older version of Paper. To check which version of Paper a user is on, use
        /// /users/features/get_values. If the paper_as_files feature is enabled, then the user
        /// is running the new version of Paper.</para>
        /// <para>Refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a> for migration information.</para>
        /// </summary>
        /// <param name="name">The name of the new Paper folder.</param>
        /// <param name="parentFolderId">The encrypted Paper folder Id where the new Paper
        /// folder should be created. The API user has to have write access to this folder or
        /// error is thrown. If not supplied, the new folder will be created at top
        /// level.</param>
        /// <param name="isTeamFolder">Whether the folder to be created should be a team
        /// folder. This value will be ignored if parent_folder_id is supplied, as the new
        /// folder will inherit the type (private or team folder) from its parent. We will by
        /// default create a top-level private folder if both parent_folder_id and
        /// is_team_folder are not supplied.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="PaperFolderCreateError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public t.Task<PaperFolderCreateResult> FoldersCreateAsync(string name,
                                                                  string parentFolderId = null,
                                                                  bool? isTeamFolder = null,
                                                                  tr.CancellationToken cancellationToken = default)
        {
            var paperFolderCreateArg = new PaperFolderCreateArg(name,
                                                                parentFolderId,
                                                                isTeamFolder);

            return this.FoldersCreateAsync(paperFolderCreateArg, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the folders create route.</para>
        /// </summary>
        /// <param name="name">The name of the new Paper folder.</param>
        /// <param name="parentFolderId">The encrypted Paper folder Id where the new Paper
        /// folder should be created. The API user has to have write access to this folder or
        /// error is thrown. If not supplied, the new folder will be created at top
        /// level.</param>
        /// <param name="isTeamFolder">Whether the folder to be created should be a team
        /// folder. This value will be ignored if parent_folder_id is supplied, as the new
        /// folder will inherit the type (private or team folder) from its parent. We will by
        /// default create a top-level private folder if both parent_folder_id and
        /// is_team_folder are not supplied.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated")]
        public sys.IAsyncResult BeginFoldersCreate(string name,
                                                   string parentFolderId = null,
                                                   bool? isTeamFolder = null,
                                                   sys.AsyncCallback callback = null,
                                                   object callbackState = null)
        {
            var paperFolderCreateArg = new PaperFolderCreateArg(name,
                                                                parentFolderId,
                                                                isTeamFolder);

            return this.BeginFoldersCreate(paperFolderCreateArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the folders create route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="PaperFolderCreateError"/>.</exception>
        [sys.Obsolete("This function is deprecated")]
        public PaperFolderCreateResult EndFoldersCreate(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<PaperFolderCreateResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }
    }
}
