// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Team
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The removed status object</para>
    /// </summary>
    public class RemovedStatus
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<RemovedStatus> Encoder = new RemovedStatusEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<RemovedStatus> Decoder = new RemovedStatusDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="RemovedStatus" /> class.</para>
        /// </summary>
        /// <param name="isRecoverable">True if the removed team member is recoverable.</param>
        /// <param name="isDisconnected">True if the team member's account was converted to
        /// individual account.</param>
        public RemovedStatus(bool isRecoverable,
                             bool isDisconnected)
        {
            this.IsRecoverable = isRecoverable;
            this.IsDisconnected = isDisconnected;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="RemovedStatus" /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public RemovedStatus()
        {
        }

        /// <summary>
        /// <para>True if the removed team member is recoverable.</para>
        /// </summary>
        public bool IsRecoverable { get; protected set; }

        /// <summary>
        /// <para>True if the team member's account was converted to individual account.</para>
        /// </summary>
        public bool IsDisconnected { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="RemovedStatus" />.</para>
        /// </summary>
        private class RemovedStatusEncoder : enc.StructEncoder<RemovedStatus>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(RemovedStatus value, enc.IJsonWriter writer)
            {
                WriteProperty("is_recoverable", value.IsRecoverable, writer, enc.BooleanEncoder.Instance);
                WriteProperty("is_disconnected", value.IsDisconnected, writer, enc.BooleanEncoder.Instance);
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="RemovedStatus" />.</para>
        /// </summary>
        private class RemovedStatusDecoder : enc.StructDecoder<RemovedStatus>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="RemovedStatus" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override RemovedStatus Create()
            {
                return new RemovedStatus();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(RemovedStatus value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "is_recoverable":
                        value.IsRecoverable = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    case "is_disconnected":
                        value.IsDisconnected = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
