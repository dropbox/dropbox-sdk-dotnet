// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Sharing
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The add folder member error object</para>
    /// </summary>
    public class AddFolderMemberError
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<AddFolderMemberError> Encoder = new AddFolderMemberErrorEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<AddFolderMemberError> Decoder = new AddFolderMemberErrorDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="AddFolderMemberError" />
        /// class.</para>
        /// </summary>
        public AddFolderMemberError()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is AccessError</para>
        /// </summary>
        public bool IsAccessError
        {
            get
            {
                return this is AccessError;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a AccessError, or <c>null</c>.</para>
        /// </summary>
        public AccessError AsAccessError
        {
            get
            {
                return this as AccessError;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is EmailUnverified</para>
        /// </summary>
        public bool IsEmailUnverified
        {
            get
            {
                return this is EmailUnverified;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a EmailUnverified, or <c>null</c>.</para>
        /// </summary>
        public EmailUnverified AsEmailUnverified
        {
            get
            {
                return this as EmailUnverified;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is BannedMember</para>
        /// </summary>
        public bool IsBannedMember
        {
            get
            {
                return this is BannedMember;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a BannedMember, or <c>null</c>.</para>
        /// </summary>
        public BannedMember AsBannedMember
        {
            get
            {
                return this as BannedMember;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is BadMember</para>
        /// </summary>
        public bool IsBadMember
        {
            get
            {
                return this is BadMember;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a BadMember, or <c>null</c>.</para>
        /// </summary>
        public BadMember AsBadMember
        {
            get
            {
                return this as BadMember;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is CantShareOutsideTeam</para>
        /// </summary>
        public bool IsCantShareOutsideTeam
        {
            get
            {
                return this is CantShareOutsideTeam;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a CantShareOutsideTeam, or <c>null</c>.</para>
        /// </summary>
        public CantShareOutsideTeam AsCantShareOutsideTeam
        {
            get
            {
                return this as CantShareOutsideTeam;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is TooManyMembers</para>
        /// </summary>
        public bool IsTooManyMembers
        {
            get
            {
                return this is TooManyMembers;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TooManyMembers, or <c>null</c>.</para>
        /// </summary>
        public TooManyMembers AsTooManyMembers
        {
            get
            {
                return this as TooManyMembers;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is TooManyPendingInvites</para>
        /// </summary>
        public bool IsTooManyPendingInvites
        {
            get
            {
                return this is TooManyPendingInvites;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TooManyPendingInvites, or <c>null</c>.</para>
        /// </summary>
        public TooManyPendingInvites AsTooManyPendingInvites
        {
            get
            {
                return this as TooManyPendingInvites;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is RateLimit</para>
        /// </summary>
        public bool IsRateLimit
        {
            get
            {
                return this is RateLimit;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a RateLimit, or <c>null</c>.</para>
        /// </summary>
        public RateLimit AsRateLimit
        {
            get
            {
                return this as RateLimit;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is TooManyInvitees</para>
        /// </summary>
        public bool IsTooManyInvitees
        {
            get
            {
                return this is TooManyInvitees;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TooManyInvitees, or <c>null</c>.</para>
        /// </summary>
        public TooManyInvitees AsTooManyInvitees
        {
            get
            {
                return this as TooManyInvitees;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is InsufficientPlan</para>
        /// </summary>
        public bool IsInsufficientPlan
        {
            get
            {
                return this is InsufficientPlan;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a InsufficientPlan, or <c>null</c>.</para>
        /// </summary>
        public InsufficientPlan AsInsufficientPlan
        {
            get
            {
                return this as InsufficientPlan;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is TeamFolder</para>
        /// </summary>
        public bool IsTeamFolder
        {
            get
            {
                return this is TeamFolder;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TeamFolder, or <c>null</c>.</para>
        /// </summary>
        public TeamFolder AsTeamFolder
        {
            get
            {
                return this as TeamFolder;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is NoPermission</para>
        /// </summary>
        public bool IsNoPermission
        {
            get
            {
                return this is NoPermission;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a NoPermission, or <c>null</c>.</para>
        /// </summary>
        public NoPermission AsNoPermission
        {
            get
            {
                return this as NoPermission;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is InvalidSharedFolder</para>
        /// </summary>
        public bool IsInvalidSharedFolder
        {
            get
            {
                return this is InvalidSharedFolder;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a InvalidSharedFolder, or <c>null</c>.</para>
        /// </summary>
        public InvalidSharedFolder AsInvalidSharedFolder
        {
            get
            {
                return this as InvalidSharedFolder;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="AddFolderMemberError" />.</para>
        /// </summary>
        private class AddFolderMemberErrorEncoder : enc.StructEncoder<AddFolderMemberError>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(AddFolderMemberError value, enc.IJsonWriter writer)
            {
                if (value is AccessError)
                {
                    WriteProperty(".tag", "access_error", writer, enc.StringEncoder.Instance);
                    AccessError.Encoder.EncodeFields((AccessError)value, writer);
                    return;
                }
                if (value is EmailUnverified)
                {
                    WriteProperty(".tag", "email_unverified", writer, enc.StringEncoder.Instance);
                    EmailUnverified.Encoder.EncodeFields((EmailUnverified)value, writer);
                    return;
                }
                if (value is BannedMember)
                {
                    WriteProperty(".tag", "banned_member", writer, enc.StringEncoder.Instance);
                    BannedMember.Encoder.EncodeFields((BannedMember)value, writer);
                    return;
                }
                if (value is BadMember)
                {
                    WriteProperty(".tag", "bad_member", writer, enc.StringEncoder.Instance);
                    BadMember.Encoder.EncodeFields((BadMember)value, writer);
                    return;
                }
                if (value is CantShareOutsideTeam)
                {
                    WriteProperty(".tag", "cant_share_outside_team", writer, enc.StringEncoder.Instance);
                    CantShareOutsideTeam.Encoder.EncodeFields((CantShareOutsideTeam)value, writer);
                    return;
                }
                if (value is TooManyMembers)
                {
                    WriteProperty(".tag", "too_many_members", writer, enc.StringEncoder.Instance);
                    TooManyMembers.Encoder.EncodeFields((TooManyMembers)value, writer);
                    return;
                }
                if (value is TooManyPendingInvites)
                {
                    WriteProperty(".tag", "too_many_pending_invites", writer, enc.StringEncoder.Instance);
                    TooManyPendingInvites.Encoder.EncodeFields((TooManyPendingInvites)value, writer);
                    return;
                }
                if (value is RateLimit)
                {
                    WriteProperty(".tag", "rate_limit", writer, enc.StringEncoder.Instance);
                    RateLimit.Encoder.EncodeFields((RateLimit)value, writer);
                    return;
                }
                if (value is TooManyInvitees)
                {
                    WriteProperty(".tag", "too_many_invitees", writer, enc.StringEncoder.Instance);
                    TooManyInvitees.Encoder.EncodeFields((TooManyInvitees)value, writer);
                    return;
                }
                if (value is InsufficientPlan)
                {
                    WriteProperty(".tag", "insufficient_plan", writer, enc.StringEncoder.Instance);
                    InsufficientPlan.Encoder.EncodeFields((InsufficientPlan)value, writer);
                    return;
                }
                if (value is TeamFolder)
                {
                    WriteProperty(".tag", "team_folder", writer, enc.StringEncoder.Instance);
                    TeamFolder.Encoder.EncodeFields((TeamFolder)value, writer);
                    return;
                }
                if (value is NoPermission)
                {
                    WriteProperty(".tag", "no_permission", writer, enc.StringEncoder.Instance);
                    NoPermission.Encoder.EncodeFields((NoPermission)value, writer);
                    return;
                }
                if (value is InvalidSharedFolder)
                {
                    WriteProperty(".tag", "invalid_shared_folder", writer, enc.StringEncoder.Instance);
                    InvalidSharedFolder.Encoder.EncodeFields((InvalidSharedFolder)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="AddFolderMemberError" />.</para>
        /// </summary>
        private class AddFolderMemberErrorDecoder : enc.UnionDecoder<AddFolderMemberError>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="AddFolderMemberError" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override AddFolderMemberError Create()
            {
                return new AddFolderMemberError();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override AddFolderMemberError Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "access_error":
                        return AccessError.Decoder.DecodeFields(reader);
                    case "email_unverified":
                        return EmailUnverified.Decoder.DecodeFields(reader);
                    case "banned_member":
                        return BannedMember.Decoder.DecodeFields(reader);
                    case "bad_member":
                        return BadMember.Decoder.DecodeFields(reader);
                    case "cant_share_outside_team":
                        return CantShareOutsideTeam.Decoder.DecodeFields(reader);
                    case "too_many_members":
                        return TooManyMembers.Decoder.DecodeFields(reader);
                    case "too_many_pending_invites":
                        return TooManyPendingInvites.Decoder.DecodeFields(reader);
                    case "rate_limit":
                        return RateLimit.Decoder.DecodeFields(reader);
                    case "too_many_invitees":
                        return TooManyInvitees.Decoder.DecodeFields(reader);
                    case "insufficient_plan":
                        return InsufficientPlan.Decoder.DecodeFields(reader);
                    case "team_folder":
                        return TeamFolder.Decoder.DecodeFields(reader);
                    case "no_permission":
                        return NoPermission.Decoder.DecodeFields(reader);
                    case "invalid_shared_folder":
                        return InvalidSharedFolder.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>Unable to access shared folder.</para>
        /// </summary>
        public sealed class AccessError : AddFolderMemberError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<AccessError> Encoder = new AccessErrorEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<AccessError> Decoder = new AccessErrorDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="AccessError" />
            /// class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public AccessError(SharedFolderAccessError value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="AccessError" />
            /// class.</para>
            /// </summary>
            private AccessError()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public SharedFolderAccessError Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="AccessError" />.</para>
            /// </summary>
            private class AccessErrorEncoder : enc.StructEncoder<AccessError>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(AccessError value, enc.IJsonWriter writer)
                {
                    WriteProperty("access_error", value.Value, writer, global::Dropbox.Api.Sharing.SharedFolderAccessError.Encoder);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="AccessError" />.</para>
            /// </summary>
            private class AccessErrorDecoder : enc.StructDecoder<AccessError>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="AccessError" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override AccessError Create()
                {
                    return new AccessError();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(AccessError value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "access_error":
                            value.Value = global::Dropbox.Api.Sharing.SharedFolderAccessError.Decoder.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>The current user's e-mail address is unverified.</para>
        /// </summary>
        public sealed class EmailUnverified : AddFolderMemberError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<EmailUnverified> Encoder = new EmailUnverifiedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<EmailUnverified> Decoder = new EmailUnverifiedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="EmailUnverified" />
            /// class.</para>
            /// </summary>
            private EmailUnverified()
            {
            }

            /// <summary>
            /// <para>A singleton instance of EmailUnverified</para>
            /// </summary>
            public static readonly EmailUnverified Instance = new EmailUnverified();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="EmailUnverified" />.</para>
            /// </summary>
            private class EmailUnverifiedEncoder : enc.StructEncoder<EmailUnverified>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(EmailUnverified value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="EmailUnverified" />.</para>
            /// </summary>
            private class EmailUnverifiedDecoder : enc.StructDecoder<EmailUnverified>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="EmailUnverified" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override EmailUnverified Create()
                {
                    return EmailUnverified.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The current user has been banned.</para>
        /// </summary>
        public sealed class BannedMember : AddFolderMemberError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<BannedMember> Encoder = new BannedMemberEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<BannedMember> Decoder = new BannedMemberDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="BannedMember" />
            /// class.</para>
            /// </summary>
            private BannedMember()
            {
            }

            /// <summary>
            /// <para>A singleton instance of BannedMember</para>
            /// </summary>
            public static readonly BannedMember Instance = new BannedMember();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="BannedMember" />.</para>
            /// </summary>
            private class BannedMemberEncoder : enc.StructEncoder<BannedMember>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(BannedMember value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="BannedMember" />.</para>
            /// </summary>
            private class BannedMemberDecoder : enc.StructDecoder<BannedMember>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="BannedMember" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override BannedMember Create()
                {
                    return BannedMember.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para><see cref="Dropbox.Api.Sharing.AddFolderMemberArg.Members" /> contains a bad
        /// invitation recipient.</para>
        /// </summary>
        public sealed class BadMember : AddFolderMemberError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<BadMember> Encoder = new BadMemberEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<BadMember> Decoder = new BadMemberDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="BadMember" /> class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public BadMember(AddMemberSelectorError value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="BadMember" /> class.</para>
            /// </summary>
            private BadMember()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public AddMemberSelectorError Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="BadMember" />.</para>
            /// </summary>
            private class BadMemberEncoder : enc.StructEncoder<BadMember>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(BadMember value, enc.IJsonWriter writer)
                {
                    WriteProperty("bad_member", value.Value, writer, global::Dropbox.Api.Sharing.AddMemberSelectorError.Encoder);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="BadMember" />.</para>
            /// </summary>
            private class BadMemberDecoder : enc.StructDecoder<BadMember>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="BadMember" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override BadMember Create()
                {
                    return new BadMember();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(BadMember value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "bad_member":
                            value.Value = global::Dropbox.Api.Sharing.AddMemberSelectorError.Decoder.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>Your team policy does not allow sharing outside of the team.</para>
        /// </summary>
        public sealed class CantShareOutsideTeam : AddFolderMemberError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<CantShareOutsideTeam> Encoder = new CantShareOutsideTeamEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<CantShareOutsideTeam> Decoder = new CantShareOutsideTeamDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="CantShareOutsideTeam" />
            /// class.</para>
            /// </summary>
            private CantShareOutsideTeam()
            {
            }

            /// <summary>
            /// <para>A singleton instance of CantShareOutsideTeam</para>
            /// </summary>
            public static readonly CantShareOutsideTeam Instance = new CantShareOutsideTeam();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="CantShareOutsideTeam" />.</para>
            /// </summary>
            private class CantShareOutsideTeamEncoder : enc.StructEncoder<CantShareOutsideTeam>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(CantShareOutsideTeam value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="CantShareOutsideTeam" />.</para>
            /// </summary>
            private class CantShareOutsideTeamDecoder : enc.StructDecoder<CantShareOutsideTeam>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="CantShareOutsideTeam"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override CantShareOutsideTeam Create()
                {
                    return CantShareOutsideTeam.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The value is the member limit that was reached.</para>
        /// </summary>
        public sealed class TooManyMembers : AddFolderMemberError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<TooManyMembers> Encoder = new TooManyMembersEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<TooManyMembers> Decoder = new TooManyMembersDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TooManyMembers" />
            /// class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public TooManyMembers(ulong value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TooManyMembers" />
            /// class.</para>
            /// </summary>
            private TooManyMembers()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public ulong Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="TooManyMembers" />.</para>
            /// </summary>
            private class TooManyMembersEncoder : enc.StructEncoder<TooManyMembers>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(TooManyMembers value, enc.IJsonWriter writer)
                {
                    WriteProperty("too_many_members", value.Value, writer, enc.UInt64Encoder.Instance);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="TooManyMembers" />.</para>
            /// </summary>
            private class TooManyMembersDecoder : enc.StructDecoder<TooManyMembers>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="TooManyMembers" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override TooManyMembers Create()
                {
                    return new TooManyMembers();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(TooManyMembers value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "too_many_members":
                            value.Value = enc.UInt64Decoder.Instance.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>The value is the pending invite limit that was reached.</para>
        /// </summary>
        public sealed class TooManyPendingInvites : AddFolderMemberError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<TooManyPendingInvites> Encoder = new TooManyPendingInvitesEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<TooManyPendingInvites> Decoder = new TooManyPendingInvitesDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TooManyPendingInvites" />
            /// class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public TooManyPendingInvites(ulong value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TooManyPendingInvites" />
            /// class.</para>
            /// </summary>
            private TooManyPendingInvites()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public ulong Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="TooManyPendingInvites" />.</para>
            /// </summary>
            private class TooManyPendingInvitesEncoder : enc.StructEncoder<TooManyPendingInvites>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(TooManyPendingInvites value, enc.IJsonWriter writer)
                {
                    WriteProperty("too_many_pending_invites", value.Value, writer, enc.UInt64Encoder.Instance);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="TooManyPendingInvites" />.</para>
            /// </summary>
            private class TooManyPendingInvitesDecoder : enc.StructDecoder<TooManyPendingInvites>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="TooManyPendingInvites"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override TooManyPendingInvites Create()
                {
                    return new TooManyPendingInvites();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(TooManyPendingInvites value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "too_many_pending_invites":
                            value.Value = enc.UInt64Decoder.Instance.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>The current user has hit the limit of invites they can send per day. Try
        /// again in 24 hours.</para>
        /// </summary>
        public sealed class RateLimit : AddFolderMemberError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<RateLimit> Encoder = new RateLimitEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<RateLimit> Decoder = new RateLimitDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="RateLimit" /> class.</para>
            /// </summary>
            private RateLimit()
            {
            }

            /// <summary>
            /// <para>A singleton instance of RateLimit</para>
            /// </summary>
            public static readonly RateLimit Instance = new RateLimit();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="RateLimit" />.</para>
            /// </summary>
            private class RateLimitEncoder : enc.StructEncoder<RateLimit>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(RateLimit value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="RateLimit" />.</para>
            /// </summary>
            private class RateLimitDecoder : enc.StructDecoder<RateLimit>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="RateLimit" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override RateLimit Create()
                {
                    return RateLimit.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The current user is trying to share with too many people at once.</para>
        /// </summary>
        public sealed class TooManyInvitees : AddFolderMemberError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<TooManyInvitees> Encoder = new TooManyInviteesEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<TooManyInvitees> Decoder = new TooManyInviteesDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TooManyInvitees" />
            /// class.</para>
            /// </summary>
            private TooManyInvitees()
            {
            }

            /// <summary>
            /// <para>A singleton instance of TooManyInvitees</para>
            /// </summary>
            public static readonly TooManyInvitees Instance = new TooManyInvitees();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="TooManyInvitees" />.</para>
            /// </summary>
            private class TooManyInviteesEncoder : enc.StructEncoder<TooManyInvitees>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(TooManyInvitees value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="TooManyInvitees" />.</para>
            /// </summary>
            private class TooManyInviteesDecoder : enc.StructDecoder<TooManyInvitees>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="TooManyInvitees" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override TooManyInvitees Create()
                {
                    return TooManyInvitees.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The current user's account doesn't support this action. An example of this is
        /// when adding a read-only member. This action can only be performed by users that
        /// have upgraded to a Pro or Business plan.</para>
        /// </summary>
        public sealed class InsufficientPlan : AddFolderMemberError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<InsufficientPlan> Encoder = new InsufficientPlanEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<InsufficientPlan> Decoder = new InsufficientPlanDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="InsufficientPlan" />
            /// class.</para>
            /// </summary>
            private InsufficientPlan()
            {
            }

            /// <summary>
            /// <para>A singleton instance of InsufficientPlan</para>
            /// </summary>
            public static readonly InsufficientPlan Instance = new InsufficientPlan();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="InsufficientPlan" />.</para>
            /// </summary>
            private class InsufficientPlanEncoder : enc.StructEncoder<InsufficientPlan>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(InsufficientPlan value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="InsufficientPlan" />.</para>
            /// </summary>
            private class InsufficientPlanDecoder : enc.StructDecoder<InsufficientPlan>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="InsufficientPlan" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override InsufficientPlan Create()
                {
                    return InsufficientPlan.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>This action cannot be performed on a team shared folder.</para>
        /// </summary>
        public sealed class TeamFolder : AddFolderMemberError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<TeamFolder> Encoder = new TeamFolderEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<TeamFolder> Decoder = new TeamFolderDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TeamFolder" /> class.</para>
            /// </summary>
            private TeamFolder()
            {
            }

            /// <summary>
            /// <para>A singleton instance of TeamFolder</para>
            /// </summary>
            public static readonly TeamFolder Instance = new TeamFolder();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="TeamFolder" />.</para>
            /// </summary>
            private class TeamFolderEncoder : enc.StructEncoder<TeamFolder>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(TeamFolder value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="TeamFolder" />.</para>
            /// </summary>
            private class TeamFolderDecoder : enc.StructDecoder<TeamFolder>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="TeamFolder" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override TeamFolder Create()
                {
                    return TeamFolder.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The current user does not have permission to perform this action.</para>
        /// </summary>
        public sealed class NoPermission : AddFolderMemberError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<NoPermission> Encoder = new NoPermissionEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<NoPermission> Decoder = new NoPermissionDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="NoPermission" />
            /// class.</para>
            /// </summary>
            private NoPermission()
            {
            }

            /// <summary>
            /// <para>A singleton instance of NoPermission</para>
            /// </summary>
            public static readonly NoPermission Instance = new NoPermission();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="NoPermission" />.</para>
            /// </summary>
            private class NoPermissionEncoder : enc.StructEncoder<NoPermission>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(NoPermission value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="NoPermission" />.</para>
            /// </summary>
            private class NoPermissionDecoder : enc.StructDecoder<NoPermission>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="NoPermission" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override NoPermission Create()
                {
                    return NoPermission.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Invalid shared folder error will be returned as an access_error.</para>
        /// </summary>
        public sealed class InvalidSharedFolder : AddFolderMemberError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<InvalidSharedFolder> Encoder = new InvalidSharedFolderEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<InvalidSharedFolder> Decoder = new InvalidSharedFolderDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="InvalidSharedFolder" />
            /// class.</para>
            /// </summary>
            private InvalidSharedFolder()
            {
            }

            /// <summary>
            /// <para>A singleton instance of InvalidSharedFolder</para>
            /// </summary>
            public static readonly InvalidSharedFolder Instance = new InvalidSharedFolder();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="InvalidSharedFolder" />.</para>
            /// </summary>
            private class InvalidSharedFolderEncoder : enc.StructEncoder<InvalidSharedFolder>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(InvalidSharedFolder value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="InvalidSharedFolder" />.</para>
            /// </summary>
            private class InvalidSharedFolderDecoder : enc.StructDecoder<InvalidSharedFolder>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="InvalidSharedFolder"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override InvalidSharedFolder Create()
                {
                    return InvalidSharedFolder.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : AddFolderMemberError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}
