// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The move batch arg object</para>
    /// </summary>
    /// <seealso cref="Global::Dropbox.Api.Files.RelocationBatchArgBase" />
    public class MoveBatchArg : RelocationBatchArgBase
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<MoveBatchArg> Encoder = new MoveBatchArgEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<MoveBatchArg> Decoder = new MoveBatchArgDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="MoveBatchArg" /> class.</para>
        /// </summary>
        /// <param name="entries">List of entries to be moved or copied. Each entry is <see
        /// cref="RelocationPath" />.</param>
        /// <param name="autorename">If there's a conflict with any file, have the Dropbox
        /// server try to autorename that file to avoid the conflict.</param>
        /// <param name="allowOwnershipTransfer">Allow moves by owner even if it would result
        /// in an ownership transfer for the content being moved. This does not apply to
        /// copies.</param>
        public MoveBatchArg(col.IEnumerable<RelocationPath> entries,
                            bool autorename = false,
                            bool allowOwnershipTransfer = false)
            : base(entries, autorename)
        {
            this.AllowOwnershipTransfer = allowOwnershipTransfer;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="MoveBatchArg" /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public MoveBatchArg()
        {
            this.AllowOwnershipTransfer = false;
        }

        /// <summary>
        /// <para>Allow moves by owner even if it would result in an ownership transfer for the
        /// content being moved. This does not apply to copies.</para>
        /// </summary>
        public bool AllowOwnershipTransfer { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="MoveBatchArg" />.</para>
        /// </summary>
        private class MoveBatchArgEncoder : enc.StructEncoder<MoveBatchArg>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(MoveBatchArg value, enc.IJsonWriter writer)
            {
                WriteListProperty("entries", value.Entries, writer, global::Dropbox.Api.Files.RelocationPath.Encoder);
                WriteProperty("autorename", value.Autorename, writer, enc.BooleanEncoder.Instance);
                WriteProperty("allow_ownership_transfer", value.AllowOwnershipTransfer, writer, enc.BooleanEncoder.Instance);
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="MoveBatchArg" />.</para>
        /// </summary>
        private class MoveBatchArgDecoder : enc.StructDecoder<MoveBatchArg>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="MoveBatchArg" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override MoveBatchArg Create()
            {
                return new MoveBatchArg();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(MoveBatchArg value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "entries":
                        value.Entries = ReadList<RelocationPath>(reader, global::Dropbox.Api.Files.RelocationPath.Decoder);
                        break;
                    case "autorename":
                        value.Autorename = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    case "allow_ownership_transfer":
                        value.AllowOwnershipTransfer = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
