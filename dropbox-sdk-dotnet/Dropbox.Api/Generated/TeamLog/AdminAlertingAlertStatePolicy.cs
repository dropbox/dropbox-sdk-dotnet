// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamLog
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Policy for controlling whether an alert can be triggered or not</para>
    /// </summary>
    public class AdminAlertingAlertStatePolicy
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<AdminAlertingAlertStatePolicy> Encoder = new AdminAlertingAlertStatePolicyEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<AdminAlertingAlertStatePolicy> Decoder = new AdminAlertingAlertStatePolicyDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="AdminAlertingAlertStatePolicy"
        /// /> class.</para>
        /// </summary>
        public AdminAlertingAlertStatePolicy()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Off</para>
        /// </summary>
        public bool IsOff
        {
            get
            {
                return this is Off;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Off, or <c>null</c>.</para>
        /// </summary>
        public Off AsOff
        {
            get
            {
                return this as Off;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is On</para>
        /// </summary>
        public bool IsOn
        {
            get
            {
                return this is On;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a On, or <c>null</c>.</para>
        /// </summary>
        public On AsOn
        {
            get
            {
                return this as On;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="AdminAlertingAlertStatePolicy" />.</para>
        /// </summary>
        private class AdminAlertingAlertStatePolicyEncoder : enc.StructEncoder<AdminAlertingAlertStatePolicy>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(AdminAlertingAlertStatePolicy value, enc.IJsonWriter writer)
            {
                if (value is Off)
                {
                    WriteProperty(".tag", "off", writer, enc.StringEncoder.Instance);
                    Off.Encoder.EncodeFields((Off)value, writer);
                    return;
                }
                if (value is On)
                {
                    WriteProperty(".tag", "on", writer, enc.StringEncoder.Instance);
                    On.Encoder.EncodeFields((On)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="AdminAlertingAlertStatePolicy" />.</para>
        /// </summary>
        private class AdminAlertingAlertStatePolicyDecoder : enc.UnionDecoder<AdminAlertingAlertStatePolicy>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="AdminAlertingAlertStatePolicy"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override AdminAlertingAlertStatePolicy Create()
            {
                return new AdminAlertingAlertStatePolicy();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override AdminAlertingAlertStatePolicy Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "off":
                        return Off.Decoder.DecodeFields(reader);
                    case "on":
                        return On.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The off object</para>
        /// </summary>
        public sealed class Off : AdminAlertingAlertStatePolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Off> Encoder = new OffEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Off> Decoder = new OffDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Off" /> class.</para>
            /// </summary>
            private Off()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Off</para>
            /// </summary>
            public static readonly Off Instance = new Off();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Off" />.</para>
            /// </summary>
            private class OffEncoder : enc.StructEncoder<Off>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Off value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Off" />.</para>
            /// </summary>
            private class OffDecoder : enc.StructDecoder<Off>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Off" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Off Create()
                {
                    return Off.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The on object</para>
        /// </summary>
        public sealed class On : AdminAlertingAlertStatePolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<On> Encoder = new OnEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<On> Decoder = new OnDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="On" /> class.</para>
            /// </summary>
            private On()
            {
            }

            /// <summary>
            /// <para>A singleton instance of On</para>
            /// </summary>
            public static readonly On Instance = new On();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="On" />.</para>
            /// </summary>
            private class OnEncoder : enc.StructEncoder<On>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(On value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="On" />.</para>
            /// </summary>
            private class OnDecoder : enc.StructDecoder<On>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="On" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override On Create()
                {
                    return On.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : AdminAlertingAlertStatePolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}
