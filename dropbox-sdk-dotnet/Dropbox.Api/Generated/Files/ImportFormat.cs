// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The import format of the incoming Paper doc content.</para>
    /// </summary>
    public class ImportFormat
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<ImportFormat> Encoder = new ImportFormatEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<ImportFormat> Decoder = new ImportFormatDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="ImportFormat" /> class.</para>
        /// </summary>
        public ImportFormat()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Html</para>
        /// </summary>
        public bool IsHtml
        {
            get
            {
                return this is Html;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Html, or <c>null</c>.</para>
        /// </summary>
        public Html AsHtml
        {
            get
            {
                return this as Html;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Markdown</para>
        /// </summary>
        public bool IsMarkdown
        {
            get
            {
                return this is Markdown;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Markdown, or <c>null</c>.</para>
        /// </summary>
        public Markdown AsMarkdown
        {
            get
            {
                return this as Markdown;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is PlainText</para>
        /// </summary>
        public bool IsPlainText
        {
            get
            {
                return this is PlainText;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a PlainText, or <c>null</c>.</para>
        /// </summary>
        public PlainText AsPlainText
        {
            get
            {
                return this as PlainText;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="ImportFormat" />.</para>
        /// </summary>
        private class ImportFormatEncoder : enc.StructEncoder<ImportFormat>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(ImportFormat value, enc.IJsonWriter writer)
            {
                if (value is Html)
                {
                    WriteProperty(".tag", "html", writer, enc.StringEncoder.Instance);
                    Html.Encoder.EncodeFields((Html)value, writer);
                    return;
                }
                if (value is Markdown)
                {
                    WriteProperty(".tag", "markdown", writer, enc.StringEncoder.Instance);
                    Markdown.Encoder.EncodeFields((Markdown)value, writer);
                    return;
                }
                if (value is PlainText)
                {
                    WriteProperty(".tag", "plain_text", writer, enc.StringEncoder.Instance);
                    PlainText.Encoder.EncodeFields((PlainText)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="ImportFormat" />.</para>
        /// </summary>
        private class ImportFormatDecoder : enc.UnionDecoder<ImportFormat>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="ImportFormat" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override ImportFormat Create()
            {
                return new ImportFormat();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override ImportFormat Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "html":
                        return Html.Decoder.DecodeFields(reader);
                    case "markdown":
                        return Markdown.Decoder.DecodeFields(reader);
                    case "plain_text":
                        return PlainText.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The provided data is interpreted as standard HTML.</para>
        /// </summary>
        public sealed class Html : ImportFormat
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Html> Encoder = new HtmlEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Html> Decoder = new HtmlDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Html" /> class.</para>
            /// </summary>
            private Html()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Html</para>
            /// </summary>
            public static readonly Html Instance = new Html();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Html" />.</para>
            /// </summary>
            private class HtmlEncoder : enc.StructEncoder<Html>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Html value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Html" />.</para>
            /// </summary>
            private class HtmlDecoder : enc.StructDecoder<Html>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Html" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Html Create()
                {
                    return Html.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The provided data is interpreted as markdown.</para>
        /// </summary>
        public sealed class Markdown : ImportFormat
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Markdown> Encoder = new MarkdownEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Markdown> Decoder = new MarkdownDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Markdown" /> class.</para>
            /// </summary>
            private Markdown()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Markdown</para>
            /// </summary>
            public static readonly Markdown Instance = new Markdown();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Markdown" />.</para>
            /// </summary>
            private class MarkdownEncoder : enc.StructEncoder<Markdown>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Markdown value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Markdown" />.</para>
            /// </summary>
            private class MarkdownDecoder : enc.StructDecoder<Markdown>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Markdown" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Markdown Create()
                {
                    return Markdown.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The provided data is interpreted as plain text.</para>
        /// </summary>
        public sealed class PlainText : ImportFormat
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<PlainText> Encoder = new PlainTextEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<PlainText> Decoder = new PlainTextDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="PlainText" /> class.</para>
            /// </summary>
            private PlainText()
            {
            }

            /// <summary>
            /// <para>A singleton instance of PlainText</para>
            /// </summary>
            public static readonly PlainText Instance = new PlainText();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="PlainText" />.</para>
            /// </summary>
            private class PlainTextEncoder : enc.StructEncoder<PlainText>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(PlainText value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="PlainText" />.</para>
            /// </summary>
            private class PlainTextDecoder : enc.StructDecoder<PlainText>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="PlainText" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override PlainText Create()
                {
                    return PlainText.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : ImportFormat
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}
