// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Sharing
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The visibility policy object</para>
    /// </summary>
    public class VisibilityPolicy
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<VisibilityPolicy> Encoder = new VisibilityPolicyEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<VisibilityPolicy> Decoder = new VisibilityPolicyDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="VisibilityPolicy" />
        /// class.</para>
        /// </summary>
        /// <param name="policy">This is the value to submit when saving the visibility
        /// setting.</param>
        /// <param name="resolvedPolicy">This is what the effective policy would be, if you
        /// selected this option. The resolved policy is obtained after considering external
        /// effects such as shared folder settings and team policy. This value is guaranteed to
        /// be provided.</param>
        /// <param name="allowed">Whether the user is permitted to set the visibility to this
        /// policy.</param>
        /// <param name="disallowedReason">If <paramref name="allowed" /> is <c>false</c>, this
        /// will provide the reason that the user is not permitted to set the visibility to
        /// this policy.</param>
        public VisibilityPolicy(RequestedVisibility policy,
                                AlphaResolvedVisibility resolvedPolicy,
                                bool allowed,
                                VisibilityPolicyDisallowedReason disallowedReason = null)
        {
            if (policy == null)
            {
                throw new sys.ArgumentNullException("policy");
            }

            if (resolvedPolicy == null)
            {
                throw new sys.ArgumentNullException("resolvedPolicy");
            }

            this.Policy = policy;
            this.ResolvedPolicy = resolvedPolicy;
            this.Allowed = allowed;
            this.DisallowedReason = disallowedReason;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="VisibilityPolicy" />
        /// class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public VisibilityPolicy()
        {
        }

        /// <summary>
        /// <para>This is the value to submit when saving the visibility setting.</para>
        /// </summary>
        public RequestedVisibility Policy { get; protected set; }

        /// <summary>
        /// <para>This is what the effective policy would be, if you selected this option. The
        /// resolved policy is obtained after considering external effects such as shared
        /// folder settings and team policy. This value is guaranteed to be provided.</para>
        /// </summary>
        public AlphaResolvedVisibility ResolvedPolicy { get; protected set; }

        /// <summary>
        /// <para>Whether the user is permitted to set the visibility to this policy.</para>
        /// </summary>
        public bool Allowed { get; protected set; }

        /// <summary>
        /// <para>If <see cref="Allowed" /> is <c>false</c>, this will provide the reason that
        /// the user is not permitted to set the visibility to this policy.</para>
        /// </summary>
        public VisibilityPolicyDisallowedReason DisallowedReason { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="VisibilityPolicy" />.</para>
        /// </summary>
        private class VisibilityPolicyEncoder : enc.StructEncoder<VisibilityPolicy>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(VisibilityPolicy value, enc.IJsonWriter writer)
            {
                WriteProperty("policy", value.Policy, writer, global::Dropbox.Api.Sharing.RequestedVisibility.Encoder);
                WriteProperty("resolved_policy", value.ResolvedPolicy, writer, global::Dropbox.Api.Sharing.AlphaResolvedVisibility.Encoder);
                WriteProperty("allowed", value.Allowed, writer, enc.BooleanEncoder.Instance);
                if (value.DisallowedReason != null)
                {
                    WriteProperty("disallowed_reason", value.DisallowedReason, writer, global::Dropbox.Api.Sharing.VisibilityPolicyDisallowedReason.Encoder);
                }
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="VisibilityPolicy" />.</para>
        /// </summary>
        private class VisibilityPolicyDecoder : enc.StructDecoder<VisibilityPolicy>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="VisibilityPolicy" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override VisibilityPolicy Create()
            {
                return new VisibilityPolicy();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(VisibilityPolicy value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "policy":
                        value.Policy = global::Dropbox.Api.Sharing.RequestedVisibility.Decoder.Decode(reader);
                        break;
                    case "resolved_policy":
                        value.ResolvedPolicy = global::Dropbox.Api.Sharing.AlphaResolvedVisibility.Decoder.Decode(reader);
                        break;
                    case "allowed":
                        value.Allowed = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    case "disallowed_reason":
                        value.DisallowedReason = global::Dropbox.Api.Sharing.VisibilityPolicyDisallowedReason.Decoder.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
