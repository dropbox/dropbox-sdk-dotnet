// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.FileRequests
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>A <a href="https://www.dropbox.com/help/9090">file request</a> for receiving
    /// files into the user's Dropbox account.</para>
    /// </summary>
    public class FileRequest
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<FileRequest> Encoder = new FileRequestEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<FileRequest> Decoder = new FileRequestDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="FileRequest" /> class.</para>
        /// </summary>
        /// <param name="id">The ID of the file request.</param>
        /// <param name="url">The URL of the file request.</param>
        /// <param name="title">The title of the file request.</param>
        /// <param name="created">When this file request was created.</param>
        /// <param name="isOpen">Whether or not the file request is open. If the file request
        /// is closed, it will not accept any more file submissions.</param>
        /// <param name="fileCount">The number of files this file request has received.</param>
        /// <param name="destination">The path of the folder in the Dropbox where uploaded
        /// files will be sent. This can be <c>null</c> if the destination was removed. For
        /// apps with the app folder permission, this will be relative to the app
        /// folder.</param>
        /// <param name="deadline">The deadline for this file request. Only set if the request
        /// has a deadline.</param>
        /// <param name="description">A description of the file request.</param>
        public FileRequest(string id,
                           string url,
                           string title,
                           sys.DateTime created,
                           bool isOpen,
                           long fileCount,
                           string destination = null,
                           FileRequestDeadline deadline = null,
                           string description = null)
        {
            if (id == null)
            {
                throw new sys.ArgumentNullException("id");
            }
            if (id.Length < 1)
            {
                throw new sys.ArgumentOutOfRangeException("id", "Length should be at least 1");
            }
            if (!re.Regex.IsMatch(id, @"\A(?:[-_0-9a-zA-Z]+)\z"))
            {
                throw new sys.ArgumentOutOfRangeException("id", @"Value should match pattern '\A(?:[-_0-9a-zA-Z]+)\z'");
            }

            if (url == null)
            {
                throw new sys.ArgumentNullException("url");
            }
            if (url.Length < 1)
            {
                throw new sys.ArgumentOutOfRangeException("url", "Length should be at least 1");
            }

            if (title == null)
            {
                throw new sys.ArgumentNullException("title");
            }
            if (title.Length < 1)
            {
                throw new sys.ArgumentOutOfRangeException("title", "Length should be at least 1");
            }

            if (destination != null)
            {
                if (!re.Regex.IsMatch(destination, @"\A(?:/(.|[\r\n])*)\z"))
                {
                    throw new sys.ArgumentOutOfRangeException("destination", @"Value should match pattern '\A(?:/(.|[\r\n])*)\z'");
                }
            }

            this.Id = id;
            this.Url = url;
            this.Title = title;
            this.Created = created;
            this.IsOpen = isOpen;
            this.FileCount = fileCount;
            this.Destination = destination;
            this.Deadline = deadline;
            this.Description = description;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="FileRequest" /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public FileRequest()
        {
        }

        /// <summary>
        /// <para>The ID of the file request.</para>
        /// </summary>
        public string Id { get; protected set; }

        /// <summary>
        /// <para>The URL of the file request.</para>
        /// </summary>
        public string Url { get; protected set; }

        /// <summary>
        /// <para>The title of the file request.</para>
        /// </summary>
        public string Title { get; protected set; }

        /// <summary>
        /// <para>When this file request was created.</para>
        /// </summary>
        public sys.DateTime Created { get; protected set; }

        /// <summary>
        /// <para>Whether or not the file request is open. If the file request is closed, it
        /// will not accept any more file submissions.</para>
        /// </summary>
        public bool IsOpen { get; protected set; }

        /// <summary>
        /// <para>The number of files this file request has received.</para>
        /// </summary>
        public long FileCount { get; protected set; }

        /// <summary>
        /// <para>The path of the folder in the Dropbox where uploaded files will be sent. This
        /// can be <c>null</c> if the destination was removed. For apps with the app folder
        /// permission, this will be relative to the app folder.</para>
        /// </summary>
        public string Destination { get; protected set; }

        /// <summary>
        /// <para>The deadline for this file request. Only set if the request has a
        /// deadline.</para>
        /// </summary>
        public FileRequestDeadline Deadline { get; protected set; }

        /// <summary>
        /// <para>A description of the file request.</para>
        /// </summary>
        public string Description { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="FileRequest" />.</para>
        /// </summary>
        private class FileRequestEncoder : enc.StructEncoder<FileRequest>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(FileRequest value, enc.IJsonWriter writer)
            {
                WriteProperty("id", value.Id, writer, enc.StringEncoder.Instance);
                WriteProperty("url", value.Url, writer, enc.StringEncoder.Instance);
                WriteProperty("title", value.Title, writer, enc.StringEncoder.Instance);
                WriteProperty("created", value.Created, writer, enc.DateTimeEncoder.Instance);
                WriteProperty("is_open", value.IsOpen, writer, enc.BooleanEncoder.Instance);
                WriteProperty("file_count", value.FileCount, writer, enc.Int64Encoder.Instance);
                if (value.Destination != null)
                {
                    WriteProperty("destination", value.Destination, writer, enc.StringEncoder.Instance);
                }
                if (value.Deadline != null)
                {
                    WriteProperty("deadline", value.Deadline, writer, global::Dropbox.Api.FileRequests.FileRequestDeadline.Encoder);
                }
                if (value.Description != null)
                {
                    WriteProperty("description", value.Description, writer, enc.StringEncoder.Instance);
                }
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="FileRequest" />.</para>
        /// </summary>
        private class FileRequestDecoder : enc.StructDecoder<FileRequest>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="FileRequest" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override FileRequest Create()
            {
                return new FileRequest();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(FileRequest value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "id":
                        value.Id = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "url":
                        value.Url = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "title":
                        value.Title = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "created":
                        value.Created = enc.DateTimeDecoder.Instance.Decode(reader);
                        break;
                    case "is_open":
                        value.IsOpen = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    case "file_count":
                        value.FileCount = enc.Int64Decoder.Instance.Decode(reader);
                        break;
                    case "destination":
                        value.Destination = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "deadline":
                        value.Deadline = global::Dropbox.Api.FileRequests.FileRequestDeadline.Decoder.Decode(reader);
                        break;
                    case "description":
                        value.Description = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
