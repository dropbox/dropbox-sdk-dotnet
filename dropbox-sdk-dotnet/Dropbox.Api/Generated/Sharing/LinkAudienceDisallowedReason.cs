// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Sharing
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>check documentation for VisibilityPolicyDisallowedReason.</para>
    /// </summary>
    public class LinkAudienceDisallowedReason
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<LinkAudienceDisallowedReason> Encoder = new LinkAudienceDisallowedReasonEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<LinkAudienceDisallowedReason> Decoder = new LinkAudienceDisallowedReasonDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="LinkAudienceDisallowedReason" />
        /// class.</para>
        /// </summary>
        public LinkAudienceDisallowedReason()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is DeleteAndRecreate</para>
        /// </summary>
        public bool IsDeleteAndRecreate
        {
            get
            {
                return this is DeleteAndRecreate;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a DeleteAndRecreate, or <c>null</c>.</para>
        /// </summary>
        public DeleteAndRecreate AsDeleteAndRecreate
        {
            get
            {
                return this as DeleteAndRecreate;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is
        /// RestrictedBySharedFolder</para>
        /// </summary>
        public bool IsRestrictedBySharedFolder
        {
            get
            {
                return this is RestrictedBySharedFolder;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a RestrictedBySharedFolder, or <c>null</c>.</para>
        /// </summary>
        public RestrictedBySharedFolder AsRestrictedBySharedFolder
        {
            get
            {
                return this as RestrictedBySharedFolder;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is RestrictedByTeam</para>
        /// </summary>
        public bool IsRestrictedByTeam
        {
            get
            {
                return this is RestrictedByTeam;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a RestrictedByTeam, or <c>null</c>.</para>
        /// </summary>
        public RestrictedByTeam AsRestrictedByTeam
        {
            get
            {
                return this as RestrictedByTeam;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is UserNotOnTeam</para>
        /// </summary>
        public bool IsUserNotOnTeam
        {
            get
            {
                return this is UserNotOnTeam;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a UserNotOnTeam, or <c>null</c>.</para>
        /// </summary>
        public UserNotOnTeam AsUserNotOnTeam
        {
            get
            {
                return this as UserNotOnTeam;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is UserAccountType</para>
        /// </summary>
        public bool IsUserAccountType
        {
            get
            {
                return this is UserAccountType;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a UserAccountType, or <c>null</c>.</para>
        /// </summary>
        public UserAccountType AsUserAccountType
        {
            get
            {
                return this as UserAccountType;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is PermissionDenied</para>
        /// </summary>
        public bool IsPermissionDenied
        {
            get
            {
                return this is PermissionDenied;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a PermissionDenied, or <c>null</c>.</para>
        /// </summary>
        public PermissionDenied AsPermissionDenied
        {
            get
            {
                return this as PermissionDenied;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="LinkAudienceDisallowedReason" />.</para>
        /// </summary>
        private class LinkAudienceDisallowedReasonEncoder : enc.StructEncoder<LinkAudienceDisallowedReason>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(LinkAudienceDisallowedReason value, enc.IJsonWriter writer)
            {
                if (value is DeleteAndRecreate)
                {
                    WriteProperty(".tag", "delete_and_recreate", writer, enc.StringEncoder.Instance);
                    DeleteAndRecreate.Encoder.EncodeFields((DeleteAndRecreate)value, writer);
                    return;
                }
                if (value is RestrictedBySharedFolder)
                {
                    WriteProperty(".tag", "restricted_by_shared_folder", writer, enc.StringEncoder.Instance);
                    RestrictedBySharedFolder.Encoder.EncodeFields((RestrictedBySharedFolder)value, writer);
                    return;
                }
                if (value is RestrictedByTeam)
                {
                    WriteProperty(".tag", "restricted_by_team", writer, enc.StringEncoder.Instance);
                    RestrictedByTeam.Encoder.EncodeFields((RestrictedByTeam)value, writer);
                    return;
                }
                if (value is UserNotOnTeam)
                {
                    WriteProperty(".tag", "user_not_on_team", writer, enc.StringEncoder.Instance);
                    UserNotOnTeam.Encoder.EncodeFields((UserNotOnTeam)value, writer);
                    return;
                }
                if (value is UserAccountType)
                {
                    WriteProperty(".tag", "user_account_type", writer, enc.StringEncoder.Instance);
                    UserAccountType.Encoder.EncodeFields((UserAccountType)value, writer);
                    return;
                }
                if (value is PermissionDenied)
                {
                    WriteProperty(".tag", "permission_denied", writer, enc.StringEncoder.Instance);
                    PermissionDenied.Encoder.EncodeFields((PermissionDenied)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="LinkAudienceDisallowedReason" />.</para>
        /// </summary>
        private class LinkAudienceDisallowedReasonDecoder : enc.UnionDecoder<LinkAudienceDisallowedReason>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="LinkAudienceDisallowedReason"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override LinkAudienceDisallowedReason Create()
            {
                return new LinkAudienceDisallowedReason();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override LinkAudienceDisallowedReason Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "delete_and_recreate":
                        return DeleteAndRecreate.Decoder.DecodeFields(reader);
                    case "restricted_by_shared_folder":
                        return RestrictedBySharedFolder.Decoder.DecodeFields(reader);
                    case "restricted_by_team":
                        return RestrictedByTeam.Decoder.DecodeFields(reader);
                    case "user_not_on_team":
                        return UserNotOnTeam.Decoder.DecodeFields(reader);
                    case "user_account_type":
                        return UserAccountType.Decoder.DecodeFields(reader);
                    case "permission_denied":
                        return PermissionDenied.Decoder.DecodeFields(reader);
                    case "other":
                        return Other.Decoder.DecodeFields(reader);
                    default:
                        throw new sys.InvalidOperationException();
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The user needs to delete and recreate the link to change the visibility
        /// policy.</para>
        /// </summary>
        public sealed class DeleteAndRecreate : LinkAudienceDisallowedReason
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<DeleteAndRecreate> Encoder = new DeleteAndRecreateEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<DeleteAndRecreate> Decoder = new DeleteAndRecreateDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="DeleteAndRecreate" />
            /// class.</para>
            /// </summary>
            private DeleteAndRecreate()
            {
            }

            /// <summary>
            /// <para>A singleton instance of DeleteAndRecreate</para>
            /// </summary>
            public static readonly DeleteAndRecreate Instance = new DeleteAndRecreate();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="DeleteAndRecreate" />.</para>
            /// </summary>
            private class DeleteAndRecreateEncoder : enc.StructEncoder<DeleteAndRecreate>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(DeleteAndRecreate value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="DeleteAndRecreate" />.</para>
            /// </summary>
            private class DeleteAndRecreateDecoder : enc.StructDecoder<DeleteAndRecreate>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="DeleteAndRecreate"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override DeleteAndRecreate Create()
                {
                    return DeleteAndRecreate.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The parent shared folder restricts sharing of links outside the shared
        /// folder. To change the visibility policy, remove the restriction from the parent
        /// shared folder.</para>
        /// </summary>
        public sealed class RestrictedBySharedFolder : LinkAudienceDisallowedReason
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<RestrictedBySharedFolder> Encoder = new RestrictedBySharedFolderEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<RestrictedBySharedFolder> Decoder = new RestrictedBySharedFolderDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="RestrictedBySharedFolder" />
            /// class.</para>
            /// </summary>
            private RestrictedBySharedFolder()
            {
            }

            /// <summary>
            /// <para>A singleton instance of RestrictedBySharedFolder</para>
            /// </summary>
            public static readonly RestrictedBySharedFolder Instance = new RestrictedBySharedFolder();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="RestrictedBySharedFolder" />.</para>
            /// </summary>
            private class RestrictedBySharedFolderEncoder : enc.StructEncoder<RestrictedBySharedFolder>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(RestrictedBySharedFolder value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="RestrictedBySharedFolder" />.</para>
            /// </summary>
            private class RestrictedBySharedFolderDecoder : enc.StructDecoder<RestrictedBySharedFolder>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="RestrictedBySharedFolder"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override RestrictedBySharedFolder Create()
                {
                    return RestrictedBySharedFolder.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The team policy prevents links being shared outside the team.</para>
        /// </summary>
        public sealed class RestrictedByTeam : LinkAudienceDisallowedReason
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<RestrictedByTeam> Encoder = new RestrictedByTeamEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<RestrictedByTeam> Decoder = new RestrictedByTeamDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="RestrictedByTeam" />
            /// class.</para>
            /// </summary>
            private RestrictedByTeam()
            {
            }

            /// <summary>
            /// <para>A singleton instance of RestrictedByTeam</para>
            /// </summary>
            public static readonly RestrictedByTeam Instance = new RestrictedByTeam();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="RestrictedByTeam" />.</para>
            /// </summary>
            private class RestrictedByTeamEncoder : enc.StructEncoder<RestrictedByTeam>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(RestrictedByTeam value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="RestrictedByTeam" />.</para>
            /// </summary>
            private class RestrictedByTeamDecoder : enc.StructDecoder<RestrictedByTeam>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="RestrictedByTeam" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override RestrictedByTeam Create()
                {
                    return RestrictedByTeam.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The user needs to be on a team to set this policy.</para>
        /// </summary>
        public sealed class UserNotOnTeam : LinkAudienceDisallowedReason
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<UserNotOnTeam> Encoder = new UserNotOnTeamEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<UserNotOnTeam> Decoder = new UserNotOnTeamDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="UserNotOnTeam" />
            /// class.</para>
            /// </summary>
            private UserNotOnTeam()
            {
            }

            /// <summary>
            /// <para>A singleton instance of UserNotOnTeam</para>
            /// </summary>
            public static readonly UserNotOnTeam Instance = new UserNotOnTeam();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="UserNotOnTeam" />.</para>
            /// </summary>
            private class UserNotOnTeamEncoder : enc.StructEncoder<UserNotOnTeam>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(UserNotOnTeam value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="UserNotOnTeam" />.</para>
            /// </summary>
            private class UserNotOnTeamDecoder : enc.StructDecoder<UserNotOnTeam>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="UserNotOnTeam" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override UserNotOnTeam Create()
                {
                    return UserNotOnTeam.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The user is a basic user or is on a limited team.</para>
        /// </summary>
        public sealed class UserAccountType : LinkAudienceDisallowedReason
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<UserAccountType> Encoder = new UserAccountTypeEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<UserAccountType> Decoder = new UserAccountTypeDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="UserAccountType" />
            /// class.</para>
            /// </summary>
            private UserAccountType()
            {
            }

            /// <summary>
            /// <para>A singleton instance of UserAccountType</para>
            /// </summary>
            public static readonly UserAccountType Instance = new UserAccountType();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="UserAccountType" />.</para>
            /// </summary>
            private class UserAccountTypeEncoder : enc.StructEncoder<UserAccountType>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(UserAccountType value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="UserAccountType" />.</para>
            /// </summary>
            private class UserAccountTypeDecoder : enc.StructDecoder<UserAccountType>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="UserAccountType" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override UserAccountType Create()
                {
                    return UserAccountType.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The user does not have permission.</para>
        /// </summary>
        public sealed class PermissionDenied : LinkAudienceDisallowedReason
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<PermissionDenied> Encoder = new PermissionDeniedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<PermissionDenied> Decoder = new PermissionDeniedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="PermissionDenied" />
            /// class.</para>
            /// </summary>
            private PermissionDenied()
            {
            }

            /// <summary>
            /// <para>A singleton instance of PermissionDenied</para>
            /// </summary>
            public static readonly PermissionDenied Instance = new PermissionDenied();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="PermissionDenied" />.</para>
            /// </summary>
            private class PermissionDeniedEncoder : enc.StructEncoder<PermissionDenied>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(PermissionDenied value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="PermissionDenied" />.</para>
            /// </summary>
            private class PermissionDeniedDecoder : enc.StructDecoder<PermissionDenied>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="PermissionDenied" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override PermissionDenied Create()
                {
                    return PermissionDenied.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : LinkAudienceDisallowedReason
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}
