// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Openid.Routes
{
    using sys = System;
    using io = System.IO;
    using col = System.Collections.Generic;
    using t = System.Threading.Tasks;
    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The routes for the <see cref="N:Dropbox.Api.Openid"/> namespace</para>
    /// </summary>
    public class OpenidUserRoutes
    {
        /// <summary>
        /// <para>Initializes a new instance of the <see cref="OpenidUserRoutes" />
        /// class.</para>
        /// </summary>
        /// <param name="transport">The transport to use</param>
        internal OpenidUserRoutes(enc.ITransport transport)
        {
            this.Transport = transport;
        }

        /// <summary>
        /// <para>Gets the transport used for these routes</para>
        /// </summary>
        internal enc.ITransport Transport { get; private set; }

        /// <summary>
        /// <para>This route is used for refreshing the info that is found in the id_token
        /// during the OIDC flow. This route doesn't require any arguments and will use the
        /// scopes approved for the given access token.</para>
        /// </summary>
        /// <param name="userInfoArgs">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="UserInfoError"/>.</exception>
        public t.Task<UserInfoResult> UserinfoAsync(UserInfoArgs userInfoArgs)
        {
            return this.Transport.SendRpcRequestAsync<UserInfoArgs, UserInfoResult, UserInfoError>(userInfoArgs, "api", "/openid/userinfo", "user", global::Dropbox.Api.Openid.UserInfoArgs.Encoder, global::Dropbox.Api.Openid.UserInfoResult.Decoder, global::Dropbox.Api.Openid.UserInfoError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the userinfo route.</para>
        /// </summary>
        /// <param name="userInfoArgs">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginUserinfo(UserInfoArgs userInfoArgs, sys.AsyncCallback callback, object state = null)
        {
            var task = this.UserinfoAsync(userInfoArgs);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the userinfo route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="UserInfoError"/>.</exception>
        public UserInfoResult EndUserinfo(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<UserInfoResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }
    }
}
