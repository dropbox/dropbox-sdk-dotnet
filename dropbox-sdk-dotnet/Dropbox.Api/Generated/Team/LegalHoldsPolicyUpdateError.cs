// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Team
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The legal holds policy update error object</para>
    /// </summary>
    public class LegalHoldsPolicyUpdateError
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<LegalHoldsPolicyUpdateError> Encoder = new LegalHoldsPolicyUpdateErrorEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<LegalHoldsPolicyUpdateError> Decoder = new LegalHoldsPolicyUpdateErrorDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="LegalHoldsPolicyUpdateError" />
        /// class.</para>
        /// </summary>
        public LegalHoldsPolicyUpdateError()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is TransientError</para>
        /// </summary>
        public bool IsTransientError
        {
            get
            {
                return this is TransientError;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TransientError, or <c>null</c>.</para>
        /// </summary>
        public TransientError AsTransientError
        {
            get
            {
                return this as TransientError;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is InactiveLegalHold</para>
        /// </summary>
        public bool IsInactiveLegalHold
        {
            get
            {
                return this is InactiveLegalHold;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a InactiveLegalHold, or <c>null</c>.</para>
        /// </summary>
        public InactiveLegalHold AsInactiveLegalHold
        {
            get
            {
                return this as InactiveLegalHold;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is
        /// LegalHoldPerformingAnotherOperation</para>
        /// </summary>
        public bool IsLegalHoldPerformingAnotherOperation
        {
            get
            {
                return this is LegalHoldPerformingAnotherOperation;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a LegalHoldPerformingAnotherOperation, or
        /// <c>null</c>.</para>
        /// </summary>
        public LegalHoldPerformingAnotherOperation AsLegalHoldPerformingAnotherOperation
        {
            get
            {
                return this as LegalHoldPerformingAnotherOperation;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is InvalidMembers</para>
        /// </summary>
        public bool IsInvalidMembers
        {
            get
            {
                return this is InvalidMembers;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a InvalidMembers, or <c>null</c>.</para>
        /// </summary>
        public InvalidMembers AsInvalidMembers
        {
            get
            {
                return this as InvalidMembers;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is
        /// NumberOfUsersOnHoldIsGreaterThanHoldLimitation</para>
        /// </summary>
        public bool IsNumberOfUsersOnHoldIsGreaterThanHoldLimitation
        {
            get
            {
                return this is NumberOfUsersOnHoldIsGreaterThanHoldLimitation;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a NumberOfUsersOnHoldIsGreaterThanHoldLimitation, or
        /// <c>null</c>.</para>
        /// </summary>
        public NumberOfUsersOnHoldIsGreaterThanHoldLimitation AsNumberOfUsersOnHoldIsGreaterThanHoldLimitation
        {
            get
            {
                return this as NumberOfUsersOnHoldIsGreaterThanHoldLimitation;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is EmptyMembersList</para>
        /// </summary>
        public bool IsEmptyMembersList
        {
            get
            {
                return this is EmptyMembersList;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a EmptyMembersList, or <c>null</c>.</para>
        /// </summary>
        public EmptyMembersList AsEmptyMembersList
        {
            get
            {
                return this as EmptyMembersList;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is NameMustBeUnique</para>
        /// </summary>
        public bool IsNameMustBeUnique
        {
            get
            {
                return this is NameMustBeUnique;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a NameMustBeUnique, or <c>null</c>.</para>
        /// </summary>
        public NameMustBeUnique AsNameMustBeUnique
        {
            get
            {
                return this as NameMustBeUnique;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is
        /// LegalHoldPolicyNotFound</para>
        /// </summary>
        public bool IsLegalHoldPolicyNotFound
        {
            get
            {
                return this is LegalHoldPolicyNotFound;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a LegalHoldPolicyNotFound, or <c>null</c>.</para>
        /// </summary>
        public LegalHoldPolicyNotFound AsLegalHoldPolicyNotFound
        {
            get
            {
                return this as LegalHoldPolicyNotFound;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is UnknownLegalHoldError</para>
        /// </summary>
        public bool IsUnknownLegalHoldError
        {
            get
            {
                return this is UnknownLegalHoldError;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a UnknownLegalHoldError, or <c>null</c>.</para>
        /// </summary>
        public UnknownLegalHoldError AsUnknownLegalHoldError
        {
            get
            {
                return this as UnknownLegalHoldError;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is
        /// InsufficientPermissions</para>
        /// </summary>
        public bool IsInsufficientPermissions
        {
            get
            {
                return this is InsufficientPermissions;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a InsufficientPermissions, or <c>null</c>.</para>
        /// </summary>
        public InsufficientPermissions AsInsufficientPermissions
        {
            get
            {
                return this as InsufficientPermissions;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="LegalHoldsPolicyUpdateError" />.</para>
        /// </summary>
        private class LegalHoldsPolicyUpdateErrorEncoder : enc.StructEncoder<LegalHoldsPolicyUpdateError>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(LegalHoldsPolicyUpdateError value, enc.IJsonWriter writer)
            {
                if (value is TransientError)
                {
                    WriteProperty(".tag", "transient_error", writer, enc.StringEncoder.Instance);
                    TransientError.Encoder.EncodeFields((TransientError)value, writer);
                    return;
                }
                if (value is InactiveLegalHold)
                {
                    WriteProperty(".tag", "inactive_legal_hold", writer, enc.StringEncoder.Instance);
                    InactiveLegalHold.Encoder.EncodeFields((InactiveLegalHold)value, writer);
                    return;
                }
                if (value is LegalHoldPerformingAnotherOperation)
                {
                    WriteProperty(".tag", "legal_hold_performing_another_operation", writer, enc.StringEncoder.Instance);
                    LegalHoldPerformingAnotherOperation.Encoder.EncodeFields((LegalHoldPerformingAnotherOperation)value, writer);
                    return;
                }
                if (value is InvalidMembers)
                {
                    WriteProperty(".tag", "invalid_members", writer, enc.StringEncoder.Instance);
                    InvalidMembers.Encoder.EncodeFields((InvalidMembers)value, writer);
                    return;
                }
                if (value is NumberOfUsersOnHoldIsGreaterThanHoldLimitation)
                {
                    WriteProperty(".tag", "number_of_users_on_hold_is_greater_than_hold_limitation", writer, enc.StringEncoder.Instance);
                    NumberOfUsersOnHoldIsGreaterThanHoldLimitation.Encoder.EncodeFields((NumberOfUsersOnHoldIsGreaterThanHoldLimitation)value, writer);
                    return;
                }
                if (value is EmptyMembersList)
                {
                    WriteProperty(".tag", "empty_members_list", writer, enc.StringEncoder.Instance);
                    EmptyMembersList.Encoder.EncodeFields((EmptyMembersList)value, writer);
                    return;
                }
                if (value is NameMustBeUnique)
                {
                    WriteProperty(".tag", "name_must_be_unique", writer, enc.StringEncoder.Instance);
                    NameMustBeUnique.Encoder.EncodeFields((NameMustBeUnique)value, writer);
                    return;
                }
                if (value is LegalHoldPolicyNotFound)
                {
                    WriteProperty(".tag", "legal_hold_policy_not_found", writer, enc.StringEncoder.Instance);
                    LegalHoldPolicyNotFound.Encoder.EncodeFields((LegalHoldPolicyNotFound)value, writer);
                    return;
                }
                if (value is UnknownLegalHoldError)
                {
                    WriteProperty(".tag", "unknown_legal_hold_error", writer, enc.StringEncoder.Instance);
                    UnknownLegalHoldError.Encoder.EncodeFields((UnknownLegalHoldError)value, writer);
                    return;
                }
                if (value is InsufficientPermissions)
                {
                    WriteProperty(".tag", "insufficient_permissions", writer, enc.StringEncoder.Instance);
                    InsufficientPermissions.Encoder.EncodeFields((InsufficientPermissions)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="LegalHoldsPolicyUpdateError" />.</para>
        /// </summary>
        private class LegalHoldsPolicyUpdateErrorDecoder : enc.UnionDecoder<LegalHoldsPolicyUpdateError>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="LegalHoldsPolicyUpdateError"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override LegalHoldsPolicyUpdateError Create()
            {
                return new LegalHoldsPolicyUpdateError();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override LegalHoldsPolicyUpdateError Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "transient_error":
                        return TransientError.Decoder.DecodeFields(reader);
                    case "inactive_legal_hold":
                        return InactiveLegalHold.Decoder.DecodeFields(reader);
                    case "legal_hold_performing_another_operation":
                        return LegalHoldPerformingAnotherOperation.Decoder.DecodeFields(reader);
                    case "invalid_members":
                        return InvalidMembers.Decoder.DecodeFields(reader);
                    case "number_of_users_on_hold_is_greater_than_hold_limitation":
                        return NumberOfUsersOnHoldIsGreaterThanHoldLimitation.Decoder.DecodeFields(reader);
                    case "empty_members_list":
                        return EmptyMembersList.Decoder.DecodeFields(reader);
                    case "name_must_be_unique":
                        return NameMustBeUnique.Decoder.DecodeFields(reader);
                    case "legal_hold_policy_not_found":
                        return LegalHoldPolicyNotFound.Decoder.DecodeFields(reader);
                    case "unknown_legal_hold_error":
                        return UnknownLegalHoldError.Decoder.DecodeFields(reader);
                    case "insufficient_permissions":
                        return InsufficientPermissions.Decoder.DecodeFields(reader);
                    case "other":
                        return Other.Decoder.DecodeFields(reader);
                    default:
                        throw new sys.InvalidOperationException();
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>Temporary infrastructure failure, please retry.</para>
        /// </summary>
        public sealed class TransientError : LegalHoldsPolicyUpdateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<TransientError> Encoder = new TransientErrorEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<TransientError> Decoder = new TransientErrorDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TransientError" />
            /// class.</para>
            /// </summary>
            private TransientError()
            {
            }

            /// <summary>
            /// <para>A singleton instance of TransientError</para>
            /// </summary>
            public static readonly TransientError Instance = new TransientError();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="TransientError" />.</para>
            /// </summary>
            private class TransientErrorEncoder : enc.StructEncoder<TransientError>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(TransientError value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="TransientError" />.</para>
            /// </summary>
            private class TransientErrorDecoder : enc.StructDecoder<TransientError>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="TransientError" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override TransientError Create()
                {
                    return TransientError.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Trying to release an inactive legal hold.</para>
        /// </summary>
        public sealed class InactiveLegalHold : LegalHoldsPolicyUpdateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<InactiveLegalHold> Encoder = new InactiveLegalHoldEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<InactiveLegalHold> Decoder = new InactiveLegalHoldDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="InactiveLegalHold" />
            /// class.</para>
            /// </summary>
            private InactiveLegalHold()
            {
            }

            /// <summary>
            /// <para>A singleton instance of InactiveLegalHold</para>
            /// </summary>
            public static readonly InactiveLegalHold Instance = new InactiveLegalHold();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="InactiveLegalHold" />.</para>
            /// </summary>
            private class InactiveLegalHoldEncoder : enc.StructEncoder<InactiveLegalHold>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(InactiveLegalHold value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="InactiveLegalHold" />.</para>
            /// </summary>
            private class InactiveLegalHoldDecoder : enc.StructDecoder<InactiveLegalHold>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="InactiveLegalHold"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override InactiveLegalHold Create()
                {
                    return InactiveLegalHold.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Legal hold is currently performing another operation.</para>
        /// </summary>
        public sealed class LegalHoldPerformingAnotherOperation : LegalHoldsPolicyUpdateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<LegalHoldPerformingAnotherOperation> Encoder = new LegalHoldPerformingAnotherOperationEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<LegalHoldPerformingAnotherOperation> Decoder = new LegalHoldPerformingAnotherOperationDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see
            /// cref="LegalHoldPerformingAnotherOperation" /> class.</para>
            /// </summary>
            private LegalHoldPerformingAnotherOperation()
            {
            }

            /// <summary>
            /// <para>A singleton instance of LegalHoldPerformingAnotherOperation</para>
            /// </summary>
            public static readonly LegalHoldPerformingAnotherOperation Instance = new LegalHoldPerformingAnotherOperation();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="LegalHoldPerformingAnotherOperation" />.</para>
            /// </summary>
            private class LegalHoldPerformingAnotherOperationEncoder : enc.StructEncoder<LegalHoldPerformingAnotherOperation>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(LegalHoldPerformingAnotherOperation value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="LegalHoldPerformingAnotherOperation" />.</para>
            /// </summary>
            private class LegalHoldPerformingAnotherOperationDecoder : enc.StructDecoder<LegalHoldPerformingAnotherOperation>
            {
                /// <summary>
                /// <para>Create a new instance of type <see
                /// cref="LegalHoldPerformingAnotherOperation" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override LegalHoldPerformingAnotherOperation Create()
                {
                    return LegalHoldPerformingAnotherOperation.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Some members in the members list are not valid to be placed under legal
        /// hold.</para>
        /// </summary>
        public sealed class InvalidMembers : LegalHoldsPolicyUpdateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<InvalidMembers> Encoder = new InvalidMembersEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<InvalidMembers> Decoder = new InvalidMembersDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="InvalidMembers" />
            /// class.</para>
            /// </summary>
            private InvalidMembers()
            {
            }

            /// <summary>
            /// <para>A singleton instance of InvalidMembers</para>
            /// </summary>
            public static readonly InvalidMembers Instance = new InvalidMembers();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="InvalidMembers" />.</para>
            /// </summary>
            private class InvalidMembersEncoder : enc.StructEncoder<InvalidMembers>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(InvalidMembers value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="InvalidMembers" />.</para>
            /// </summary>
            private class InvalidMembersDecoder : enc.StructDecoder<InvalidMembers>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="InvalidMembers" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override InvalidMembers Create()
                {
                    return InvalidMembers.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>You cannot add more than 5 users in a legal hold.</para>
        /// </summary>
        public sealed class NumberOfUsersOnHoldIsGreaterThanHoldLimitation : LegalHoldsPolicyUpdateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<NumberOfUsersOnHoldIsGreaterThanHoldLimitation> Encoder = new NumberOfUsersOnHoldIsGreaterThanHoldLimitationEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<NumberOfUsersOnHoldIsGreaterThanHoldLimitation> Decoder = new NumberOfUsersOnHoldIsGreaterThanHoldLimitationDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see
            /// cref="NumberOfUsersOnHoldIsGreaterThanHoldLimitation" /> class.</para>
            /// </summary>
            private NumberOfUsersOnHoldIsGreaterThanHoldLimitation()
            {
            }

            /// <summary>
            /// <para>A singleton instance of
            /// NumberOfUsersOnHoldIsGreaterThanHoldLimitation</para>
            /// </summary>
            public static readonly NumberOfUsersOnHoldIsGreaterThanHoldLimitation Instance = new NumberOfUsersOnHoldIsGreaterThanHoldLimitation();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="NumberOfUsersOnHoldIsGreaterThanHoldLimitation"
            /// />.</para>
            /// </summary>
            private class NumberOfUsersOnHoldIsGreaterThanHoldLimitationEncoder : enc.StructEncoder<NumberOfUsersOnHoldIsGreaterThanHoldLimitation>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(NumberOfUsersOnHoldIsGreaterThanHoldLimitation value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="NumberOfUsersOnHoldIsGreaterThanHoldLimitation"
            /// />.</para>
            /// </summary>
            private class NumberOfUsersOnHoldIsGreaterThanHoldLimitationDecoder : enc.StructDecoder<NumberOfUsersOnHoldIsGreaterThanHoldLimitation>
            {
                /// <summary>
                /// <para>Create a new instance of type <see
                /// cref="NumberOfUsersOnHoldIsGreaterThanHoldLimitation" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override NumberOfUsersOnHoldIsGreaterThanHoldLimitation Create()
                {
                    return NumberOfUsersOnHoldIsGreaterThanHoldLimitation.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The users list must have at least one user.</para>
        /// </summary>
        public sealed class EmptyMembersList : LegalHoldsPolicyUpdateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<EmptyMembersList> Encoder = new EmptyMembersListEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<EmptyMembersList> Decoder = new EmptyMembersListDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="EmptyMembersList" />
            /// class.</para>
            /// </summary>
            private EmptyMembersList()
            {
            }

            /// <summary>
            /// <para>A singleton instance of EmptyMembersList</para>
            /// </summary>
            public static readonly EmptyMembersList Instance = new EmptyMembersList();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="EmptyMembersList" />.</para>
            /// </summary>
            private class EmptyMembersListEncoder : enc.StructEncoder<EmptyMembersList>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(EmptyMembersList value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="EmptyMembersList" />.</para>
            /// </summary>
            private class EmptyMembersListDecoder : enc.StructDecoder<EmptyMembersList>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="EmptyMembersList" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override EmptyMembersList Create()
                {
                    return EmptyMembersList.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The name provided is already in use by another legal hold.</para>
        /// </summary>
        public sealed class NameMustBeUnique : LegalHoldsPolicyUpdateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<NameMustBeUnique> Encoder = new NameMustBeUniqueEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<NameMustBeUnique> Decoder = new NameMustBeUniqueDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="NameMustBeUnique" />
            /// class.</para>
            /// </summary>
            private NameMustBeUnique()
            {
            }

            /// <summary>
            /// <para>A singleton instance of NameMustBeUnique</para>
            /// </summary>
            public static readonly NameMustBeUnique Instance = new NameMustBeUnique();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="NameMustBeUnique" />.</para>
            /// </summary>
            private class NameMustBeUniqueEncoder : enc.StructEncoder<NameMustBeUnique>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(NameMustBeUnique value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="NameMustBeUnique" />.</para>
            /// </summary>
            private class NameMustBeUniqueDecoder : enc.StructDecoder<NameMustBeUnique>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="NameMustBeUnique" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override NameMustBeUnique Create()
                {
                    return NameMustBeUnique.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Legal hold policy does not exist for <see
        /// cref="Dropbox.Api.Team.LegalHoldsPolicyUpdateArg.Id" />.</para>
        /// </summary>
        public sealed class LegalHoldPolicyNotFound : LegalHoldsPolicyUpdateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<LegalHoldPolicyNotFound> Encoder = new LegalHoldPolicyNotFoundEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<LegalHoldPolicyNotFound> Decoder = new LegalHoldPolicyNotFoundDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="LegalHoldPolicyNotFound" />
            /// class.</para>
            /// </summary>
            private LegalHoldPolicyNotFound()
            {
            }

            /// <summary>
            /// <para>A singleton instance of LegalHoldPolicyNotFound</para>
            /// </summary>
            public static readonly LegalHoldPolicyNotFound Instance = new LegalHoldPolicyNotFound();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="LegalHoldPolicyNotFound" />.</para>
            /// </summary>
            private class LegalHoldPolicyNotFoundEncoder : enc.StructEncoder<LegalHoldPolicyNotFound>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(LegalHoldPolicyNotFound value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="LegalHoldPolicyNotFound" />.</para>
            /// </summary>
            private class LegalHoldPolicyNotFoundDecoder : enc.StructDecoder<LegalHoldPolicyNotFound>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="LegalHoldPolicyNotFound"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override LegalHoldPolicyNotFound Create()
                {
                    return LegalHoldPolicyNotFound.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>There has been an unknown legal hold error.</para>
        /// </summary>
        public sealed class UnknownLegalHoldError : LegalHoldsPolicyUpdateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<UnknownLegalHoldError> Encoder = new UnknownLegalHoldErrorEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<UnknownLegalHoldError> Decoder = new UnknownLegalHoldErrorDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="UnknownLegalHoldError" />
            /// class.</para>
            /// </summary>
            private UnknownLegalHoldError()
            {
            }

            /// <summary>
            /// <para>A singleton instance of UnknownLegalHoldError</para>
            /// </summary>
            public static readonly UnknownLegalHoldError Instance = new UnknownLegalHoldError();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="UnknownLegalHoldError" />.</para>
            /// </summary>
            private class UnknownLegalHoldErrorEncoder : enc.StructEncoder<UnknownLegalHoldError>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(UnknownLegalHoldError value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="UnknownLegalHoldError" />.</para>
            /// </summary>
            private class UnknownLegalHoldErrorDecoder : enc.StructDecoder<UnknownLegalHoldError>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="UnknownLegalHoldError"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override UnknownLegalHoldError Create()
                {
                    return UnknownLegalHoldError.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>You don't have permissions to perform this action.</para>
        /// </summary>
        public sealed class InsufficientPermissions : LegalHoldsPolicyUpdateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<InsufficientPermissions> Encoder = new InsufficientPermissionsEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<InsufficientPermissions> Decoder = new InsufficientPermissionsDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="InsufficientPermissions" />
            /// class.</para>
            /// </summary>
            private InsufficientPermissions()
            {
            }

            /// <summary>
            /// <para>A singleton instance of InsufficientPermissions</para>
            /// </summary>
            public static readonly InsufficientPermissions Instance = new InsufficientPermissions();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="InsufficientPermissions" />.</para>
            /// </summary>
            private class InsufficientPermissionsEncoder : enc.StructEncoder<InsufficientPermissions>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(InsufficientPermissions value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="InsufficientPermissions" />.</para>
            /// </summary>
            private class InsufficientPermissionsDecoder : enc.StructDecoder<InsufficientPermissions>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="InsufficientPermissions"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override InsufficientPermissions Create()
                {
                    return InsufficientPermissions.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : LegalHoldsPolicyUpdateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}
