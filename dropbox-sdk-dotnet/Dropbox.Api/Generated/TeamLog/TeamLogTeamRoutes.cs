// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamLog.Routes
{
    using sys = System;
    using io = System.IO;
    using col = System.Collections.Generic;
    using t = System.Threading.Tasks;
    using tr = System.Threading;
    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The routes for the <see cref="N:Dropbox.Api.TeamLog"/> namespace</para>
    /// </summary>
    public class TeamLogTeamRoutes
    {
        /// <summary>
        /// <para>Initializes a new instance of the <see cref="TeamLogTeamRoutes" />
        /// class.</para>
        /// </summary>
        /// <param name="transport">The transport to use</param>
        internal TeamLogTeamRoutes(enc.ITransport transport)
        {
            this.Transport = transport;
        }

        /// <summary>
        /// <para>Gets the transport used for these routes</para>
        /// </summary>
        internal enc.ITransport Transport { get; private set; }

        /// <summary>
        /// <para>Retrieves team events. If the result's <see
        /// cref="Dropbox.Api.TeamLog.GetTeamEventsResult.HasMore" /> field is <c>true</c>,
        /// call <see
        /// cref="Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsContinueAsync" /> with
        /// the returned cursor to retrieve more entries. If end_time is not specified in your
        /// request, you may use the returned cursor to poll <see
        /// cref="Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsContinueAsync" /> for
        /// new events.</para>
        /// <para>Many attributes note 'may be missing due to historical data gap'.</para>
        /// <para>Note that the file_operations category and & analogous paper events are not
        /// available on all Dropbox Business <a href="/business/plans-comparison">plans</a>.
        /// Use <a
        /// href="/developers/documentation/http/teams#team-features-get_values">features/get_values</a>
        /// to check for this feature.</para>
        /// <para>Permission : Team Auditing.</para>
        /// </summary>
        /// <param name="getTeamEventsArg">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GetTeamEventsError"/>.</exception>
        public t.Task<GetTeamEventsResult> GetEventsAsync(GetTeamEventsArg getTeamEventsArg, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<GetTeamEventsArg, GetTeamEventsResult, GetTeamEventsError>(getTeamEventsArg, "api", "/team_log/get_events", "team", global::Dropbox.Api.TeamLog.GetTeamEventsArg.Encoder, global::Dropbox.Api.TeamLog.GetTeamEventsResult.Decoder, global::Dropbox.Api.TeamLog.GetTeamEventsError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the get events route.</para>
        /// </summary>
        /// <param name="getTeamEventsArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGetEvents(GetTeamEventsArg getTeamEventsArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.GetEventsAsync(getTeamEventsArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Retrieves team events. If the result's <see
        /// cref="Dropbox.Api.TeamLog.GetTeamEventsResult.HasMore" /> field is <c>true</c>,
        /// call <see
        /// cref="Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsContinueAsync" /> with
        /// the returned cursor to retrieve more entries. If end_time is not specified in your
        /// request, you may use the returned cursor to poll <see
        /// cref="Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsContinueAsync" /> for
        /// new events.</para>
        /// <para>Many attributes note 'may be missing due to historical data gap'.</para>
        /// <para>Note that the file_operations category and & analogous paper events are not
        /// available on all Dropbox Business <a href="/business/plans-comparison">plans</a>.
        /// Use <a
        /// href="/developers/documentation/http/teams#team-features-get_values">features/get_values</a>
        /// to check for this feature.</para>
        /// <para>Permission : Team Auditing.</para>
        /// </summary>
        /// <param name="limit">The maximal number of results to return per call. Note that
        /// some calls may not return <paramref name="limit" /> number of events, and may even
        /// return no events, even with `has_more` set to true. In this case, callers should
        /// fetch again using <see
        /// cref="Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsContinueAsync"
        /// />.</param>
        /// <param name="accountId">Filter the events by account ID. Return only events with
        /// this account_id as either Actor, Context, or Participants.</param>
        /// <param name="time">Filter by time range.</param>
        /// <param name="category">Filter the returned events to a single category. Note that
        /// category shouldn't be provided together with event_type.</param>
        /// <param name="eventType">Filter the returned events to a single event type. Note
        /// that event_type shouldn't be provided together with category.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GetTeamEventsError"/>.</exception>
        public t.Task<GetTeamEventsResult> GetEventsAsync(uint limit = 1000,
                                                          string accountId = null,
                                                          global::Dropbox.Api.TeamCommon.TimeRange time = null,
                                                          EventCategory category = null,
                                                          EventTypeArg eventType = null,
                                                          tr.CancellationToken cancellationToken = default)
        {
            var getTeamEventsArg = new GetTeamEventsArg(limit,
                                                        accountId,
                                                        time,
                                                        category,
                                                        eventType);

            return this.GetEventsAsync(getTeamEventsArg, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the get events route.</para>
        /// </summary>
        /// <param name="limit">The maximal number of results to return per call. Note that
        /// some calls may not return <paramref name="limit" /> number of events, and may even
        /// return no events, even with `has_more` set to true. In this case, callers should
        /// fetch again using <see
        /// cref="Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsContinueAsync"
        /// />.</param>
        /// <param name="accountId">Filter the events by account ID. Return only events with
        /// this account_id as either Actor, Context, or Participants.</param>
        /// <param name="time">Filter by time range.</param>
        /// <param name="category">Filter the returned events to a single category. Note that
        /// category shouldn't be provided together with event_type.</param>
        /// <param name="eventType">Filter the returned events to a single event type. Note
        /// that event_type shouldn't be provided together with category.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGetEvents(uint limit = 1000,
                                               string accountId = null,
                                               global::Dropbox.Api.TeamCommon.TimeRange time = null,
                                               EventCategory category = null,
                                               EventTypeArg eventType = null,
                                               sys.AsyncCallback callback = null,
                                               object callbackState = null)
        {
            var getTeamEventsArg = new GetTeamEventsArg(limit,
                                                        accountId,
                                                        time,
                                                        category,
                                                        eventType);

            return this.BeginGetEvents(getTeamEventsArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the get events route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GetTeamEventsError"/>.</exception>
        public GetTeamEventsResult EndGetEvents(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<GetTeamEventsResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Once a cursor has been retrieved from <see
        /// cref="Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsAsync" />, use this to
        /// paginate through all events.</para>
        /// <para>Permission : Team Auditing.</para>
        /// </summary>
        /// <param name="getTeamEventsContinueArg">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GetTeamEventsContinueError"/>.</exception>
        public t.Task<GetTeamEventsResult> GetEventsContinueAsync(GetTeamEventsContinueArg getTeamEventsContinueArg, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<GetTeamEventsContinueArg, GetTeamEventsResult, GetTeamEventsContinueError>(getTeamEventsContinueArg, "api", "/team_log/get_events/continue", "team", global::Dropbox.Api.TeamLog.GetTeamEventsContinueArg.Encoder, global::Dropbox.Api.TeamLog.GetTeamEventsResult.Decoder, global::Dropbox.Api.TeamLog.GetTeamEventsContinueError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the get events continue route.</para>
        /// </summary>
        /// <param name="getTeamEventsContinueArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGetEventsContinue(GetTeamEventsContinueArg getTeamEventsContinueArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.GetEventsContinueAsync(getTeamEventsContinueArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Once a cursor has been retrieved from <see
        /// cref="Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsAsync" />, use this to
        /// paginate through all events.</para>
        /// <para>Permission : Team Auditing.</para>
        /// </summary>
        /// <param name="cursor">Indicates from what point to get the next set of
        /// events.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GetTeamEventsContinueError"/>.</exception>
        public t.Task<GetTeamEventsResult> GetEventsContinueAsync(string cursor,
                                                                  tr.CancellationToken cancellationToken = default)
        {
            var getTeamEventsContinueArg = new GetTeamEventsContinueArg(cursor);

            return this.GetEventsContinueAsync(getTeamEventsContinueArg, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the get events continue route.</para>
        /// </summary>
        /// <param name="cursor">Indicates from what point to get the next set of
        /// events.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGetEventsContinue(string cursor,
                                                       sys.AsyncCallback callback,
                                                       object callbackState = null)
        {
            var getTeamEventsContinueArg = new GetTeamEventsContinueArg(cursor);

            return this.BeginGetEventsContinue(getTeamEventsContinueArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the get events continue route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GetTeamEventsContinueError"/>.</exception>
        public GetTeamEventsResult EndGetEventsContinue(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<GetTeamEventsResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }
    }
}
