// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.FileProperties.Routes
{
    using sys = System;
    using io = System.IO;
    using col = System.Collections.Generic;
    using t = System.Threading.Tasks;
    using tr = System.Threading;
    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The routes for the <see cref="N:Dropbox.Api.FileProperties"/> namespace</para>
    /// </summary>
    public class FilePropertiesTeamRoutes
    {
        /// <summary>
        /// <para>Initializes a new instance of the <see cref="FilePropertiesTeamRoutes" />
        /// class.</para>
        /// </summary>
        /// <param name="transport">The transport to use</param>
        internal FilePropertiesTeamRoutes(enc.ITransport transport)
        {
            this.Transport = transport;
        }

        /// <summary>
        /// <para>Gets the transport used for these routes</para>
        /// </summary>
        internal enc.ITransport Transport { get; private set; }

        /// <summary>
        /// <para>Add a template associated with a team. See <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.PropertiesAddAsync"
        /// /> to add properties to a file or folder.</para>
        /// <para>Note: this endpoint will create team-owned templates.</para>
        /// </summary>
        /// <param name="addTemplateArg">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ModifyTemplateError"/>.</exception>
        public t.Task<AddTemplateResult> TemplatesAddForTeamAsync(AddTemplateArg addTemplateArg, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<AddTemplateArg, AddTemplateResult, ModifyTemplateError>(addTemplateArg, "api", "/file_properties/templates/add_for_team", "team", global::Dropbox.Api.FileProperties.AddTemplateArg.Encoder, global::Dropbox.Api.FileProperties.AddTemplateResult.Decoder, global::Dropbox.Api.FileProperties.ModifyTemplateError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the templates add for team route.</para>
        /// </summary>
        /// <param name="addTemplateArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginTemplatesAddForTeam(AddTemplateArg addTemplateArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.TemplatesAddForTeamAsync(addTemplateArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Add a template associated with a team. See <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.PropertiesAddAsync"
        /// /> to add properties to a file or folder.</para>
        /// <para>Note: this endpoint will create team-owned templates.</para>
        /// </summary>
        /// <param name="name">Display name for the template. Template names can be up to 256
        /// bytes.</param>
        /// <param name="description">Description for the template. Template descriptions can
        /// be up to 1024 bytes.</param>
        /// <param name="fields">Definitions of the property fields associated with this
        /// template. There can be up to 32 properties in a single template.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ModifyTemplateError"/>.</exception>
        public t.Task<AddTemplateResult> TemplatesAddForTeamAsync(string name,
                                                                  string description,
                                                                  col.IEnumerable<PropertyFieldTemplate> fields,
                                                                  tr.CancellationToken cancellationToken = default)
        {
            var addTemplateArg = new AddTemplateArg(name,
                                                    description,
                                                    fields);

            return this.TemplatesAddForTeamAsync(addTemplateArg, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the templates add for team route.</para>
        /// </summary>
        /// <param name="name">Display name for the template. Template names can be up to 256
        /// bytes.</param>
        /// <param name="description">Description for the template. Template descriptions can
        /// be up to 1024 bytes.</param>
        /// <param name="fields">Definitions of the property fields associated with this
        /// template. There can be up to 32 properties in a single template.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginTemplatesAddForTeam(string name,
                                                         string description,
                                                         col.IEnumerable<PropertyFieldTemplate> fields,
                                                         sys.AsyncCallback callback,
                                                         object callbackState = null)
        {
            var addTemplateArg = new AddTemplateArg(name,
                                                    description,
                                                    fields);

            return this.BeginTemplatesAddForTeam(addTemplateArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the templates add for team route
        /// to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ModifyTemplateError"/>.</exception>
        public AddTemplateResult EndTemplatesAddForTeam(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<AddTemplateResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Get the schema for a specified template.</para>
        /// </summary>
        /// <param name="getTemplateArg">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="TemplateError"/>.</exception>
        public t.Task<GetTemplateResult> TemplatesGetForTeamAsync(GetTemplateArg getTemplateArg, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<GetTemplateArg, GetTemplateResult, TemplateError>(getTemplateArg, "api", "/file_properties/templates/get_for_team", "team", global::Dropbox.Api.FileProperties.GetTemplateArg.Encoder, global::Dropbox.Api.FileProperties.GetTemplateResult.Decoder, global::Dropbox.Api.FileProperties.TemplateError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the templates get for team route.</para>
        /// </summary>
        /// <param name="getTemplateArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginTemplatesGetForTeam(GetTemplateArg getTemplateArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.TemplatesGetForTeamAsync(getTemplateArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Get the schema for a specified template.</para>
        /// </summary>
        /// <param name="templateId">An identifier for template added by route  See <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync"
        /// /> or <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesAddForTeamAsync"
        /// />.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="TemplateError"/>.</exception>
        public t.Task<GetTemplateResult> TemplatesGetForTeamAsync(string templateId,
                                                                  tr.CancellationToken cancellationToken = default)
        {
            var getTemplateArg = new GetTemplateArg(templateId);

            return this.TemplatesGetForTeamAsync(getTemplateArg, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the templates get for team route.</para>
        /// </summary>
        /// <param name="templateId">An identifier for template added by route  See <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync"
        /// /> or <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesAddForTeamAsync"
        /// />.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginTemplatesGetForTeam(string templateId,
                                                         sys.AsyncCallback callback,
                                                         object callbackState = null)
        {
            var getTemplateArg = new GetTemplateArg(templateId);

            return this.BeginTemplatesGetForTeam(getTemplateArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the templates get for team route
        /// to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="TemplateError"/>.</exception>
        public GetTemplateResult EndTemplatesGetForTeam(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<GetTemplateResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Get the template identifiers for a team. To get the schema of each template
        /// use <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesGetForTeamAsync"
        /// />.</para>
        /// </summary>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="TemplateError"/>.</exception>
        public t.Task<ListTemplateResult> TemplatesListForTeamAsync(tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<enc.Empty, ListTemplateResult, TemplateError>(enc.Empty.Instance, "api", "/file_properties/templates/list_for_team", "team", enc.EmptyEncoder.Instance, global::Dropbox.Api.FileProperties.ListTemplateResult.Decoder, global::Dropbox.Api.FileProperties.TemplateError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the templates list for team route.</para>
        /// </summary>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginTemplatesListForTeam(sys.AsyncCallback callback, object state = null)
        {
            var task = this.TemplatesListForTeamAsync();

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the templates list for team route
        /// to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="TemplateError"/>.</exception>
        public ListTemplateResult EndTemplatesListForTeam(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<ListTemplateResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Permanently removes the specified template created from <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync"
        /// />. All properties associated with the template will also be removed. This action
        /// cannot be undone.</para>
        /// </summary>
        /// <param name="removeTemplateArg">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="TemplateError"/>.</exception>
        public t.Task TemplatesRemoveForTeamAsync(RemoveTemplateArg removeTemplateArg, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<RemoveTemplateArg, enc.Empty, TemplateError>(removeTemplateArg, "api", "/file_properties/templates/remove_for_team", "team", global::Dropbox.Api.FileProperties.RemoveTemplateArg.Encoder, enc.EmptyDecoder.Instance, global::Dropbox.Api.FileProperties.TemplateError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the templates remove for team route.</para>
        /// </summary>
        /// <param name="removeTemplateArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginTemplatesRemoveForTeam(RemoveTemplateArg removeTemplateArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.TemplatesRemoveForTeamAsync(removeTemplateArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Permanently removes the specified template created from <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync"
        /// />. All properties associated with the template will also be removed. This action
        /// cannot be undone.</para>
        /// </summary>
        /// <param name="templateId">An identifier for a template created by <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync"
        /// /> or <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesAddForTeamAsync"
        /// />.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="TemplateError"/>.</exception>
        public t.Task TemplatesRemoveForTeamAsync(string templateId,
                                                  tr.CancellationToken cancellationToken = default)
        {
            var removeTemplateArg = new RemoveTemplateArg(templateId);

            return this.TemplatesRemoveForTeamAsync(removeTemplateArg, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the templates remove for team route.</para>
        /// </summary>
        /// <param name="templateId">An identifier for a template created by <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync"
        /// /> or <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesAddForTeamAsync"
        /// />.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginTemplatesRemoveForTeam(string templateId,
                                                            sys.AsyncCallback callback,
                                                            object callbackState = null)
        {
            var removeTemplateArg = new RemoveTemplateArg(templateId);

            return this.BeginTemplatesRemoveForTeam(removeTemplateArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the templates remove for team
        /// route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="TemplateError"/>.</exception>
        public void EndTemplatesRemoveForTeam(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }
        }

        /// <summary>
        /// <para>Update a template associated with a team. This route can update the template
        /// name, the template description and add optional properties to templates.</para>
        /// </summary>
        /// <param name="updateTemplateArg">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ModifyTemplateError"/>.</exception>
        public t.Task<UpdateTemplateResult> TemplatesUpdateForTeamAsync(UpdateTemplateArg updateTemplateArg, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<UpdateTemplateArg, UpdateTemplateResult, ModifyTemplateError>(updateTemplateArg, "api", "/file_properties/templates/update_for_team", "team", global::Dropbox.Api.FileProperties.UpdateTemplateArg.Encoder, global::Dropbox.Api.FileProperties.UpdateTemplateResult.Decoder, global::Dropbox.Api.FileProperties.ModifyTemplateError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the templates update for team route.</para>
        /// </summary>
        /// <param name="updateTemplateArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginTemplatesUpdateForTeam(UpdateTemplateArg updateTemplateArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.TemplatesUpdateForTeamAsync(updateTemplateArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Update a template associated with a team. This route can update the template
        /// name, the template description and add optional properties to templates.</para>
        /// </summary>
        /// <param name="templateId">An identifier for template added by  See <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync"
        /// /> or <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesAddForTeamAsync"
        /// />.</param>
        /// <param name="name">A display name for the template. template names can be up to 256
        /// bytes.</param>
        /// <param name="description">Description for the new template. Template descriptions
        /// can be up to 1024 bytes.</param>
        /// <param name="addFields">Property field templates to be added to the group template.
        /// There can be up to 32 properties in a single template.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ModifyTemplateError"/>.</exception>
        public t.Task<UpdateTemplateResult> TemplatesUpdateForTeamAsync(string templateId,
                                                                        string name = null,
                                                                        string description = null,
                                                                        col.IEnumerable<PropertyFieldTemplate> addFields = null,
                                                                        tr.CancellationToken cancellationToken = default)
        {
            var updateTemplateArg = new UpdateTemplateArg(templateId,
                                                          name,
                                                          description,
                                                          addFields);

            return this.TemplatesUpdateForTeamAsync(updateTemplateArg, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the templates update for team route.</para>
        /// </summary>
        /// <param name="templateId">An identifier for template added by  See <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync"
        /// /> or <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesAddForTeamAsync"
        /// />.</param>
        /// <param name="name">A display name for the template. template names can be up to 256
        /// bytes.</param>
        /// <param name="description">Description for the new template. Template descriptions
        /// can be up to 1024 bytes.</param>
        /// <param name="addFields">Property field templates to be added to the group template.
        /// There can be up to 32 properties in a single template.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginTemplatesUpdateForTeam(string templateId,
                                                            string name = null,
                                                            string description = null,
                                                            col.IEnumerable<PropertyFieldTemplate> addFields = null,
                                                            sys.AsyncCallback callback = null,
                                                            object callbackState = null)
        {
            var updateTemplateArg = new UpdateTemplateArg(templateId,
                                                          name,
                                                          description,
                                                          addFields);

            return this.BeginTemplatesUpdateForTeam(updateTemplateArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the templates update for team
        /// route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ModifyTemplateError"/>.</exception>
        public UpdateTemplateResult EndTemplatesUpdateForTeam(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<UpdateTemplateResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }
    }
}
