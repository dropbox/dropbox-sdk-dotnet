// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.FileRequests
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Arguments for <see
    /// cref="Dropbox.Api.FileRequests.Routes.FileRequestsUserRoutes.CreateAsync" />.</para>
    /// </summary>
    public class CreateFileRequestArgs
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<CreateFileRequestArgs> Encoder = new CreateFileRequestArgsEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<CreateFileRequestArgs> Decoder = new CreateFileRequestArgsDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="CreateFileRequestArgs" />
        /// class.</para>
        /// </summary>
        /// <param name="title">The title of the file request. Must not be empty.</param>
        /// <param name="destination">The path of the folder in the Dropbox where uploaded
        /// files will be sent. For apps with the app folder permission, this will be relative
        /// to the app folder.</param>
        /// <param name="deadline">The deadline for the file request. Deadlines can only be set
        /// by Professional and Business accounts.</param>
        /// <param name="open">Whether or not the file request should be open. If the file
        /// request is closed, it will not accept any file submissions, but it can be opened
        /// later.</param>
        public CreateFileRequestArgs(string title,
                                     string destination,
                                     FileRequestDeadline deadline = null,
                                     bool open = true)
        {
            if (title == null)
            {
                throw new sys.ArgumentNullException("title");
            }
            if (title.Length < 1)
            {
                throw new sys.ArgumentOutOfRangeException("title", "Length should be at least 1");
            }

            if (destination == null)
            {
                throw new sys.ArgumentNullException("destination");
            }
            if (!re.Regex.IsMatch(destination, @"\A(?:/(.|[\r\n])*)\z"))
            {
                throw new sys.ArgumentOutOfRangeException("destination", @"Value should match pattern '\A(?:/(.|[\r\n])*)\z'");
            }

            this.Title = title;
            this.Destination = destination;
            this.Deadline = deadline;
            this.Open = open;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="CreateFileRequestArgs" />
        /// class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public CreateFileRequestArgs()
        {
            this.Open = true;
        }

        /// <summary>
        /// <para>The title of the file request. Must not be empty.</para>
        /// </summary>
        public string Title { get; protected set; }

        /// <summary>
        /// <para>The path of the folder in the Dropbox where uploaded files will be sent. For
        /// apps with the app folder permission, this will be relative to the app
        /// folder.</para>
        /// </summary>
        public string Destination { get; protected set; }

        /// <summary>
        /// <para>The deadline for the file request. Deadlines can only be set by Professional
        /// and Business accounts.</para>
        /// </summary>
        public FileRequestDeadline Deadline { get; protected set; }

        /// <summary>
        /// <para>Whether or not the file request should be open. If the file request is
        /// closed, it will not accept any file submissions, but it can be opened later.</para>
        /// </summary>
        public bool Open { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="CreateFileRequestArgs" />.</para>
        /// </summary>
        private class CreateFileRequestArgsEncoder : enc.StructEncoder<CreateFileRequestArgs>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(CreateFileRequestArgs value, enc.IJsonWriter writer)
            {
                WriteProperty("title", value.Title, writer, enc.StringEncoder.Instance);
                WriteProperty("destination", value.Destination, writer, enc.StringEncoder.Instance);
                if (value.Deadline != null)
                {
                    WriteProperty("deadline", value.Deadline, writer, global::Dropbox.Api.FileRequests.FileRequestDeadline.Encoder);
                }
                WriteProperty("open", value.Open, writer, enc.BooleanEncoder.Instance);
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="CreateFileRequestArgs" />.</para>
        /// </summary>
        private class CreateFileRequestArgsDecoder : enc.StructDecoder<CreateFileRequestArgs>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="CreateFileRequestArgs"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override CreateFileRequestArgs Create()
            {
                return new CreateFileRequestArgs();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(CreateFileRequestArgs value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "title":
                        value.Title = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "destination":
                        value.Destination = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "deadline":
                        value.Deadline = global::Dropbox.Api.FileRequests.FileRequestDeadline.Decoder.Decode(reader);
                        break;
                    case "open":
                        value.Open = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
