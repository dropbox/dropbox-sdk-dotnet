// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The paper doc update policy object</para>
    /// </summary>
    public class PaperDocUpdatePolicy
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<PaperDocUpdatePolicy> Encoder = new PaperDocUpdatePolicyEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<PaperDocUpdatePolicy> Decoder = new PaperDocUpdatePolicyDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="PaperDocUpdatePolicy" />
        /// class.</para>
        /// </summary>
        public PaperDocUpdatePolicy()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Update</para>
        /// </summary>
        public bool IsUpdate
        {
            get
            {
                return this is Update;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Update, or <c>null</c>.</para>
        /// </summary>
        public Update AsUpdate
        {
            get
            {
                return this as Update;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Overwrite</para>
        /// </summary>
        public bool IsOverwrite
        {
            get
            {
                return this is Overwrite;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Overwrite, or <c>null</c>.</para>
        /// </summary>
        public Overwrite AsOverwrite
        {
            get
            {
                return this as Overwrite;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Prepend</para>
        /// </summary>
        public bool IsPrepend
        {
            get
            {
                return this is Prepend;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Prepend, or <c>null</c>.</para>
        /// </summary>
        public Prepend AsPrepend
        {
            get
            {
                return this as Prepend;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Append</para>
        /// </summary>
        public bool IsAppend
        {
            get
            {
                return this is Append;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Append, or <c>null</c>.</para>
        /// </summary>
        public Append AsAppend
        {
            get
            {
                return this as Append;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="PaperDocUpdatePolicy" />.</para>
        /// </summary>
        private class PaperDocUpdatePolicyEncoder : enc.StructEncoder<PaperDocUpdatePolicy>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(PaperDocUpdatePolicy value, enc.IJsonWriter writer)
            {
                if (value is Update)
                {
                    WriteProperty(".tag", "update", writer, enc.StringEncoder.Instance);
                    Update.Encoder.EncodeFields((Update)value, writer);
                    return;
                }
                if (value is Overwrite)
                {
                    WriteProperty(".tag", "overwrite", writer, enc.StringEncoder.Instance);
                    Overwrite.Encoder.EncodeFields((Overwrite)value, writer);
                    return;
                }
                if (value is Prepend)
                {
                    WriteProperty(".tag", "prepend", writer, enc.StringEncoder.Instance);
                    Prepend.Encoder.EncodeFields((Prepend)value, writer);
                    return;
                }
                if (value is Append)
                {
                    WriteProperty(".tag", "append", writer, enc.StringEncoder.Instance);
                    Append.Encoder.EncodeFields((Append)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="PaperDocUpdatePolicy" />.</para>
        /// </summary>
        private class PaperDocUpdatePolicyDecoder : enc.UnionDecoder<PaperDocUpdatePolicy>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="PaperDocUpdatePolicy" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override PaperDocUpdatePolicy Create()
            {
                return new PaperDocUpdatePolicy();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override PaperDocUpdatePolicy Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "update":
                        return Update.Decoder.DecodeFields(reader);
                    case "overwrite":
                        return Overwrite.Decoder.DecodeFields(reader);
                    case "prepend":
                        return Prepend.Decoder.DecodeFields(reader);
                    case "append":
                        return Append.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>Sets the doc content to the provided content if the provided paper_revision
        /// matches the latest doc revision. Otherwise, returns an error.</para>
        /// </summary>
        public sealed class Update : PaperDocUpdatePolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Update> Encoder = new UpdateEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Update> Decoder = new UpdateDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Update" /> class.</para>
            /// </summary>
            private Update()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Update</para>
            /// </summary>
            public static readonly Update Instance = new Update();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Update" />.</para>
            /// </summary>
            private class UpdateEncoder : enc.StructEncoder<Update>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Update value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Update" />.</para>
            /// </summary>
            private class UpdateDecoder : enc.StructDecoder<Update>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Update" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Update Create()
                {
                    return Update.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Sets the doc content to the provided content without checking
        /// paper_revision.</para>
        /// </summary>
        public sealed class Overwrite : PaperDocUpdatePolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Overwrite> Encoder = new OverwriteEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Overwrite> Decoder = new OverwriteDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Overwrite" /> class.</para>
            /// </summary>
            private Overwrite()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Overwrite</para>
            /// </summary>
            public static readonly Overwrite Instance = new Overwrite();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Overwrite" />.</para>
            /// </summary>
            private class OverwriteEncoder : enc.StructEncoder<Overwrite>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Overwrite value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Overwrite" />.</para>
            /// </summary>
            private class OverwriteDecoder : enc.StructDecoder<Overwrite>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Overwrite" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Overwrite Create()
                {
                    return Overwrite.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Adds the provided content to the beginning of the doc without checking
        /// paper_revision.</para>
        /// </summary>
        public sealed class Prepend : PaperDocUpdatePolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Prepend> Encoder = new PrependEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Prepend> Decoder = new PrependDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Prepend" /> class.</para>
            /// </summary>
            private Prepend()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Prepend</para>
            /// </summary>
            public static readonly Prepend Instance = new Prepend();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Prepend" />.</para>
            /// </summary>
            private class PrependEncoder : enc.StructEncoder<Prepend>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Prepend value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Prepend" />.</para>
            /// </summary>
            private class PrependDecoder : enc.StructDecoder<Prepend>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Prepend" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Prepend Create()
                {
                    return Prepend.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Adds the provided content to the end of the doc without checking
        /// paper_revision.</para>
        /// </summary>
        public sealed class Append : PaperDocUpdatePolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Append> Encoder = new AppendEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Append> Decoder = new AppendDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Append" /> class.</para>
            /// </summary>
            private Append()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Append</para>
            /// </summary>
            public static readonly Append Instance = new Append();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Append" />.</para>
            /// </summary>
            private class AppendEncoder : enc.StructEncoder<Append>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Append value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Append" />.</para>
            /// </summary>
            private class AppendDecoder : enc.StructDecoder<Append>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Append" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Append Create()
                {
                    return Append.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : PaperDocUpdatePolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}
