// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamLog
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Provides details about a failure</para>
    /// </summary>
    /// <seealso cref="EmmErrorDetails" />
    /// <seealso cref="LoginFailDetails" />
    /// <seealso cref="SsoErrorDetails" />
    public class FailureDetailsLogInfo
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<FailureDetailsLogInfo> Encoder = new FailureDetailsLogInfoEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<FailureDetailsLogInfo> Decoder = new FailureDetailsLogInfoDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="FailureDetailsLogInfo" />
        /// class.</para>
        /// </summary>
        /// <param name="userFriendlyMessage">A user friendly explanation of the error.</param>
        /// <param name="technicalErrorMessage">A technical explanation of the error. This is
        /// relevant for some errors.</param>
        public FailureDetailsLogInfo(string userFriendlyMessage = null,
                                     string technicalErrorMessage = null)
        {
            this.UserFriendlyMessage = userFriendlyMessage;
            this.TechnicalErrorMessage = technicalErrorMessage;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="FailureDetailsLogInfo" />
        /// class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public FailureDetailsLogInfo()
        {
        }

        /// <summary>
        /// <para>A user friendly explanation of the error.</para>
        /// </summary>
        public string UserFriendlyMessage { get; protected set; }

        /// <summary>
        /// <para>A technical explanation of the error. This is relevant for some
        /// errors.</para>
        /// </summary>
        public string TechnicalErrorMessage { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="FailureDetailsLogInfo" />.</para>
        /// </summary>
        private class FailureDetailsLogInfoEncoder : enc.StructEncoder<FailureDetailsLogInfo>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(FailureDetailsLogInfo value, enc.IJsonWriter writer)
            {
                if (value.UserFriendlyMessage != null)
                {
                    WriteProperty("user_friendly_message", value.UserFriendlyMessage, writer, enc.StringEncoder.Instance);
                }
                if (value.TechnicalErrorMessage != null)
                {
                    WriteProperty("technical_error_message", value.TechnicalErrorMessage, writer, enc.StringEncoder.Instance);
                }
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="FailureDetailsLogInfo" />.</para>
        /// </summary>
        private class FailureDetailsLogInfoDecoder : enc.StructDecoder<FailureDetailsLogInfo>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="FailureDetailsLogInfo"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override FailureDetailsLogInfo Create()
            {
                return new FailureDetailsLogInfo();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(FailureDetailsLogInfo value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "user_friendly_message":
                        value.UserFriendlyMessage = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "technical_error_message":
                        value.TechnicalErrorMessage = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
