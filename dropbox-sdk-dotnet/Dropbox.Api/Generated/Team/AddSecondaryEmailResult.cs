// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Team
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Result of trying to add a secondary email to a user. 'success' is the only value
    /// indicating that a secondary email was successfully added to a user. The other values
    /// explain the type of error that occurred, and include the email for which the error
    /// occurred.</para>
    /// </summary>
    public class AddSecondaryEmailResult
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<AddSecondaryEmailResult> Encoder = new AddSecondaryEmailResultEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<AddSecondaryEmailResult> Decoder = new AddSecondaryEmailResultDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="AddSecondaryEmailResult" />
        /// class.</para>
        /// </summary>
        public AddSecondaryEmailResult()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Success</para>
        /// </summary>
        public bool IsSuccess
        {
            get
            {
                return this is Success;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Success, or <c>null</c>.</para>
        /// </summary>
        public Success AsSuccess
        {
            get
            {
                return this as Success;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Unavailable</para>
        /// </summary>
        public bool IsUnavailable
        {
            get
            {
                return this is Unavailable;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Unavailable, or <c>null</c>.</para>
        /// </summary>
        public Unavailable AsUnavailable
        {
            get
            {
                return this as Unavailable;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is AlreadyPending</para>
        /// </summary>
        public bool IsAlreadyPending
        {
            get
            {
                return this is AlreadyPending;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a AlreadyPending, or <c>null</c>.</para>
        /// </summary>
        public AlreadyPending AsAlreadyPending
        {
            get
            {
                return this as AlreadyPending;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is AlreadyOwnedByUser</para>
        /// </summary>
        public bool IsAlreadyOwnedByUser
        {
            get
            {
                return this is AlreadyOwnedByUser;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a AlreadyOwnedByUser, or <c>null</c>.</para>
        /// </summary>
        public AlreadyOwnedByUser AsAlreadyOwnedByUser
        {
            get
            {
                return this as AlreadyOwnedByUser;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is ReachedLimit</para>
        /// </summary>
        public bool IsReachedLimit
        {
            get
            {
                return this is ReachedLimit;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a ReachedLimit, or <c>null</c>.</para>
        /// </summary>
        public ReachedLimit AsReachedLimit
        {
            get
            {
                return this as ReachedLimit;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is TransientError</para>
        /// </summary>
        public bool IsTransientError
        {
            get
            {
                return this is TransientError;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TransientError, or <c>null</c>.</para>
        /// </summary>
        public TransientError AsTransientError
        {
            get
            {
                return this as TransientError;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is TooManyUpdates</para>
        /// </summary>
        public bool IsTooManyUpdates
        {
            get
            {
                return this is TooManyUpdates;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TooManyUpdates, or <c>null</c>.</para>
        /// </summary>
        public TooManyUpdates AsTooManyUpdates
        {
            get
            {
                return this as TooManyUpdates;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is UnknownError</para>
        /// </summary>
        public bool IsUnknownError
        {
            get
            {
                return this is UnknownError;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a UnknownError, or <c>null</c>.</para>
        /// </summary>
        public UnknownError AsUnknownError
        {
            get
            {
                return this as UnknownError;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is RateLimited</para>
        /// </summary>
        public bool IsRateLimited
        {
            get
            {
                return this is RateLimited;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a RateLimited, or <c>null</c>.</para>
        /// </summary>
        public RateLimited AsRateLimited
        {
            get
            {
                return this as RateLimited;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="AddSecondaryEmailResult" />.</para>
        /// </summary>
        private class AddSecondaryEmailResultEncoder : enc.StructEncoder<AddSecondaryEmailResult>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(AddSecondaryEmailResult value, enc.IJsonWriter writer)
            {
                if (value is Success)
                {
                    WriteProperty(".tag", "success", writer, enc.StringEncoder.Instance);
                    Success.Encoder.EncodeFields((Success)value, writer);
                    return;
                }
                if (value is Unavailable)
                {
                    WriteProperty(".tag", "unavailable", writer, enc.StringEncoder.Instance);
                    Unavailable.Encoder.EncodeFields((Unavailable)value, writer);
                    return;
                }
                if (value is AlreadyPending)
                {
                    WriteProperty(".tag", "already_pending", writer, enc.StringEncoder.Instance);
                    AlreadyPending.Encoder.EncodeFields((AlreadyPending)value, writer);
                    return;
                }
                if (value is AlreadyOwnedByUser)
                {
                    WriteProperty(".tag", "already_owned_by_user", writer, enc.StringEncoder.Instance);
                    AlreadyOwnedByUser.Encoder.EncodeFields((AlreadyOwnedByUser)value, writer);
                    return;
                }
                if (value is ReachedLimit)
                {
                    WriteProperty(".tag", "reached_limit", writer, enc.StringEncoder.Instance);
                    ReachedLimit.Encoder.EncodeFields((ReachedLimit)value, writer);
                    return;
                }
                if (value is TransientError)
                {
                    WriteProperty(".tag", "transient_error", writer, enc.StringEncoder.Instance);
                    TransientError.Encoder.EncodeFields((TransientError)value, writer);
                    return;
                }
                if (value is TooManyUpdates)
                {
                    WriteProperty(".tag", "too_many_updates", writer, enc.StringEncoder.Instance);
                    TooManyUpdates.Encoder.EncodeFields((TooManyUpdates)value, writer);
                    return;
                }
                if (value is UnknownError)
                {
                    WriteProperty(".tag", "unknown_error", writer, enc.StringEncoder.Instance);
                    UnknownError.Encoder.EncodeFields((UnknownError)value, writer);
                    return;
                }
                if (value is RateLimited)
                {
                    WriteProperty(".tag", "rate_limited", writer, enc.StringEncoder.Instance);
                    RateLimited.Encoder.EncodeFields((RateLimited)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="AddSecondaryEmailResult" />.</para>
        /// </summary>
        private class AddSecondaryEmailResultDecoder : enc.UnionDecoder<AddSecondaryEmailResult>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="AddSecondaryEmailResult"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override AddSecondaryEmailResult Create()
            {
                return new AddSecondaryEmailResult();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override AddSecondaryEmailResult Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "success":
                        return Success.Decoder.DecodeFields(reader);
                    case "unavailable":
                        return Unavailable.Decoder.DecodeFields(reader);
                    case "already_pending":
                        return AlreadyPending.Decoder.DecodeFields(reader);
                    case "already_owned_by_user":
                        return AlreadyOwnedByUser.Decoder.DecodeFields(reader);
                    case "reached_limit":
                        return ReachedLimit.Decoder.DecodeFields(reader);
                    case "transient_error":
                        return TransientError.Decoder.DecodeFields(reader);
                    case "too_many_updates":
                        return TooManyUpdates.Decoder.DecodeFields(reader);
                    case "unknown_error":
                        return UnknownError.Decoder.DecodeFields(reader);
                    case "rate_limited":
                        return RateLimited.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>Describes a secondary email that was successfully added to a user.</para>
        /// </summary>
        public sealed class Success : AddSecondaryEmailResult
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Success> Encoder = new SuccessEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Success> Decoder = new SuccessDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Success" /> class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public Success(global::Dropbox.Api.SecondaryEmails.SecondaryEmail value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Success" /> class.</para>
            /// </summary>
            private Success()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public global::Dropbox.Api.SecondaryEmails.SecondaryEmail Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Success" />.</para>
            /// </summary>
            private class SuccessEncoder : enc.StructEncoder<Success>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Success value, enc.IJsonWriter writer)
                {
                    WriteProperty("success", value.Value, writer, global::Dropbox.Api.SecondaryEmails.SecondaryEmail.Encoder);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Success" />.</para>
            /// </summary>
            private class SuccessDecoder : enc.StructDecoder<Success>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Success" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Success Create()
                {
                    return new Success();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override Success DecodeFields(enc.IJsonReader reader)
                {
                    return new Success(global::Dropbox.Api.SecondaryEmails.SecondaryEmail.Decoder.DecodeFields(reader));
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>Secondary email is not available to be claimed by the user.</para>
        /// </summary>
        public sealed class Unavailable : AddSecondaryEmailResult
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Unavailable> Encoder = new UnavailableEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Unavailable> Decoder = new UnavailableDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Unavailable" />
            /// class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public Unavailable(string value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Unavailable" />
            /// class.</para>
            /// </summary>
            private Unavailable()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public string Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Unavailable" />.</para>
            /// </summary>
            private class UnavailableEncoder : enc.StructEncoder<Unavailable>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Unavailable value, enc.IJsonWriter writer)
                {
                    WriteProperty("unavailable", value.Value, writer, enc.StringEncoder.Instance);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Unavailable" />.</para>
            /// </summary>
            private class UnavailableDecoder : enc.StructDecoder<Unavailable>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Unavailable" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Unavailable Create()
                {
                    return new Unavailable();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(Unavailable value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "unavailable":
                            value.Value = enc.StringDecoder.Instance.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>Secondary email is already a pending email for the user.</para>
        /// </summary>
        public sealed class AlreadyPending : AddSecondaryEmailResult
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<AlreadyPending> Encoder = new AlreadyPendingEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<AlreadyPending> Decoder = new AlreadyPendingDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="AlreadyPending" />
            /// class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public AlreadyPending(string value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="AlreadyPending" />
            /// class.</para>
            /// </summary>
            private AlreadyPending()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public string Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="AlreadyPending" />.</para>
            /// </summary>
            private class AlreadyPendingEncoder : enc.StructEncoder<AlreadyPending>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(AlreadyPending value, enc.IJsonWriter writer)
                {
                    WriteProperty("already_pending", value.Value, writer, enc.StringEncoder.Instance);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="AlreadyPending" />.</para>
            /// </summary>
            private class AlreadyPendingDecoder : enc.StructDecoder<AlreadyPending>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="AlreadyPending" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override AlreadyPending Create()
                {
                    return new AlreadyPending();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(AlreadyPending value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "already_pending":
                            value.Value = enc.StringDecoder.Instance.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>Secondary email is already a verified email for the user.</para>
        /// </summary>
        public sealed class AlreadyOwnedByUser : AddSecondaryEmailResult
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<AlreadyOwnedByUser> Encoder = new AlreadyOwnedByUserEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<AlreadyOwnedByUser> Decoder = new AlreadyOwnedByUserDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="AlreadyOwnedByUser" />
            /// class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public AlreadyOwnedByUser(string value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="AlreadyOwnedByUser" />
            /// class.</para>
            /// </summary>
            private AlreadyOwnedByUser()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public string Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="AlreadyOwnedByUser" />.</para>
            /// </summary>
            private class AlreadyOwnedByUserEncoder : enc.StructEncoder<AlreadyOwnedByUser>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(AlreadyOwnedByUser value, enc.IJsonWriter writer)
                {
                    WriteProperty("already_owned_by_user", value.Value, writer, enc.StringEncoder.Instance);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="AlreadyOwnedByUser" />.</para>
            /// </summary>
            private class AlreadyOwnedByUserDecoder : enc.StructDecoder<AlreadyOwnedByUser>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="AlreadyOwnedByUser"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override AlreadyOwnedByUser Create()
                {
                    return new AlreadyOwnedByUser();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(AlreadyOwnedByUser value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "already_owned_by_user":
                            value.Value = enc.StringDecoder.Instance.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>User already has the maximum number of secondary emails allowed.</para>
        /// </summary>
        public sealed class ReachedLimit : AddSecondaryEmailResult
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<ReachedLimit> Encoder = new ReachedLimitEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<ReachedLimit> Decoder = new ReachedLimitDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="ReachedLimit" />
            /// class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public ReachedLimit(string value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="ReachedLimit" />
            /// class.</para>
            /// </summary>
            private ReachedLimit()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public string Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="ReachedLimit" />.</para>
            /// </summary>
            private class ReachedLimitEncoder : enc.StructEncoder<ReachedLimit>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(ReachedLimit value, enc.IJsonWriter writer)
                {
                    WriteProperty("reached_limit", value.Value, writer, enc.StringEncoder.Instance);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="ReachedLimit" />.</para>
            /// </summary>
            private class ReachedLimitDecoder : enc.StructDecoder<ReachedLimit>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="ReachedLimit" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override ReachedLimit Create()
                {
                    return new ReachedLimit();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(ReachedLimit value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "reached_limit":
                            value.Value = enc.StringDecoder.Instance.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>A transient error occurred. Please try again later.</para>
        /// </summary>
        public sealed class TransientError : AddSecondaryEmailResult
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<TransientError> Encoder = new TransientErrorEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<TransientError> Decoder = new TransientErrorDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TransientError" />
            /// class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public TransientError(string value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TransientError" />
            /// class.</para>
            /// </summary>
            private TransientError()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public string Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="TransientError" />.</para>
            /// </summary>
            private class TransientErrorEncoder : enc.StructEncoder<TransientError>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(TransientError value, enc.IJsonWriter writer)
                {
                    WriteProperty("transient_error", value.Value, writer, enc.StringEncoder.Instance);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="TransientError" />.</para>
            /// </summary>
            private class TransientErrorDecoder : enc.StructDecoder<TransientError>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="TransientError" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override TransientError Create()
                {
                    return new TransientError();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(TransientError value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "transient_error":
                            value.Value = enc.StringDecoder.Instance.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>An error occurred due to conflicting updates. Please try again later.</para>
        /// </summary>
        public sealed class TooManyUpdates : AddSecondaryEmailResult
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<TooManyUpdates> Encoder = new TooManyUpdatesEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<TooManyUpdates> Decoder = new TooManyUpdatesDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TooManyUpdates" />
            /// class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public TooManyUpdates(string value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TooManyUpdates" />
            /// class.</para>
            /// </summary>
            private TooManyUpdates()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public string Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="TooManyUpdates" />.</para>
            /// </summary>
            private class TooManyUpdatesEncoder : enc.StructEncoder<TooManyUpdates>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(TooManyUpdates value, enc.IJsonWriter writer)
                {
                    WriteProperty("too_many_updates", value.Value, writer, enc.StringEncoder.Instance);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="TooManyUpdates" />.</para>
            /// </summary>
            private class TooManyUpdatesDecoder : enc.StructDecoder<TooManyUpdates>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="TooManyUpdates" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override TooManyUpdates Create()
                {
                    return new TooManyUpdates();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(TooManyUpdates value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "too_many_updates":
                            value.Value = enc.StringDecoder.Instance.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>An unknown error occurred.</para>
        /// </summary>
        public sealed class UnknownError : AddSecondaryEmailResult
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<UnknownError> Encoder = new UnknownErrorEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<UnknownError> Decoder = new UnknownErrorDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="UnknownError" />
            /// class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public UnknownError(string value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="UnknownError" />
            /// class.</para>
            /// </summary>
            private UnknownError()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public string Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="UnknownError" />.</para>
            /// </summary>
            private class UnknownErrorEncoder : enc.StructEncoder<UnknownError>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(UnknownError value, enc.IJsonWriter writer)
                {
                    WriteProperty("unknown_error", value.Value, writer, enc.StringEncoder.Instance);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="UnknownError" />.</para>
            /// </summary>
            private class UnknownErrorDecoder : enc.StructDecoder<UnknownError>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="UnknownError" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override UnknownError Create()
                {
                    return new UnknownError();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(UnknownError value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "unknown_error":
                            value.Value = enc.StringDecoder.Instance.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>Too many emails are being sent to this email address. Please try again
        /// later.</para>
        /// </summary>
        public sealed class RateLimited : AddSecondaryEmailResult
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<RateLimited> Encoder = new RateLimitedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<RateLimited> Decoder = new RateLimitedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="RateLimited" />
            /// class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public RateLimited(string value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="RateLimited" />
            /// class.</para>
            /// </summary>
            private RateLimited()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public string Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="RateLimited" />.</para>
            /// </summary>
            private class RateLimitedEncoder : enc.StructEncoder<RateLimited>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(RateLimited value, enc.IJsonWriter writer)
                {
                    WriteProperty("rate_limited", value.Value, writer, enc.StringEncoder.Instance);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="RateLimited" />.</para>
            /// </summary>
            private class RateLimitedDecoder : enc.StructDecoder<RateLimited>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="RateLimited" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override RateLimited Create()
                {
                    return new RateLimited();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(RateLimited value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "rate_limited":
                            value.Value = enc.StringDecoder.Instance.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : AddSecondaryEmailResult
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}
