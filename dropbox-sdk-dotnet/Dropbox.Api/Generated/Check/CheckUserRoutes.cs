// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Check.Routes
{
    using sys = System;
    using io = System.IO;
    using col = System.Collections.Generic;
    using t = System.Threading.Tasks;
    using tr = System.Threading;
    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The routes for the <see cref="N:Dropbox.Api.Check"/> namespace</para>
    /// </summary>
    public class CheckUserRoutes
    {
        /// <summary>
        /// <para>Initializes a new instance of the <see cref="CheckUserRoutes" />
        /// class.</para>
        /// </summary>
        /// <param name="transport">The transport to use</param>
        internal CheckUserRoutes(enc.ITransport transport)
        {
            this.Transport = transport;
        }

        /// <summary>
        /// <para>Gets the transport used for these routes</para>
        /// </summary>
        internal enc.ITransport Transport { get; private set; }

        /// <summary>
        /// <para>This endpoint performs User Authentication, validating the supplied access
        /// token, and returns the supplied string, to allow you to test your code and
        /// connection to the Dropbox API. It has no other effect. If you receive an HTTP 200
        /// response with the supplied query, it indicates at least part of the Dropbox API
        /// infrastructure is working and that the access token is valid.</para>
        /// </summary>
        /// <param name="echoArg">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        public t.Task<EchoResult> UserAsync(EchoArg echoArg, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<EchoArg, EchoResult, enc.Empty>(echoArg, "api", "/check/user", "user", global::Dropbox.Api.Check.EchoArg.Encoder, global::Dropbox.Api.Check.EchoResult.Decoder, enc.EmptyDecoder.Instance, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the user route.</para>
        /// </summary>
        /// <param name="echoArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginUser(EchoArg echoArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.UserAsync(echoArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>This endpoint performs User Authentication, validating the supplied access
        /// token, and returns the supplied string, to allow you to test your code and
        /// connection to the Dropbox API. It has no other effect. If you receive an HTTP 200
        /// response with the supplied query, it indicates at least part of the Dropbox API
        /// infrastructure is working and that the access token is valid.</para>
        /// </summary>
        /// <param name="query">The string that you'd like to be echoed back to you.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        public t.Task<EchoResult> UserAsync(string query = "",
                                            tr.CancellationToken cancellationToken = default)
        {
            var echoArg = new EchoArg(query);

            return this.UserAsync(echoArg, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the user route.</para>
        /// </summary>
        /// <param name="query">The string that you'd like to be echoed back to you.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginUser(string query = "",
                                          sys.AsyncCallback callback = null,
                                          object callbackState = null)
        {
            var echoArg = new EchoArg(query);

            return this.BeginUser(echoArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the user route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        public EchoResult EndUser(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<EchoResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }
    }
}
