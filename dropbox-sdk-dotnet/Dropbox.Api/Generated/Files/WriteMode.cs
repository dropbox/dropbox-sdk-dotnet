// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Your intent when writing a file to some path. This is used to determine what
    /// constitutes a conflict and what the autorename strategy is.</para>
    /// <para>In some situations, the conflict behavior is identical: (a) If the target path
    /// doesn't refer to anything, the file is always written; no conflict. (b) If the target
    /// path refers to a folder, it's always a conflict. (c) If the target path refers to a
    /// file with identical contents, nothing gets written; no conflict.</para>
    /// <para>The conflict checking differs in the case where there's a file at the target path
    /// with contents different from the contents you're trying to write.</para>
    /// </summary>
    public class WriteMode
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<WriteMode> Encoder = new WriteModeEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<WriteMode> Decoder = new WriteModeDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="WriteMode" /> class.</para>
        /// </summary>
        public WriteMode()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Add</para>
        /// </summary>
        public bool IsAdd
        {
            get
            {
                return this is Add;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Add, or <c>null</c>.</para>
        /// </summary>
        public Add AsAdd
        {
            get
            {
                return this as Add;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Overwrite</para>
        /// </summary>
        public bool IsOverwrite
        {
            get
            {
                return this is Overwrite;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Overwrite, or <c>null</c>.</para>
        /// </summary>
        public Overwrite AsOverwrite
        {
            get
            {
                return this as Overwrite;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Update</para>
        /// </summary>
        public bool IsUpdate
        {
            get
            {
                return this is Update;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Update, or <c>null</c>.</para>
        /// </summary>
        public Update AsUpdate
        {
            get
            {
                return this as Update;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="WriteMode" />.</para>
        /// </summary>
        private class WriteModeEncoder : enc.StructEncoder<WriteMode>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(WriteMode value, enc.IJsonWriter writer)
            {
                if (value is Add)
                {
                    WriteProperty(".tag", "add", writer, enc.StringEncoder.Instance);
                    Add.Encoder.EncodeFields((Add)value, writer);
                    return;
                }
                if (value is Overwrite)
                {
                    WriteProperty(".tag", "overwrite", writer, enc.StringEncoder.Instance);
                    Overwrite.Encoder.EncodeFields((Overwrite)value, writer);
                    return;
                }
                if (value is Update)
                {
                    WriteProperty(".tag", "update", writer, enc.StringEncoder.Instance);
                    Update.Encoder.EncodeFields((Update)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="WriteMode" />.</para>
        /// </summary>
        private class WriteModeDecoder : enc.UnionDecoder<WriteMode>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="WriteMode" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override WriteMode Create()
            {
                return new WriteMode();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override WriteMode Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "add":
                        return Add.Decoder.DecodeFields(reader);
                    case "overwrite":
                        return Overwrite.Decoder.DecodeFields(reader);
                    case "update":
                        return Update.Decoder.DecodeFields(reader);
                    default:
                        throw new sys.InvalidOperationException();
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>Do not overwrite an existing file if there is a conflict. The autorename
        /// strategy is to append a number to the file name. For example, "document.txt" might
        /// become "document (2).txt".</para>
        /// </summary>
        public sealed class Add : WriteMode
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Add> Encoder = new AddEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Add> Decoder = new AddDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Add" /> class.</para>
            /// </summary>
            private Add()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Add</para>
            /// </summary>
            public static readonly Add Instance = new Add();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Add" />.</para>
            /// </summary>
            private class AddEncoder : enc.StructEncoder<Add>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Add value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Add" />.</para>
            /// </summary>
            private class AddDecoder : enc.StructDecoder<Add>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Add" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Add Create()
                {
                    return Add.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Always overwrite the existing file. The autorename strategy is the same as it
        /// is for <see cref="Add" />.</para>
        /// </summary>
        public sealed class Overwrite : WriteMode
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Overwrite> Encoder = new OverwriteEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Overwrite> Decoder = new OverwriteDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Overwrite" /> class.</para>
            /// </summary>
            private Overwrite()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Overwrite</para>
            /// </summary>
            public static readonly Overwrite Instance = new Overwrite();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Overwrite" />.</para>
            /// </summary>
            private class OverwriteEncoder : enc.StructEncoder<Overwrite>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Overwrite value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Overwrite" />.</para>
            /// </summary>
            private class OverwriteDecoder : enc.StructDecoder<Overwrite>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Overwrite" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Overwrite Create()
                {
                    return Overwrite.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Overwrite if the given "rev" matches the existing file's "rev". The supplied
        /// value should be the latest known "rev" of the file, for example, from <see
        /// cref="FileMetadata" />, from when the file was last downloaded by the app. This
        /// will cause the file on the Dropbox servers to be overwritten if the given "rev"
        /// matches the existing file's current "rev" on the Dropbox servers. The autorename
        /// strategy is to append the string "conflicted copy" to the file name. For example,
        /// "document.txt" might become "document (conflicted copy).txt" or "document (Panda's
        /// conflicted copy).txt".</para>
        /// </summary>
        public sealed class Update : WriteMode
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Update> Encoder = new UpdateEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Update> Decoder = new UpdateDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Update" /> class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public Update(string value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Update" /> class.</para>
            /// </summary>
            private Update()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public string Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Update" />.</para>
            /// </summary>
            private class UpdateEncoder : enc.StructEncoder<Update>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Update value, enc.IJsonWriter writer)
                {
                    WriteProperty("update", value.Value, writer, enc.StringEncoder.Instance);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Update" />.</para>
            /// </summary>
            private class UpdateDecoder : enc.StructDecoder<Update>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Update" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Update Create()
                {
                    return new Update();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(Update value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "update":
                            value.Value = enc.StringDecoder.Instance.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }
    }
}
