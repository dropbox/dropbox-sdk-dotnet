// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The get temporary link error object</para>
    /// </summary>
    public class GetTemporaryLinkError
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<GetTemporaryLinkError> Encoder = new GetTemporaryLinkErrorEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<GetTemporaryLinkError> Decoder = new GetTemporaryLinkErrorDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="GetTemporaryLinkError" />
        /// class.</para>
        /// </summary>
        public GetTemporaryLinkError()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Path</para>
        /// </summary>
        public bool IsPath
        {
            get
            {
                return this is Path;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Path, or <c>null</c>.</para>
        /// </summary>
        public Path AsPath
        {
            get
            {
                return this as Path;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is EmailNotVerified</para>
        /// </summary>
        public bool IsEmailNotVerified
        {
            get
            {
                return this is EmailNotVerified;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a EmailNotVerified, or <c>null</c>.</para>
        /// </summary>
        public EmailNotVerified AsEmailNotVerified
        {
            get
            {
                return this as EmailNotVerified;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is UnsupportedFile</para>
        /// </summary>
        public bool IsUnsupportedFile
        {
            get
            {
                return this is UnsupportedFile;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a UnsupportedFile, or <c>null</c>.</para>
        /// </summary>
        public UnsupportedFile AsUnsupportedFile
        {
            get
            {
                return this as UnsupportedFile;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is NotAllowed</para>
        /// </summary>
        public bool IsNotAllowed
        {
            get
            {
                return this is NotAllowed;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a NotAllowed, or <c>null</c>.</para>
        /// </summary>
        public NotAllowed AsNotAllowed
        {
            get
            {
                return this as NotAllowed;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="GetTemporaryLinkError" />.</para>
        /// </summary>
        private class GetTemporaryLinkErrorEncoder : enc.StructEncoder<GetTemporaryLinkError>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(GetTemporaryLinkError value, enc.IJsonWriter writer)
            {
                if (value is Path)
                {
                    WriteProperty(".tag", "path", writer, enc.StringEncoder.Instance);
                    Path.Encoder.EncodeFields((Path)value, writer);
                    return;
                }
                if (value is EmailNotVerified)
                {
                    WriteProperty(".tag", "email_not_verified", writer, enc.StringEncoder.Instance);
                    EmailNotVerified.Encoder.EncodeFields((EmailNotVerified)value, writer);
                    return;
                }
                if (value is UnsupportedFile)
                {
                    WriteProperty(".tag", "unsupported_file", writer, enc.StringEncoder.Instance);
                    UnsupportedFile.Encoder.EncodeFields((UnsupportedFile)value, writer);
                    return;
                }
                if (value is NotAllowed)
                {
                    WriteProperty(".tag", "not_allowed", writer, enc.StringEncoder.Instance);
                    NotAllowed.Encoder.EncodeFields((NotAllowed)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="GetTemporaryLinkError" />.</para>
        /// </summary>
        private class GetTemporaryLinkErrorDecoder : enc.UnionDecoder<GetTemporaryLinkError>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="GetTemporaryLinkError"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override GetTemporaryLinkError Create()
            {
                return new GetTemporaryLinkError();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override GetTemporaryLinkError Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "path":
                        return Path.Decoder.DecodeFields(reader);
                    case "email_not_verified":
                        return EmailNotVerified.Decoder.DecodeFields(reader);
                    case "unsupported_file":
                        return UnsupportedFile.Decoder.DecodeFields(reader);
                    case "not_allowed":
                        return NotAllowed.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The path object</para>
        /// </summary>
        public sealed class Path : GetTemporaryLinkError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Path> Encoder = new PathEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Path> Decoder = new PathDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Path" /> class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public Path(LookupError value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Path" /> class.</para>
            /// </summary>
            private Path()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public LookupError Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Path" />.</para>
            /// </summary>
            private class PathEncoder : enc.StructEncoder<Path>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Path value, enc.IJsonWriter writer)
                {
                    WriteProperty("path", value.Value, writer, global::Dropbox.Api.Files.LookupError.Encoder);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Path" />.</para>
            /// </summary>
            private class PathDecoder : enc.StructDecoder<Path>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Path" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Path Create()
                {
                    return new Path();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(Path value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "path":
                            value.Value = global::Dropbox.Api.Files.LookupError.Decoder.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>This user's email address is not verified. This functionality is only
        /// available on accounts with a verified email address. Users can verify their email
        /// address <a href="https://www.dropbox.com/help/317">here</a>.</para>
        /// </summary>
        public sealed class EmailNotVerified : GetTemporaryLinkError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<EmailNotVerified> Encoder = new EmailNotVerifiedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<EmailNotVerified> Decoder = new EmailNotVerifiedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="EmailNotVerified" />
            /// class.</para>
            /// </summary>
            private EmailNotVerified()
            {
            }

            /// <summary>
            /// <para>A singleton instance of EmailNotVerified</para>
            /// </summary>
            public static readonly EmailNotVerified Instance = new EmailNotVerified();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="EmailNotVerified" />.</para>
            /// </summary>
            private class EmailNotVerifiedEncoder : enc.StructEncoder<EmailNotVerified>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(EmailNotVerified value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="EmailNotVerified" />.</para>
            /// </summary>
            private class EmailNotVerifiedDecoder : enc.StructDecoder<EmailNotVerified>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="EmailNotVerified" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override EmailNotVerified Create()
                {
                    return EmailNotVerified.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Cannot get temporary link to this file type; use <see
        /// cref="Dropbox.Api.Files.Routes.FilesUserRoutes.ExportAsync" /> instead.</para>
        /// </summary>
        public sealed class UnsupportedFile : GetTemporaryLinkError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<UnsupportedFile> Encoder = new UnsupportedFileEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<UnsupportedFile> Decoder = new UnsupportedFileDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="UnsupportedFile" />
            /// class.</para>
            /// </summary>
            private UnsupportedFile()
            {
            }

            /// <summary>
            /// <para>A singleton instance of UnsupportedFile</para>
            /// </summary>
            public static readonly UnsupportedFile Instance = new UnsupportedFile();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="UnsupportedFile" />.</para>
            /// </summary>
            private class UnsupportedFileEncoder : enc.StructEncoder<UnsupportedFile>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(UnsupportedFile value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="UnsupportedFile" />.</para>
            /// </summary>
            private class UnsupportedFileDecoder : enc.StructDecoder<UnsupportedFile>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="UnsupportedFile" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override UnsupportedFile Create()
                {
                    return UnsupportedFile.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The user is not allowed to request a temporary link to the specified file.
        /// For example, this can occur if the file is restricted or if the user's links are <a
        /// href="https://help.dropbox.com/files-folders/share/banned-links">banned</a>.</para>
        /// </summary>
        public sealed class NotAllowed : GetTemporaryLinkError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<NotAllowed> Encoder = new NotAllowedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<NotAllowed> Decoder = new NotAllowedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="NotAllowed" /> class.</para>
            /// </summary>
            private NotAllowed()
            {
            }

            /// <summary>
            /// <para>A singleton instance of NotAllowed</para>
            /// </summary>
            public static readonly NotAllowed Instance = new NotAllowed();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="NotAllowed" />.</para>
            /// </summary>
            private class NotAllowedEncoder : enc.StructEncoder<NotAllowed>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(NotAllowed value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="NotAllowed" />.</para>
            /// </summary>
            private class NotAllowedDecoder : enc.StructDecoder<NotAllowed>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="NotAllowed" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override NotAllowed Create()
                {
                    return NotAllowed.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : GetTemporaryLinkError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}
