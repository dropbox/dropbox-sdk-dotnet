// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Sharing.Routes
{
    using sys = System;
    using io = System.IO;
    using col = System.Collections.Generic;
    using t = System.Threading.Tasks;
    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The routes for the <see cref="N:Dropbox.Api.Sharing"/> namespace</para>
    /// </summary>
    public class SharingUserRoutes
    {
        /// <summary>
        /// <para>Initializes a new instance of the <see cref="SharingUserRoutes" />
        /// class.</para>
        /// </summary>
        /// <param name="transport">The transport to use</param>
        internal SharingUserRoutes(enc.ITransport transport)
        {
            this.Transport = transport;
        }

        /// <summary>
        /// <para>Gets the transport used for these routes</para>
        /// </summary>
        internal enc.ITransport Transport { get; private set; }

        /// <summary>
        /// <para>Adds specified members to a file.</para>
        /// </summary>
        /// <param name="addFileMemberArgs">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="AddFileMemberError"/>.</exception>
        public t.Task<col.List<FileMemberActionResult>> AddFileMemberAsync(AddFileMemberArgs addFileMemberArgs)
        {
            return this.Transport.SendRpcRequestAsync<AddFileMemberArgs, col.List<FileMemberActionResult>, AddFileMemberError>(addFileMemberArgs, "api", "/sharing/add_file_member", "user", global::Dropbox.Api.Sharing.AddFileMemberArgs.Encoder, enc.Decoder.CreateListDecoder(global::Dropbox.Api.Sharing.FileMemberActionResult.Decoder), global::Dropbox.Api.Sharing.AddFileMemberError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the add file member route.</para>
        /// </summary>
        /// <param name="addFileMemberArgs">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginAddFileMember(AddFileMemberArgs addFileMemberArgs, sys.AsyncCallback callback, object state = null)
        {
            var task = this.AddFileMemberAsync(addFileMemberArgs);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Adds specified members to a file.</para>
        /// </summary>
        /// <param name="file">File to which to add members.</param>
        /// <param name="members">Members to add. Note that even an email address is given,
        /// this may result in a user being directy added to the membership if that email is
        /// the user's main account email.</param>
        /// <param name="customMessage">Message to send to added members in their
        /// invitation.</param>
        /// <param name="quiet">Whether added members should be notified via device
        /// notifications of their invitation.</param>
        /// <param name="accessLevel">AccessLevel union object, describing what access level we
        /// want to give new members.</param>
        /// <param name="addMessageAsComment">If the custom message should be added as a
        /// comment on the file.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="AddFileMemberError"/>.</exception>
        public t.Task<col.List<FileMemberActionResult>> AddFileMemberAsync(string file,
                                                                           col.IEnumerable<MemberSelector> members,
                                                                           string customMessage = null,
                                                                           bool quiet = false,
                                                                           AccessLevel accessLevel = null,
                                                                           bool addMessageAsComment = false)
        {
            var addFileMemberArgs = new AddFileMemberArgs(file,
                                                          members,
                                                          customMessage,
                                                          quiet,
                                                          accessLevel,
                                                          addMessageAsComment);

            return this.AddFileMemberAsync(addFileMemberArgs);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the add file member route.</para>
        /// </summary>
        /// <param name="file">File to which to add members.</param>
        /// <param name="members">Members to add. Note that even an email address is given,
        /// this may result in a user being directy added to the membership if that email is
        /// the user's main account email.</param>
        /// <param name="customMessage">Message to send to added members in their
        /// invitation.</param>
        /// <param name="quiet">Whether added members should be notified via device
        /// notifications of their invitation.</param>
        /// <param name="accessLevel">AccessLevel union object, describing what access level we
        /// want to give new members.</param>
        /// <param name="addMessageAsComment">If the custom message should be added as a
        /// comment on the file.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginAddFileMember(string file,
                                                   col.IEnumerable<MemberSelector> members,
                                                   string customMessage = null,
                                                   bool quiet = false,
                                                   AccessLevel accessLevel = null,
                                                   bool addMessageAsComment = false,
                                                   sys.AsyncCallback callback = null,
                                                   object callbackState = null)
        {
            var addFileMemberArgs = new AddFileMemberArgs(file,
                                                          members,
                                                          customMessage,
                                                          quiet,
                                                          accessLevel,
                                                          addMessageAsComment);

            return this.BeginAddFileMember(addFileMemberArgs, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the add file member route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="AddFileMemberError"/>.</exception>
        public col.List<FileMemberActionResult> EndAddFileMember(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<col.List<FileMemberActionResult>>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Allows an owner or editor (if the ACL update policy allows) of a shared
        /// folder to add another member.</para>
        /// <para>For the new member to get access to all the functionality for this folder,
        /// you will need to call <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.MountFolderAsync" /> on their
        /// behalf.</para>
        /// </summary>
        /// <param name="addFolderMemberArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="AddFolderMemberError"/>.</exception>
        public t.Task AddFolderMemberAsync(AddFolderMemberArg addFolderMemberArg)
        {
            return this.Transport.SendRpcRequestAsync<AddFolderMemberArg, enc.Empty, AddFolderMemberError>(addFolderMemberArg, "api", "/sharing/add_folder_member", "user", global::Dropbox.Api.Sharing.AddFolderMemberArg.Encoder, enc.EmptyDecoder.Instance, global::Dropbox.Api.Sharing.AddFolderMemberError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the add folder member route.</para>
        /// </summary>
        /// <param name="addFolderMemberArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginAddFolderMember(AddFolderMemberArg addFolderMemberArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.AddFolderMemberAsync(addFolderMemberArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Allows an owner or editor (if the ACL update policy allows) of a shared
        /// folder to add another member.</para>
        /// <para>For the new member to get access to all the functionality for this folder,
        /// you will need to call <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.MountFolderAsync" /> on their
        /// behalf.</para>
        /// </summary>
        /// <param name="sharedFolderId">The ID for the shared folder.</param>
        /// <param name="members">The intended list of members to add.  Added members will
        /// receive invites to join the shared folder.</param>
        /// <param name="quiet">Whether added members should be notified via email and device
        /// notifications of their invite.</param>
        /// <param name="customMessage">Optional message to display to added members in their
        /// invitation.</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="AddFolderMemberError"/>.</exception>
        public t.Task AddFolderMemberAsync(string sharedFolderId,
                                           col.IEnumerable<AddMember> members,
                                           bool quiet = false,
                                           string customMessage = null)
        {
            var addFolderMemberArg = new AddFolderMemberArg(sharedFolderId,
                                                            members,
                                                            quiet,
                                                            customMessage);

            return this.AddFolderMemberAsync(addFolderMemberArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the add folder member route.</para>
        /// </summary>
        /// <param name="sharedFolderId">The ID for the shared folder.</param>
        /// <param name="members">The intended list of members to add.  Added members will
        /// receive invites to join the shared folder.</param>
        /// <param name="quiet">Whether added members should be notified via email and device
        /// notifications of their invite.</param>
        /// <param name="customMessage">Optional message to display to added members in their
        /// invitation.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginAddFolderMember(string sharedFolderId,
                                                     col.IEnumerable<AddMember> members,
                                                     bool quiet = false,
                                                     string customMessage = null,
                                                     sys.AsyncCallback callback = null,
                                                     object callbackState = null)
        {
            var addFolderMemberArg = new AddFolderMemberArg(sharedFolderId,
                                                            members,
                                                            quiet,
                                                            customMessage);

            return this.BeginAddFolderMember(addFolderMemberArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the add folder member route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="AddFolderMemberError"/>.</exception>
        public void EndAddFolderMember(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }
        }

        /// <summary>
        /// <para>Identical to update_file_member but with less information returned.</para>
        /// </summary>
        /// <param name="changeFileMemberAccessArgs">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="FileMemberActionError"/>.</exception>
        [sys.Obsolete("This function is deprecated, please use UpdateFileMemberAsync instead.")]
        public t.Task<FileMemberActionResult> ChangeFileMemberAccessAsync(ChangeFileMemberAccessArgs changeFileMemberAccessArgs)
        {
            return this.Transport.SendRpcRequestAsync<ChangeFileMemberAccessArgs, FileMemberActionResult, FileMemberActionError>(changeFileMemberAccessArgs, "api", "/sharing/change_file_member_access", "user", global::Dropbox.Api.Sharing.ChangeFileMemberAccessArgs.Encoder, global::Dropbox.Api.Sharing.FileMemberActionResult.Decoder, global::Dropbox.Api.Sharing.FileMemberActionError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the change file member access route.</para>
        /// </summary>
        /// <param name="changeFileMemberAccessArgs">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated, please use BeginUpdateFileMember instead.")]
        public sys.IAsyncResult BeginChangeFileMemberAccess(ChangeFileMemberAccessArgs changeFileMemberAccessArgs, sys.AsyncCallback callback, object state = null)
        {
            var task = this.ChangeFileMemberAccessAsync(changeFileMemberAccessArgs);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Identical to update_file_member but with less information returned.</para>
        /// </summary>
        /// <param name="file">File for which we are changing a member's access.</param>
        /// <param name="member">The member whose access we are changing.</param>
        /// <param name="accessLevel">The new access level for the member.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="FileMemberActionError"/>.</exception>
        [sys.Obsolete("This function is deprecated, please use UpdateFileMemberAsync instead.")]
        public t.Task<FileMemberActionResult> ChangeFileMemberAccessAsync(string file,
                                                                          MemberSelector member,
                                                                          AccessLevel accessLevel)
        {
            var changeFileMemberAccessArgs = new ChangeFileMemberAccessArgs(file,
                                                                            member,
                                                                            accessLevel);

            return this.ChangeFileMemberAccessAsync(changeFileMemberAccessArgs);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the change file member access route.</para>
        /// </summary>
        /// <param name="file">File for which we are changing a member's access.</param>
        /// <param name="member">The member whose access we are changing.</param>
        /// <param name="accessLevel">The new access level for the member.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated, please use BeginUpdateFileMember instead.")]
        public sys.IAsyncResult BeginChangeFileMemberAccess(string file,
                                                            MemberSelector member,
                                                            AccessLevel accessLevel,
                                                            sys.AsyncCallback callback,
                                                            object callbackState = null)
        {
            var changeFileMemberAccessArgs = new ChangeFileMemberAccessArgs(file,
                                                                            member,
                                                                            accessLevel);

            return this.BeginChangeFileMemberAccess(changeFileMemberAccessArgs, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the change file member access
        /// route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="FileMemberActionError"/>.</exception>
        [sys.Obsolete("This function is deprecated, please use EndUpdateFileMember instead.")]
        public FileMemberActionResult EndChangeFileMemberAccess(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<FileMemberActionResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Returns the status of an asynchronous job.</para>
        /// </summary>
        /// <param name="pollArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="global::Dropbox.Api.Async.PollError"/>.</exception>
        public t.Task<JobStatus> CheckJobStatusAsync(global::Dropbox.Api.Async.PollArg pollArg)
        {
            return this.Transport.SendRpcRequestAsync<global::Dropbox.Api.Async.PollArg, JobStatus, global::Dropbox.Api.Async.PollError>(pollArg, "api", "/sharing/check_job_status", "user", global::Dropbox.Api.Async.PollArg.Encoder, global::Dropbox.Api.Sharing.JobStatus.Decoder, global::Dropbox.Api.Async.PollError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the check job status route.</para>
        /// </summary>
        /// <param name="pollArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginCheckJobStatus(global::Dropbox.Api.Async.PollArg pollArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.CheckJobStatusAsync(pollArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Returns the status of an asynchronous job.</para>
        /// </summary>
        /// <param name="asyncJobId">Id of the asynchronous job. This is the value of a
        /// response returned from the method that launched the job.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="global::Dropbox.Api.Async.PollError"/>.</exception>
        public t.Task<JobStatus> CheckJobStatusAsync(string asyncJobId)
        {
            var pollArg = new global::Dropbox.Api.Async.PollArg(asyncJobId);

            return this.CheckJobStatusAsync(pollArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the check job status route.</para>
        /// </summary>
        /// <param name="asyncJobId">Id of the asynchronous job. This is the value of a
        /// response returned from the method that launched the job.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginCheckJobStatus(string asyncJobId,
                                                    sys.AsyncCallback callback,
                                                    object callbackState = null)
        {
            var pollArg = new global::Dropbox.Api.Async.PollArg(asyncJobId);

            return this.BeginCheckJobStatus(pollArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the check job status route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="global::Dropbox.Api.Async.PollError"/>.</exception>
        public JobStatus EndCheckJobStatus(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<JobStatus>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Returns the status of an asynchronous job for sharing a folder.</para>
        /// </summary>
        /// <param name="pollArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="global::Dropbox.Api.Async.PollError"/>.</exception>
        public t.Task<RemoveMemberJobStatus> CheckRemoveMemberJobStatusAsync(global::Dropbox.Api.Async.PollArg pollArg)
        {
            return this.Transport.SendRpcRequestAsync<global::Dropbox.Api.Async.PollArg, RemoveMemberJobStatus, global::Dropbox.Api.Async.PollError>(pollArg, "api", "/sharing/check_remove_member_job_status", "user", global::Dropbox.Api.Async.PollArg.Encoder, global::Dropbox.Api.Sharing.RemoveMemberJobStatus.Decoder, global::Dropbox.Api.Async.PollError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the check remove member job status
        /// route.</para>
        /// </summary>
        /// <param name="pollArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginCheckRemoveMemberJobStatus(global::Dropbox.Api.Async.PollArg pollArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.CheckRemoveMemberJobStatusAsync(pollArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Returns the status of an asynchronous job for sharing a folder.</para>
        /// </summary>
        /// <param name="asyncJobId">Id of the asynchronous job. This is the value of a
        /// response returned from the method that launched the job.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="global::Dropbox.Api.Async.PollError"/>.</exception>
        public t.Task<RemoveMemberJobStatus> CheckRemoveMemberJobStatusAsync(string asyncJobId)
        {
            var pollArg = new global::Dropbox.Api.Async.PollArg(asyncJobId);

            return this.CheckRemoveMemberJobStatusAsync(pollArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the check remove member job status
        /// route.</para>
        /// </summary>
        /// <param name="asyncJobId">Id of the asynchronous job. This is the value of a
        /// response returned from the method that launched the job.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginCheckRemoveMemberJobStatus(string asyncJobId,
                                                                sys.AsyncCallback callback,
                                                                object callbackState = null)
        {
            var pollArg = new global::Dropbox.Api.Async.PollArg(asyncJobId);

            return this.BeginCheckRemoveMemberJobStatus(pollArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the check remove member job status
        /// route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="global::Dropbox.Api.Async.PollError"/>.</exception>
        public RemoveMemberJobStatus EndCheckRemoveMemberJobStatus(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<RemoveMemberJobStatus>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Returns the status of an asynchronous job for sharing a folder.</para>
        /// </summary>
        /// <param name="pollArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="global::Dropbox.Api.Async.PollError"/>.</exception>
        public t.Task<ShareFolderJobStatus> CheckShareJobStatusAsync(global::Dropbox.Api.Async.PollArg pollArg)
        {
            return this.Transport.SendRpcRequestAsync<global::Dropbox.Api.Async.PollArg, ShareFolderJobStatus, global::Dropbox.Api.Async.PollError>(pollArg, "api", "/sharing/check_share_job_status", "user", global::Dropbox.Api.Async.PollArg.Encoder, global::Dropbox.Api.Sharing.ShareFolderJobStatus.Decoder, global::Dropbox.Api.Async.PollError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the check share job status route.</para>
        /// </summary>
        /// <param name="pollArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginCheckShareJobStatus(global::Dropbox.Api.Async.PollArg pollArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.CheckShareJobStatusAsync(pollArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Returns the status of an asynchronous job for sharing a folder.</para>
        /// </summary>
        /// <param name="asyncJobId">Id of the asynchronous job. This is the value of a
        /// response returned from the method that launched the job.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="global::Dropbox.Api.Async.PollError"/>.</exception>
        public t.Task<ShareFolderJobStatus> CheckShareJobStatusAsync(string asyncJobId)
        {
            var pollArg = new global::Dropbox.Api.Async.PollArg(asyncJobId);

            return this.CheckShareJobStatusAsync(pollArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the check share job status route.</para>
        /// </summary>
        /// <param name="asyncJobId">Id of the asynchronous job. This is the value of a
        /// response returned from the method that launched the job.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginCheckShareJobStatus(string asyncJobId,
                                                         sys.AsyncCallback callback,
                                                         object callbackState = null)
        {
            var pollArg = new global::Dropbox.Api.Async.PollArg(asyncJobId);

            return this.BeginCheckShareJobStatus(pollArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the check share job status route
        /// to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="global::Dropbox.Api.Async.PollError"/>.</exception>
        public ShareFolderJobStatus EndCheckShareJobStatus(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<ShareFolderJobStatus>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Create a shared link.</para>
        /// <para>If a shared link already exists for the given path, that link is
        /// returned.</para>
        /// <para>Note that in the returned <see cref="PathLinkMetadata" />, the <see
        /// cref="Dropbox.Api.Sharing.PathLinkMetadata.Url" /> field is the shortened URL if
        /// <see cref="Dropbox.Api.Sharing.CreateSharedLinkArg.ShortUrl" /> argument is set to
        /// <c>true</c>.</para>
        /// <para>Previously, it was technically possible to break a shared link by moving or
        /// renaming the corresponding file or folder. In the future, this will no longer be
        /// the case, so your app shouldn't rely on this behavior. Instead, if your app needs
        /// to revoke a shared link, use <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.RevokeSharedLinkAsync"
        /// />.</para>
        /// </summary>
        /// <param name="createSharedLinkArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="CreateSharedLinkError"/>.</exception>
        [sys.Obsolete("This function is deprecated, please use CreateSharedLinkWithSettingsAsync instead.")]
        public t.Task<PathLinkMetadata> CreateSharedLinkAsync(CreateSharedLinkArg createSharedLinkArg)
        {
            return this.Transport.SendRpcRequestAsync<CreateSharedLinkArg, PathLinkMetadata, CreateSharedLinkError>(createSharedLinkArg, "api", "/sharing/create_shared_link", "user", global::Dropbox.Api.Sharing.CreateSharedLinkArg.Encoder, global::Dropbox.Api.Sharing.PathLinkMetadata.Decoder, global::Dropbox.Api.Sharing.CreateSharedLinkError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the create shared link route.</para>
        /// </summary>
        /// <param name="createSharedLinkArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated, please use BeginCreateSharedLinkWithSettings instead.")]
        public sys.IAsyncResult BeginCreateSharedLink(CreateSharedLinkArg createSharedLinkArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.CreateSharedLinkAsync(createSharedLinkArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Create a shared link.</para>
        /// <para>If a shared link already exists for the given path, that link is
        /// returned.</para>
        /// <para>Note that in the returned <see cref="PathLinkMetadata" />, the <see
        /// cref="Dropbox.Api.Sharing.PathLinkMetadata.Url" /> field is the shortened URL if
        /// <see cref="Dropbox.Api.Sharing.CreateSharedLinkArg.ShortUrl" /> argument is set to
        /// <c>true</c>.</para>
        /// <para>Previously, it was technically possible to break a shared link by moving or
        /// renaming the corresponding file or folder. In the future, this will no longer be
        /// the case, so your app shouldn't rely on this behavior. Instead, if your app needs
        /// to revoke a shared link, use <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.RevokeSharedLinkAsync"
        /// />.</para>
        /// </summary>
        /// <param name="path">The path to share.</param>
        /// <param name="shortUrl">Whether to return a shortened URL.</param>
        /// <param name="pendingUpload">If it's okay to share a path that does not yet exist,
        /// set this to either <see cref="Dropbox.Api.Sharing.PendingUploadMode.File" /> or
        /// <see cref="Dropbox.Api.Sharing.PendingUploadMode.Folder" /> to indicate whether to
        /// assume it's a file or folder.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="CreateSharedLinkError"/>.</exception>
        [sys.Obsolete("This function is deprecated, please use CreateSharedLinkWithSettingsAsync instead.")]
        public t.Task<PathLinkMetadata> CreateSharedLinkAsync(string path,
                                                              bool shortUrl = false,
                                                              PendingUploadMode pendingUpload = null)
        {
            var createSharedLinkArg = new CreateSharedLinkArg(path,
                                                              shortUrl,
                                                              pendingUpload);

            return this.CreateSharedLinkAsync(createSharedLinkArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the create shared link route.</para>
        /// </summary>
        /// <param name="path">The path to share.</param>
        /// <param name="shortUrl">Whether to return a shortened URL.</param>
        /// <param name="pendingUpload">If it's okay to share a path that does not yet exist,
        /// set this to either <see cref="Dropbox.Api.Sharing.PendingUploadMode.File" /> or
        /// <see cref="Dropbox.Api.Sharing.PendingUploadMode.Folder" /> to indicate whether to
        /// assume it's a file or folder.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated, please use BeginCreateSharedLinkWithSettings instead.")]
        public sys.IAsyncResult BeginCreateSharedLink(string path,
                                                      bool shortUrl = false,
                                                      PendingUploadMode pendingUpload = null,
                                                      sys.AsyncCallback callback = null,
                                                      object callbackState = null)
        {
            var createSharedLinkArg = new CreateSharedLinkArg(path,
                                                              shortUrl,
                                                              pendingUpload);

            return this.BeginCreateSharedLink(createSharedLinkArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the create shared link route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="CreateSharedLinkError"/>.</exception>
        [sys.Obsolete("This function is deprecated, please use EndCreateSharedLinkWithSettings instead.")]
        public PathLinkMetadata EndCreateSharedLink(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<PathLinkMetadata>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Create a shared link with custom settings. If no settings are given then the
        /// default visibility is <see cref="Dropbox.Api.Sharing.RequestedVisibility.Public" />
        /// (The resolved visibility, though, may depend on other aspects such as team and
        /// shared folder settings).</para>
        /// </summary>
        /// <param name="createSharedLinkWithSettingsArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="CreateSharedLinkWithSettingsError"/>.</exception>
        public t.Task<SharedLinkMetadata> CreateSharedLinkWithSettingsAsync(CreateSharedLinkWithSettingsArg createSharedLinkWithSettingsArg)
        {
            return this.Transport.SendRpcRequestAsync<CreateSharedLinkWithSettingsArg, SharedLinkMetadata, CreateSharedLinkWithSettingsError>(createSharedLinkWithSettingsArg, "api", "/sharing/create_shared_link_with_settings", "user", global::Dropbox.Api.Sharing.CreateSharedLinkWithSettingsArg.Encoder, global::Dropbox.Api.Sharing.SharedLinkMetadata.Decoder, global::Dropbox.Api.Sharing.CreateSharedLinkWithSettingsError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the create shared link with settings
        /// route.</para>
        /// </summary>
        /// <param name="createSharedLinkWithSettingsArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginCreateSharedLinkWithSettings(CreateSharedLinkWithSettingsArg createSharedLinkWithSettingsArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.CreateSharedLinkWithSettingsAsync(createSharedLinkWithSettingsArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Create a shared link with custom settings. If no settings are given then the
        /// default visibility is <see cref="Dropbox.Api.Sharing.RequestedVisibility.Public" />
        /// (The resolved visibility, though, may depend on other aspects such as team and
        /// shared folder settings).</para>
        /// </summary>
        /// <param name="path">The path to be shared by the shared link.</param>
        /// <param name="settings">The requested settings for the newly created shared
        /// link.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="CreateSharedLinkWithSettingsError"/>.</exception>
        public t.Task<SharedLinkMetadata> CreateSharedLinkWithSettingsAsync(string path,
                                                                            SharedLinkSettings settings = null)
        {
            var createSharedLinkWithSettingsArg = new CreateSharedLinkWithSettingsArg(path,
                                                                                      settings);

            return this.CreateSharedLinkWithSettingsAsync(createSharedLinkWithSettingsArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the create shared link with settings
        /// route.</para>
        /// </summary>
        /// <param name="path">The path to be shared by the shared link.</param>
        /// <param name="settings">The requested settings for the newly created shared
        /// link.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginCreateSharedLinkWithSettings(string path,
                                                                  SharedLinkSettings settings = null,
                                                                  sys.AsyncCallback callback = null,
                                                                  object callbackState = null)
        {
            var createSharedLinkWithSettingsArg = new CreateSharedLinkWithSettingsArg(path,
                                                                                      settings);

            return this.BeginCreateSharedLinkWithSettings(createSharedLinkWithSettingsArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the create shared link with
        /// settings route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="CreateSharedLinkWithSettingsError"/>.</exception>
        public SharedLinkMetadata EndCreateSharedLinkWithSettings(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<SharedLinkMetadata>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Returns shared file metadata.</para>
        /// </summary>
        /// <param name="getFileMetadataArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GetFileMetadataError"/>.</exception>
        public t.Task<SharedFileMetadata> GetFileMetadataAsync(GetFileMetadataArg getFileMetadataArg)
        {
            return this.Transport.SendRpcRequestAsync<GetFileMetadataArg, SharedFileMetadata, GetFileMetadataError>(getFileMetadataArg, "api", "/sharing/get_file_metadata", "user", global::Dropbox.Api.Sharing.GetFileMetadataArg.Encoder, global::Dropbox.Api.Sharing.SharedFileMetadata.Decoder, global::Dropbox.Api.Sharing.GetFileMetadataError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the get file metadata route.</para>
        /// </summary>
        /// <param name="getFileMetadataArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGetFileMetadata(GetFileMetadataArg getFileMetadataArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.GetFileMetadataAsync(getFileMetadataArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Returns shared file metadata.</para>
        /// </summary>
        /// <param name="file">The file to query.</param>
        /// <param name="actions">A list of `FileAction`s corresponding to `FilePermission`s
        /// that should appear in the  response's <see
        /// cref="Dropbox.Api.Sharing.SharedFileMetadata.Permissions" /> field describing the
        /// actions the  authenticated user can perform on the file.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GetFileMetadataError"/>.</exception>
        public t.Task<SharedFileMetadata> GetFileMetadataAsync(string file,
                                                               col.IEnumerable<FileAction> actions = null)
        {
            var getFileMetadataArg = new GetFileMetadataArg(file,
                                                            actions);

            return this.GetFileMetadataAsync(getFileMetadataArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the get file metadata route.</para>
        /// </summary>
        /// <param name="file">The file to query.</param>
        /// <param name="actions">A list of `FileAction`s corresponding to `FilePermission`s
        /// that should appear in the  response's <see
        /// cref="Dropbox.Api.Sharing.SharedFileMetadata.Permissions" /> field describing the
        /// actions the  authenticated user can perform on the file.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGetFileMetadata(string file,
                                                     col.IEnumerable<FileAction> actions = null,
                                                     sys.AsyncCallback callback = null,
                                                     object callbackState = null)
        {
            var getFileMetadataArg = new GetFileMetadataArg(file,
                                                            actions);

            return this.BeginGetFileMetadata(getFileMetadataArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the get file metadata route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GetFileMetadataError"/>.</exception>
        public SharedFileMetadata EndGetFileMetadata(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<SharedFileMetadata>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Returns shared file metadata.</para>
        /// </summary>
        /// <param name="getFileMetadataBatchArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="SharingUserError"/>.</exception>
        public t.Task<col.List<GetFileMetadataBatchResult>> GetFileMetadataBatchAsync(GetFileMetadataBatchArg getFileMetadataBatchArg)
        {
            return this.Transport.SendRpcRequestAsync<GetFileMetadataBatchArg, col.List<GetFileMetadataBatchResult>, SharingUserError>(getFileMetadataBatchArg, "api", "/sharing/get_file_metadata/batch", "user", global::Dropbox.Api.Sharing.GetFileMetadataBatchArg.Encoder, enc.Decoder.CreateListDecoder(global::Dropbox.Api.Sharing.GetFileMetadataBatchResult.Decoder), global::Dropbox.Api.Sharing.SharingUserError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the get file metadata batch route.</para>
        /// </summary>
        /// <param name="getFileMetadataBatchArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGetFileMetadataBatch(GetFileMetadataBatchArg getFileMetadataBatchArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.GetFileMetadataBatchAsync(getFileMetadataBatchArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Returns shared file metadata.</para>
        /// </summary>
        /// <param name="files">The files to query.</param>
        /// <param name="actions">A list of `FileAction`s corresponding to `FilePermission`s
        /// that should appear in the  response's <see
        /// cref="Dropbox.Api.Sharing.SharedFileMetadata.Permissions" /> field describing the
        /// actions the  authenticated user can perform on the file.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="SharingUserError"/>.</exception>
        public t.Task<col.List<GetFileMetadataBatchResult>> GetFileMetadataBatchAsync(col.IEnumerable<string> files,
                                                                                      col.IEnumerable<FileAction> actions = null)
        {
            var getFileMetadataBatchArg = new GetFileMetadataBatchArg(files,
                                                                      actions);

            return this.GetFileMetadataBatchAsync(getFileMetadataBatchArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the get file metadata batch route.</para>
        /// </summary>
        /// <param name="files">The files to query.</param>
        /// <param name="actions">A list of `FileAction`s corresponding to `FilePermission`s
        /// that should appear in the  response's <see
        /// cref="Dropbox.Api.Sharing.SharedFileMetadata.Permissions" /> field describing the
        /// actions the  authenticated user can perform on the file.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGetFileMetadataBatch(col.IEnumerable<string> files,
                                                          col.IEnumerable<FileAction> actions = null,
                                                          sys.AsyncCallback callback = null,
                                                          object callbackState = null)
        {
            var getFileMetadataBatchArg = new GetFileMetadataBatchArg(files,
                                                                      actions);

            return this.BeginGetFileMetadataBatch(getFileMetadataBatchArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the get file metadata batch route
        /// to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="SharingUserError"/>.</exception>
        public col.List<GetFileMetadataBatchResult> EndGetFileMetadataBatch(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<col.List<GetFileMetadataBatchResult>>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Returns shared folder metadata by its folder ID.</para>
        /// </summary>
        /// <param name="getMetadataArgs">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="SharedFolderAccessError"/>.</exception>
        public t.Task<SharedFolderMetadata> GetFolderMetadataAsync(GetMetadataArgs getMetadataArgs)
        {
            return this.Transport.SendRpcRequestAsync<GetMetadataArgs, SharedFolderMetadata, SharedFolderAccessError>(getMetadataArgs, "api", "/sharing/get_folder_metadata", "user", global::Dropbox.Api.Sharing.GetMetadataArgs.Encoder, global::Dropbox.Api.Sharing.SharedFolderMetadata.Decoder, global::Dropbox.Api.Sharing.SharedFolderAccessError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the get folder metadata route.</para>
        /// </summary>
        /// <param name="getMetadataArgs">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGetFolderMetadata(GetMetadataArgs getMetadataArgs, sys.AsyncCallback callback, object state = null)
        {
            var task = this.GetFolderMetadataAsync(getMetadataArgs);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Returns shared folder metadata by its folder ID.</para>
        /// </summary>
        /// <param name="sharedFolderId">The ID for the shared folder.</param>
        /// <param name="actions">A list of `FolderAction`s corresponding to
        /// `FolderPermission`s that should appear in the  response's <see
        /// cref="Dropbox.Api.Sharing.SharedFolderMetadata.Permissions" /> field describing the
        /// actions the  authenticated user can perform on the folder.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="SharedFolderAccessError"/>.</exception>
        public t.Task<SharedFolderMetadata> GetFolderMetadataAsync(string sharedFolderId,
                                                                   col.IEnumerable<FolderAction> actions = null)
        {
            var getMetadataArgs = new GetMetadataArgs(sharedFolderId,
                                                      actions);

            return this.GetFolderMetadataAsync(getMetadataArgs);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the get folder metadata route.</para>
        /// </summary>
        /// <param name="sharedFolderId">The ID for the shared folder.</param>
        /// <param name="actions">A list of `FolderAction`s corresponding to
        /// `FolderPermission`s that should appear in the  response's <see
        /// cref="Dropbox.Api.Sharing.SharedFolderMetadata.Permissions" /> field describing the
        /// actions the  authenticated user can perform on the folder.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGetFolderMetadata(string sharedFolderId,
                                                       col.IEnumerable<FolderAction> actions = null,
                                                       sys.AsyncCallback callback = null,
                                                       object callbackState = null)
        {
            var getMetadataArgs = new GetMetadataArgs(sharedFolderId,
                                                      actions);

            return this.BeginGetFolderMetadata(getMetadataArgs, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the get folder metadata route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="SharedFolderAccessError"/>.</exception>
        public SharedFolderMetadata EndGetFolderMetadata(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<SharedFolderMetadata>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Download the shared link's file from a user's Dropbox.</para>
        /// </summary>
        /// <param name="getSharedLinkMetadataArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GetSharedLinkFileError"/>.</exception>
        public t.Task<enc.IDownloadResponse<SharedLinkMetadata>> GetSharedLinkFileAsync(GetSharedLinkMetadataArg getSharedLinkMetadataArg)
        {
            return this.Transport.SendDownloadRequestAsync<GetSharedLinkMetadataArg, SharedLinkMetadata, GetSharedLinkFileError>(getSharedLinkMetadataArg, "content", "/sharing/get_shared_link_file", "user", global::Dropbox.Api.Sharing.GetSharedLinkMetadataArg.Encoder, global::Dropbox.Api.Sharing.SharedLinkMetadata.Decoder, global::Dropbox.Api.Sharing.GetSharedLinkFileError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the get shared link file route.</para>
        /// </summary>
        /// <param name="getSharedLinkMetadataArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGetSharedLinkFile(GetSharedLinkMetadataArg getSharedLinkMetadataArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.GetSharedLinkFileAsync(getSharedLinkMetadataArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Download the shared link's file from a user's Dropbox.</para>
        /// </summary>
        /// <param name="url">URL of the shared link.</param>
        /// <param name="path">If the shared link is to a folder, this parameter can be used to
        /// retrieve the metadata for a specific file or sub-folder in this folder. A relative
        /// path should be used.</param>
        /// <param name="linkPassword">If the shared link has a password, this parameter can be
        /// used.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GetSharedLinkFileError"/>.</exception>
        public t.Task<enc.IDownloadResponse<SharedLinkMetadata>> GetSharedLinkFileAsync(string url,
                                                                                        string path = null,
                                                                                        string linkPassword = null)
        {
            var getSharedLinkMetadataArg = new GetSharedLinkMetadataArg(url,
                                                                        path,
                                                                        linkPassword);

            return this.GetSharedLinkFileAsync(getSharedLinkMetadataArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the get shared link file route.</para>
        /// </summary>
        /// <param name="url">URL of the shared link.</param>
        /// <param name="path">If the shared link is to a folder, this parameter can be used to
        /// retrieve the metadata for a specific file or sub-folder in this folder. A relative
        /// path should be used.</param>
        /// <param name="linkPassword">If the shared link has a password, this parameter can be
        /// used.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGetSharedLinkFile(string url,
                                                       string path = null,
                                                       string linkPassword = null,
                                                       sys.AsyncCallback callback = null,
                                                       object callbackState = null)
        {
            var getSharedLinkMetadataArg = new GetSharedLinkMetadataArg(url,
                                                                        path,
                                                                        linkPassword);

            return this.BeginGetSharedLinkFile(getSharedLinkMetadataArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the get shared link file route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GetSharedLinkFileError"/>.</exception>
        public enc.IDownloadResponse<SharedLinkMetadata> EndGetSharedLinkFile(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<enc.IDownloadResponse<SharedLinkMetadata>>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Get the shared link's metadata.</para>
        /// </summary>
        /// <param name="getSharedLinkMetadataArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="SharedLinkError"/>.</exception>
        public t.Task<SharedLinkMetadata> GetSharedLinkMetadataAsync(GetSharedLinkMetadataArg getSharedLinkMetadataArg)
        {
            return this.Transport.SendRpcRequestAsync<GetSharedLinkMetadataArg, SharedLinkMetadata, SharedLinkError>(getSharedLinkMetadataArg, "api", "/sharing/get_shared_link_metadata", "user", global::Dropbox.Api.Sharing.GetSharedLinkMetadataArg.Encoder, global::Dropbox.Api.Sharing.SharedLinkMetadata.Decoder, global::Dropbox.Api.Sharing.SharedLinkError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the get shared link metadata route.</para>
        /// </summary>
        /// <param name="getSharedLinkMetadataArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGetSharedLinkMetadata(GetSharedLinkMetadataArg getSharedLinkMetadataArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.GetSharedLinkMetadataAsync(getSharedLinkMetadataArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Get the shared link's metadata.</para>
        /// </summary>
        /// <param name="url">URL of the shared link.</param>
        /// <param name="path">If the shared link is to a folder, this parameter can be used to
        /// retrieve the metadata for a specific file or sub-folder in this folder. A relative
        /// path should be used.</param>
        /// <param name="linkPassword">If the shared link has a password, this parameter can be
        /// used.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="SharedLinkError"/>.</exception>
        public t.Task<SharedLinkMetadata> GetSharedLinkMetadataAsync(string url,
                                                                     string path = null,
                                                                     string linkPassword = null)
        {
            var getSharedLinkMetadataArg = new GetSharedLinkMetadataArg(url,
                                                                        path,
                                                                        linkPassword);

            return this.GetSharedLinkMetadataAsync(getSharedLinkMetadataArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the get shared link metadata route.</para>
        /// </summary>
        /// <param name="url">URL of the shared link.</param>
        /// <param name="path">If the shared link is to a folder, this parameter can be used to
        /// retrieve the metadata for a specific file or sub-folder in this folder. A relative
        /// path should be used.</param>
        /// <param name="linkPassword">If the shared link has a password, this parameter can be
        /// used.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGetSharedLinkMetadata(string url,
                                                           string path = null,
                                                           string linkPassword = null,
                                                           sys.AsyncCallback callback = null,
                                                           object callbackState = null)
        {
            var getSharedLinkMetadataArg = new GetSharedLinkMetadataArg(url,
                                                                        path,
                                                                        linkPassword);

            return this.BeginGetSharedLinkMetadata(getSharedLinkMetadataArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the get shared link metadata route
        /// to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="SharedLinkError"/>.</exception>
        public SharedLinkMetadata EndGetSharedLinkMetadata(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<SharedLinkMetadata>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Returns a list of <see cref="LinkMetadata" /> objects for this user,
        /// including collection links.</para>
        /// <para>If no path is given, returns a list of all shared links for the current user,
        /// including collection links, up to a maximum of 1000 links.</para>
        /// <para>If a non-empty path is given, returns a list of all shared links that allow
        /// access to the given path.  Collection links are never returned in this case.</para>
        /// <para>Note that the url field in the response is never the shortened URL.</para>
        /// </summary>
        /// <param name="getSharedLinksArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GetSharedLinksError"/>.</exception>
        [sys.Obsolete("This function is deprecated, please use ListSharedLinksAsync instead.")]
        public t.Task<GetSharedLinksResult> GetSharedLinksAsync(GetSharedLinksArg getSharedLinksArg)
        {
            return this.Transport.SendRpcRequestAsync<GetSharedLinksArg, GetSharedLinksResult, GetSharedLinksError>(getSharedLinksArg, "api", "/sharing/get_shared_links", "user", global::Dropbox.Api.Sharing.GetSharedLinksArg.Encoder, global::Dropbox.Api.Sharing.GetSharedLinksResult.Decoder, global::Dropbox.Api.Sharing.GetSharedLinksError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the get shared links route.</para>
        /// </summary>
        /// <param name="getSharedLinksArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated, please use BeginListSharedLinks instead.")]
        public sys.IAsyncResult BeginGetSharedLinks(GetSharedLinksArg getSharedLinksArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.GetSharedLinksAsync(getSharedLinksArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Returns a list of <see cref="LinkMetadata" /> objects for this user,
        /// including collection links.</para>
        /// <para>If no path is given, returns a list of all shared links for the current user,
        /// including collection links, up to a maximum of 1000 links.</para>
        /// <para>If a non-empty path is given, returns a list of all shared links that allow
        /// access to the given path.  Collection links are never returned in this case.</para>
        /// <para>Note that the url field in the response is never the shortened URL.</para>
        /// </summary>
        /// <param name="path">See <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.GetSharedLinksAsync" />
        /// description.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GetSharedLinksError"/>.</exception>
        [sys.Obsolete("This function is deprecated, please use ListSharedLinksAsync instead.")]
        public t.Task<GetSharedLinksResult> GetSharedLinksAsync(string path = null)
        {
            var getSharedLinksArg = new GetSharedLinksArg(path);

            return this.GetSharedLinksAsync(getSharedLinksArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the get shared links route.</para>
        /// </summary>
        /// <param name="path">See <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.GetSharedLinksAsync" />
        /// description.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated, please use BeginListSharedLinks instead.")]
        public sys.IAsyncResult BeginGetSharedLinks(string path = null,
                                                    sys.AsyncCallback callback = null,
                                                    object callbackState = null)
        {
            var getSharedLinksArg = new GetSharedLinksArg(path);

            return this.BeginGetSharedLinks(getSharedLinksArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the get shared links route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GetSharedLinksError"/>.</exception>
        [sys.Obsolete("This function is deprecated, please use EndListSharedLinks instead.")]
        public GetSharedLinksResult EndGetSharedLinks(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<GetSharedLinksResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Use to obtain the members who have been invited to a file, both inherited and
        /// uninherited members.</para>
        /// </summary>
        /// <param name="listFileMembersArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListFileMembersError"/>.</exception>
        public t.Task<SharedFileMembers> ListFileMembersAsync(ListFileMembersArg listFileMembersArg)
        {
            return this.Transport.SendRpcRequestAsync<ListFileMembersArg, SharedFileMembers, ListFileMembersError>(listFileMembersArg, "api", "/sharing/list_file_members", "user", global::Dropbox.Api.Sharing.ListFileMembersArg.Encoder, global::Dropbox.Api.Sharing.SharedFileMembers.Decoder, global::Dropbox.Api.Sharing.ListFileMembersError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the list file members route.</para>
        /// </summary>
        /// <param name="listFileMembersArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginListFileMembers(ListFileMembersArg listFileMembersArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.ListFileMembersAsync(listFileMembersArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Use to obtain the members who have been invited to a file, both inherited and
        /// uninherited members.</para>
        /// </summary>
        /// <param name="file">The file for which you want to see members.</param>
        /// <param name="actions">The actions for which to return permissions on a
        /// member.</param>
        /// <param name="includeInherited">Whether to include members who only have access from
        /// a parent shared folder.</param>
        /// <param name="limit">Number of members to return max per query. Defaults to 100 if
        /// no limit is specified.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListFileMembersError"/>.</exception>
        public t.Task<SharedFileMembers> ListFileMembersAsync(string file,
                                                              col.IEnumerable<MemberAction> actions = null,
                                                              bool includeInherited = true,
                                                              uint limit = 100)
        {
            var listFileMembersArg = new ListFileMembersArg(file,
                                                            actions,
                                                            includeInherited,
                                                            limit);

            return this.ListFileMembersAsync(listFileMembersArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the list file members route.</para>
        /// </summary>
        /// <param name="file">The file for which you want to see members.</param>
        /// <param name="actions">The actions for which to return permissions on a
        /// member.</param>
        /// <param name="includeInherited">Whether to include members who only have access from
        /// a parent shared folder.</param>
        /// <param name="limit">Number of members to return max per query. Defaults to 100 if
        /// no limit is specified.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginListFileMembers(string file,
                                                     col.IEnumerable<MemberAction> actions = null,
                                                     bool includeInherited = true,
                                                     uint limit = 100,
                                                     sys.AsyncCallback callback = null,
                                                     object callbackState = null)
        {
            var listFileMembersArg = new ListFileMembersArg(file,
                                                            actions,
                                                            includeInherited,
                                                            limit);

            return this.BeginListFileMembers(listFileMembersArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the list file members route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListFileMembersError"/>.</exception>
        public SharedFileMembers EndListFileMembers(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<SharedFileMembers>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Get members of multiple files at once. The arguments to this route are more
        /// limited, and the limit on query result size per file is more strict. To customize
        /// the results more, use the individual file endpoint.</para>
        /// <para>Inherited users and groups are not included in the result, and permissions
        /// are not returned for this endpoint.</para>
        /// </summary>
        /// <param name="listFileMembersBatchArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="SharingUserError"/>.</exception>
        public t.Task<col.List<ListFileMembersBatchResult>> ListFileMembersBatchAsync(ListFileMembersBatchArg listFileMembersBatchArg)
        {
            return this.Transport.SendRpcRequestAsync<ListFileMembersBatchArg, col.List<ListFileMembersBatchResult>, SharingUserError>(listFileMembersBatchArg, "api", "/sharing/list_file_members/batch", "user", global::Dropbox.Api.Sharing.ListFileMembersBatchArg.Encoder, enc.Decoder.CreateListDecoder(global::Dropbox.Api.Sharing.ListFileMembersBatchResult.Decoder), global::Dropbox.Api.Sharing.SharingUserError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the list file members batch route.</para>
        /// </summary>
        /// <param name="listFileMembersBatchArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginListFileMembersBatch(ListFileMembersBatchArg listFileMembersBatchArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.ListFileMembersBatchAsync(listFileMembersBatchArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Get members of multiple files at once. The arguments to this route are more
        /// limited, and the limit on query result size per file is more strict. To customize
        /// the results more, use the individual file endpoint.</para>
        /// <para>Inherited users and groups are not included in the result, and permissions
        /// are not returned for this endpoint.</para>
        /// </summary>
        /// <param name="files">Files for which to return members.</param>
        /// <param name="limit">Number of members to return max per query. Defaults to 10 if no
        /// limit is specified.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="SharingUserError"/>.</exception>
        public t.Task<col.List<ListFileMembersBatchResult>> ListFileMembersBatchAsync(col.IEnumerable<string> files,
                                                                                      uint limit = 10)
        {
            var listFileMembersBatchArg = new ListFileMembersBatchArg(files,
                                                                      limit);

            return this.ListFileMembersBatchAsync(listFileMembersBatchArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the list file members batch route.</para>
        /// </summary>
        /// <param name="files">Files for which to return members.</param>
        /// <param name="limit">Number of members to return max per query. Defaults to 10 if no
        /// limit is specified.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginListFileMembersBatch(col.IEnumerable<string> files,
                                                          uint limit = 10,
                                                          sys.AsyncCallback callback = null,
                                                          object callbackState = null)
        {
            var listFileMembersBatchArg = new ListFileMembersBatchArg(files,
                                                                      limit);

            return this.BeginListFileMembersBatch(listFileMembersBatchArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the list file members batch route
        /// to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="SharingUserError"/>.</exception>
        public col.List<ListFileMembersBatchResult> EndListFileMembersBatch(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<col.List<ListFileMembersBatchResult>>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Once a cursor has been retrieved from <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListFileMembersAsync" /> or <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListFileMembersBatchAsync" />,
        /// use this to paginate through all shared file members.</para>
        /// </summary>
        /// <param name="listFileMembersContinueArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListFileMembersContinueError"/>.</exception>
        public t.Task<SharedFileMembers> ListFileMembersContinueAsync(ListFileMembersContinueArg listFileMembersContinueArg)
        {
            return this.Transport.SendRpcRequestAsync<ListFileMembersContinueArg, SharedFileMembers, ListFileMembersContinueError>(listFileMembersContinueArg, "api", "/sharing/list_file_members/continue", "user", global::Dropbox.Api.Sharing.ListFileMembersContinueArg.Encoder, global::Dropbox.Api.Sharing.SharedFileMembers.Decoder, global::Dropbox.Api.Sharing.ListFileMembersContinueError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the list file members continue route.</para>
        /// </summary>
        /// <param name="listFileMembersContinueArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginListFileMembersContinue(ListFileMembersContinueArg listFileMembersContinueArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.ListFileMembersContinueAsync(listFileMembersContinueArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Once a cursor has been retrieved from <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListFileMembersAsync" /> or <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListFileMembersBatchAsync" />,
        /// use this to paginate through all shared file members.</para>
        /// </summary>
        /// <param name="cursor">The cursor returned by your last call to <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListFileMembersAsync" />, <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListFileMembersContinueAsync"
        /// />, or <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListFileMembersBatchAsync"
        /// />.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListFileMembersContinueError"/>.</exception>
        public t.Task<SharedFileMembers> ListFileMembersContinueAsync(string cursor)
        {
            var listFileMembersContinueArg = new ListFileMembersContinueArg(cursor);

            return this.ListFileMembersContinueAsync(listFileMembersContinueArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the list file members continue route.</para>
        /// </summary>
        /// <param name="cursor">The cursor returned by your last call to <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListFileMembersAsync" />, <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListFileMembersContinueAsync"
        /// />, or <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListFileMembersBatchAsync"
        /// />.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginListFileMembersContinue(string cursor,
                                                             sys.AsyncCallback callback,
                                                             object callbackState = null)
        {
            var listFileMembersContinueArg = new ListFileMembersContinueArg(cursor);

            return this.BeginListFileMembersContinue(listFileMembersContinueArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the list file members continue
        /// route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListFileMembersContinueError"/>.</exception>
        public SharedFileMembers EndListFileMembersContinue(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<SharedFileMembers>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Returns shared folder membership by its folder ID.</para>
        /// </summary>
        /// <param name="listFolderMembersArgs">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="SharedFolderAccessError"/>.</exception>
        public t.Task<SharedFolderMembers> ListFolderMembersAsync(ListFolderMembersArgs listFolderMembersArgs)
        {
            return this.Transport.SendRpcRequestAsync<ListFolderMembersArgs, SharedFolderMembers, SharedFolderAccessError>(listFolderMembersArgs, "api", "/sharing/list_folder_members", "user", global::Dropbox.Api.Sharing.ListFolderMembersArgs.Encoder, global::Dropbox.Api.Sharing.SharedFolderMembers.Decoder, global::Dropbox.Api.Sharing.SharedFolderAccessError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the list folder members route.</para>
        /// </summary>
        /// <param name="listFolderMembersArgs">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginListFolderMembers(ListFolderMembersArgs listFolderMembersArgs, sys.AsyncCallback callback, object state = null)
        {
            var task = this.ListFolderMembersAsync(listFolderMembersArgs);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Returns shared folder membership by its folder ID.</para>
        /// </summary>
        /// <param name="sharedFolderId">The ID for the shared folder.</param>
        /// <param name="actions">This is a list indicating whether each returned member will
        /// include a boolean value <see cref="Dropbox.Api.Sharing.MemberPermission.Allow" />
        /// that describes whether the current user can perform the MemberAction on the
        /// member.</param>
        /// <param name="limit">The maximum number of results that include members, groups and
        /// invitees to return per request.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="SharedFolderAccessError"/>.</exception>
        public t.Task<SharedFolderMembers> ListFolderMembersAsync(string sharedFolderId,
                                                                  col.IEnumerable<MemberAction> actions = null,
                                                                  uint limit = 1000)
        {
            var listFolderMembersArgs = new ListFolderMembersArgs(sharedFolderId,
                                                                  actions,
                                                                  limit);

            return this.ListFolderMembersAsync(listFolderMembersArgs);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the list folder members route.</para>
        /// </summary>
        /// <param name="sharedFolderId">The ID for the shared folder.</param>
        /// <param name="actions">This is a list indicating whether each returned member will
        /// include a boolean value <see cref="Dropbox.Api.Sharing.MemberPermission.Allow" />
        /// that describes whether the current user can perform the MemberAction on the
        /// member.</param>
        /// <param name="limit">The maximum number of results that include members, groups and
        /// invitees to return per request.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginListFolderMembers(string sharedFolderId,
                                                       col.IEnumerable<MemberAction> actions = null,
                                                       uint limit = 1000,
                                                       sys.AsyncCallback callback = null,
                                                       object callbackState = null)
        {
            var listFolderMembersArgs = new ListFolderMembersArgs(sharedFolderId,
                                                                  actions,
                                                                  limit);

            return this.BeginListFolderMembers(listFolderMembersArgs, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the list folder members route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="SharedFolderAccessError"/>.</exception>
        public SharedFolderMembers EndListFolderMembers(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<SharedFolderMembers>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Once a cursor has been retrieved from <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListFolderMembersAsync" />, use
        /// this to paginate through all shared folder members.</para>
        /// </summary>
        /// <param name="listFolderMembersContinueArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListFolderMembersContinueError"/>.</exception>
        public t.Task<SharedFolderMembers> ListFolderMembersContinueAsync(ListFolderMembersContinueArg listFolderMembersContinueArg)
        {
            return this.Transport.SendRpcRequestAsync<ListFolderMembersContinueArg, SharedFolderMembers, ListFolderMembersContinueError>(listFolderMembersContinueArg, "api", "/sharing/list_folder_members/continue", "user", global::Dropbox.Api.Sharing.ListFolderMembersContinueArg.Encoder, global::Dropbox.Api.Sharing.SharedFolderMembers.Decoder, global::Dropbox.Api.Sharing.ListFolderMembersContinueError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the list folder members continue route.</para>
        /// </summary>
        /// <param name="listFolderMembersContinueArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginListFolderMembersContinue(ListFolderMembersContinueArg listFolderMembersContinueArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.ListFolderMembersContinueAsync(listFolderMembersContinueArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Once a cursor has been retrieved from <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListFolderMembersAsync" />, use
        /// this to paginate through all shared folder members.</para>
        /// </summary>
        /// <param name="cursor">The cursor returned by your last call to <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListFolderMembersAsync" /> or
        /// <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListFolderMembersContinueAsync"
        /// />.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListFolderMembersContinueError"/>.</exception>
        public t.Task<SharedFolderMembers> ListFolderMembersContinueAsync(string cursor)
        {
            var listFolderMembersContinueArg = new ListFolderMembersContinueArg(cursor);

            return this.ListFolderMembersContinueAsync(listFolderMembersContinueArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the list folder members continue route.</para>
        /// </summary>
        /// <param name="cursor">The cursor returned by your last call to <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListFolderMembersAsync" /> or
        /// <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListFolderMembersContinueAsync"
        /// />.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginListFolderMembersContinue(string cursor,
                                                               sys.AsyncCallback callback,
                                                               object callbackState = null)
        {
            var listFolderMembersContinueArg = new ListFolderMembersContinueArg(cursor);

            return this.BeginListFolderMembersContinue(listFolderMembersContinueArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the list folder members continue
        /// route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListFolderMembersContinueError"/>.</exception>
        public SharedFolderMembers EndListFolderMembersContinue(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<SharedFolderMembers>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Return the list of all shared folders the current user has access to.</para>
        /// </summary>
        /// <param name="listFoldersArgs">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        public t.Task<ListFoldersResult> ListFoldersAsync(ListFoldersArgs listFoldersArgs)
        {
            return this.Transport.SendRpcRequestAsync<ListFoldersArgs, ListFoldersResult, enc.Empty>(listFoldersArgs, "api", "/sharing/list_folders", "user", global::Dropbox.Api.Sharing.ListFoldersArgs.Encoder, global::Dropbox.Api.Sharing.ListFoldersResult.Decoder, enc.EmptyDecoder.Instance);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the list folders route.</para>
        /// </summary>
        /// <param name="listFoldersArgs">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginListFolders(ListFoldersArgs listFoldersArgs, sys.AsyncCallback callback, object state = null)
        {
            var task = this.ListFoldersAsync(listFoldersArgs);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Return the list of all shared folders the current user has access to.</para>
        /// </summary>
        /// <param name="limit">The maximum number of results to return per request.</param>
        /// <param name="actions">A list of `FolderAction`s corresponding to
        /// `FolderPermission`s that should appear in the  response's <see
        /// cref="Dropbox.Api.Sharing.SharedFolderMetadata.Permissions" /> field describing the
        /// actions the  authenticated user can perform on the folder.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        public t.Task<ListFoldersResult> ListFoldersAsync(uint limit = 1000,
                                                          col.IEnumerable<FolderAction> actions = null)
        {
            var listFoldersArgs = new ListFoldersArgs(limit,
                                                      actions);

            return this.ListFoldersAsync(listFoldersArgs);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the list folders route.</para>
        /// </summary>
        /// <param name="limit">The maximum number of results to return per request.</param>
        /// <param name="actions">A list of `FolderAction`s corresponding to
        /// `FolderPermission`s that should appear in the  response's <see
        /// cref="Dropbox.Api.Sharing.SharedFolderMetadata.Permissions" /> field describing the
        /// actions the  authenticated user can perform on the folder.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginListFolders(uint limit = 1000,
                                                 col.IEnumerable<FolderAction> actions = null,
                                                 sys.AsyncCallback callback = null,
                                                 object callbackState = null)
        {
            var listFoldersArgs = new ListFoldersArgs(limit,
                                                      actions);

            return this.BeginListFolders(listFoldersArgs, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the list folders route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        public ListFoldersResult EndListFolders(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<ListFoldersResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Once a cursor has been retrieved from <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListFoldersAsync" />, use this
        /// to paginate through all shared folders. The cursor must come from a previous call
        /// to <see cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListFoldersAsync" /> or
        /// <see cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListFoldersContinueAsync"
        /// />.</para>
        /// </summary>
        /// <param name="listFoldersContinueArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListFoldersContinueError"/>.</exception>
        public t.Task<ListFoldersResult> ListFoldersContinueAsync(ListFoldersContinueArg listFoldersContinueArg)
        {
            return this.Transport.SendRpcRequestAsync<ListFoldersContinueArg, ListFoldersResult, ListFoldersContinueError>(listFoldersContinueArg, "api", "/sharing/list_folders/continue", "user", global::Dropbox.Api.Sharing.ListFoldersContinueArg.Encoder, global::Dropbox.Api.Sharing.ListFoldersResult.Decoder, global::Dropbox.Api.Sharing.ListFoldersContinueError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the list folders continue route.</para>
        /// </summary>
        /// <param name="listFoldersContinueArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginListFoldersContinue(ListFoldersContinueArg listFoldersContinueArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.ListFoldersContinueAsync(listFoldersContinueArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Once a cursor has been retrieved from <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListFoldersAsync" />, use this
        /// to paginate through all shared folders. The cursor must come from a previous call
        /// to <see cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListFoldersAsync" /> or
        /// <see cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListFoldersContinueAsync"
        /// />.</para>
        /// </summary>
        /// <param name="cursor">The cursor returned by the previous API call specified in the
        /// endpoint description.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListFoldersContinueError"/>.</exception>
        public t.Task<ListFoldersResult> ListFoldersContinueAsync(string cursor)
        {
            var listFoldersContinueArg = new ListFoldersContinueArg(cursor);

            return this.ListFoldersContinueAsync(listFoldersContinueArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the list folders continue route.</para>
        /// </summary>
        /// <param name="cursor">The cursor returned by the previous API call specified in the
        /// endpoint description.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginListFoldersContinue(string cursor,
                                                         sys.AsyncCallback callback,
                                                         object callbackState = null)
        {
            var listFoldersContinueArg = new ListFoldersContinueArg(cursor);

            return this.BeginListFoldersContinue(listFoldersContinueArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the list folders continue route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListFoldersContinueError"/>.</exception>
        public ListFoldersResult EndListFoldersContinue(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<ListFoldersResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Return the list of all shared folders the current user can mount or
        /// unmount.</para>
        /// </summary>
        /// <param name="listFoldersArgs">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        public t.Task<ListFoldersResult> ListMountableFoldersAsync(ListFoldersArgs listFoldersArgs)
        {
            return this.Transport.SendRpcRequestAsync<ListFoldersArgs, ListFoldersResult, enc.Empty>(listFoldersArgs, "api", "/sharing/list_mountable_folders", "user", global::Dropbox.Api.Sharing.ListFoldersArgs.Encoder, global::Dropbox.Api.Sharing.ListFoldersResult.Decoder, enc.EmptyDecoder.Instance);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the list mountable folders route.</para>
        /// </summary>
        /// <param name="listFoldersArgs">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginListMountableFolders(ListFoldersArgs listFoldersArgs, sys.AsyncCallback callback, object state = null)
        {
            var task = this.ListMountableFoldersAsync(listFoldersArgs);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Return the list of all shared folders the current user can mount or
        /// unmount.</para>
        /// </summary>
        /// <param name="limit">The maximum number of results to return per request.</param>
        /// <param name="actions">A list of `FolderAction`s corresponding to
        /// `FolderPermission`s that should appear in the  response's <see
        /// cref="Dropbox.Api.Sharing.SharedFolderMetadata.Permissions" /> field describing the
        /// actions the  authenticated user can perform on the folder.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        public t.Task<ListFoldersResult> ListMountableFoldersAsync(uint limit = 1000,
                                                                   col.IEnumerable<FolderAction> actions = null)
        {
            var listFoldersArgs = new ListFoldersArgs(limit,
                                                      actions);

            return this.ListMountableFoldersAsync(listFoldersArgs);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the list mountable folders route.</para>
        /// </summary>
        /// <param name="limit">The maximum number of results to return per request.</param>
        /// <param name="actions">A list of `FolderAction`s corresponding to
        /// `FolderPermission`s that should appear in the  response's <see
        /// cref="Dropbox.Api.Sharing.SharedFolderMetadata.Permissions" /> field describing the
        /// actions the  authenticated user can perform on the folder.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginListMountableFolders(uint limit = 1000,
                                                          col.IEnumerable<FolderAction> actions = null,
                                                          sys.AsyncCallback callback = null,
                                                          object callbackState = null)
        {
            var listFoldersArgs = new ListFoldersArgs(limit,
                                                      actions);

            return this.BeginListMountableFolders(listFoldersArgs, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the list mountable folders route
        /// to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        public ListFoldersResult EndListMountableFolders(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<ListFoldersResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Once a cursor has been retrieved from <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListMountableFoldersAsync" />,
        /// use this to paginate through all mountable shared folders. The cursor must come
        /// from a previous call to <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListMountableFoldersAsync" /> or
        /// <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListMountableFoldersContinueAsync"
        /// />.</para>
        /// </summary>
        /// <param name="listFoldersContinueArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListFoldersContinueError"/>.</exception>
        public t.Task<ListFoldersResult> ListMountableFoldersContinueAsync(ListFoldersContinueArg listFoldersContinueArg)
        {
            return this.Transport.SendRpcRequestAsync<ListFoldersContinueArg, ListFoldersResult, ListFoldersContinueError>(listFoldersContinueArg, "api", "/sharing/list_mountable_folders/continue", "user", global::Dropbox.Api.Sharing.ListFoldersContinueArg.Encoder, global::Dropbox.Api.Sharing.ListFoldersResult.Decoder, global::Dropbox.Api.Sharing.ListFoldersContinueError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the list mountable folders continue
        /// route.</para>
        /// </summary>
        /// <param name="listFoldersContinueArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginListMountableFoldersContinue(ListFoldersContinueArg listFoldersContinueArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.ListMountableFoldersContinueAsync(listFoldersContinueArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Once a cursor has been retrieved from <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListMountableFoldersAsync" />,
        /// use this to paginate through all mountable shared folders. The cursor must come
        /// from a previous call to <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListMountableFoldersAsync" /> or
        /// <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListMountableFoldersContinueAsync"
        /// />.</para>
        /// </summary>
        /// <param name="cursor">The cursor returned by the previous API call specified in the
        /// endpoint description.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListFoldersContinueError"/>.</exception>
        public t.Task<ListFoldersResult> ListMountableFoldersContinueAsync(string cursor)
        {
            var listFoldersContinueArg = new ListFoldersContinueArg(cursor);

            return this.ListMountableFoldersContinueAsync(listFoldersContinueArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the list mountable folders continue
        /// route.</para>
        /// </summary>
        /// <param name="cursor">The cursor returned by the previous API call specified in the
        /// endpoint description.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginListMountableFoldersContinue(string cursor,
                                                                  sys.AsyncCallback callback,
                                                                  object callbackState = null)
        {
            var listFoldersContinueArg = new ListFoldersContinueArg(cursor);

            return this.BeginListMountableFoldersContinue(listFoldersContinueArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the list mountable folders
        /// continue route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListFoldersContinueError"/>.</exception>
        public ListFoldersResult EndListMountableFoldersContinue(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<ListFoldersResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Returns a list of all files shared with current user.</para>
        /// <para> Does not include files the user has received via shared folders, and does
        /// not include unclaimed invitations.</para>
        /// </summary>
        /// <param name="listFilesArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="SharingUserError"/>.</exception>
        public t.Task<ListFilesResult> ListReceivedFilesAsync(ListFilesArg listFilesArg)
        {
            return this.Transport.SendRpcRequestAsync<ListFilesArg, ListFilesResult, SharingUserError>(listFilesArg, "api", "/sharing/list_received_files", "user", global::Dropbox.Api.Sharing.ListFilesArg.Encoder, global::Dropbox.Api.Sharing.ListFilesResult.Decoder, global::Dropbox.Api.Sharing.SharingUserError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the list received files route.</para>
        /// </summary>
        /// <param name="listFilesArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginListReceivedFiles(ListFilesArg listFilesArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.ListReceivedFilesAsync(listFilesArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Returns a list of all files shared with current user.</para>
        /// <para> Does not include files the user has received via shared folders, and does
        /// not include unclaimed invitations.</para>
        /// </summary>
        /// <param name="limit">Number of files to return max per query. Defaults to 100 if no
        /// limit is specified.</param>
        /// <param name="actions">A list of `FileAction`s corresponding to `FilePermission`s
        /// that should appear in the  response's <see
        /// cref="Dropbox.Api.Sharing.SharedFileMetadata.Permissions" /> field describing the
        /// actions the  authenticated user can perform on the file.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="SharingUserError"/>.</exception>
        public t.Task<ListFilesResult> ListReceivedFilesAsync(uint limit = 100,
                                                              col.IEnumerable<FileAction> actions = null)
        {
            var listFilesArg = new ListFilesArg(limit,
                                                actions);

            return this.ListReceivedFilesAsync(listFilesArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the list received files route.</para>
        /// </summary>
        /// <param name="limit">Number of files to return max per query. Defaults to 100 if no
        /// limit is specified.</param>
        /// <param name="actions">A list of `FileAction`s corresponding to `FilePermission`s
        /// that should appear in the  response's <see
        /// cref="Dropbox.Api.Sharing.SharedFileMetadata.Permissions" /> field describing the
        /// actions the  authenticated user can perform on the file.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginListReceivedFiles(uint limit = 100,
                                                       col.IEnumerable<FileAction> actions = null,
                                                       sys.AsyncCallback callback = null,
                                                       object callbackState = null)
        {
            var listFilesArg = new ListFilesArg(limit,
                                                actions);

            return this.BeginListReceivedFiles(listFilesArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the list received files route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="SharingUserError"/>.</exception>
        public ListFilesResult EndListReceivedFiles(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<ListFilesResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Get more results with a cursor from <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListReceivedFilesAsync"
        /// />.</para>
        /// </summary>
        /// <param name="listFilesContinueArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListFilesContinueError"/>.</exception>
        public t.Task<ListFilesResult> ListReceivedFilesContinueAsync(ListFilesContinueArg listFilesContinueArg)
        {
            return this.Transport.SendRpcRequestAsync<ListFilesContinueArg, ListFilesResult, ListFilesContinueError>(listFilesContinueArg, "api", "/sharing/list_received_files/continue", "user", global::Dropbox.Api.Sharing.ListFilesContinueArg.Encoder, global::Dropbox.Api.Sharing.ListFilesResult.Decoder, global::Dropbox.Api.Sharing.ListFilesContinueError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the list received files continue route.</para>
        /// </summary>
        /// <param name="listFilesContinueArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginListReceivedFilesContinue(ListFilesContinueArg listFilesContinueArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.ListReceivedFilesContinueAsync(listFilesContinueArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Get more results with a cursor from <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListReceivedFilesAsync"
        /// />.</para>
        /// </summary>
        /// <param name="cursor">Cursor in <see
        /// cref="Dropbox.Api.Sharing.ListFilesResult.Cursor" />.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListFilesContinueError"/>.</exception>
        public t.Task<ListFilesResult> ListReceivedFilesContinueAsync(string cursor)
        {
            var listFilesContinueArg = new ListFilesContinueArg(cursor);

            return this.ListReceivedFilesContinueAsync(listFilesContinueArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the list received files continue route.</para>
        /// </summary>
        /// <param name="cursor">Cursor in <see
        /// cref="Dropbox.Api.Sharing.ListFilesResult.Cursor" />.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginListReceivedFilesContinue(string cursor,
                                                               sys.AsyncCallback callback,
                                                               object callbackState = null)
        {
            var listFilesContinueArg = new ListFilesContinueArg(cursor);

            return this.BeginListReceivedFilesContinue(listFilesContinueArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the list received files continue
        /// route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListFilesContinueError"/>.</exception>
        public ListFilesResult EndListReceivedFilesContinue(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<ListFilesResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>List shared links of this user.</para>
        /// <para>If no path is given, returns a list of all shared links for the current
        /// user.</para>
        /// <para>If a non-empty path is given, returns a list of all shared links that allow
        /// access to the given path - direct links to the given path and links to parent
        /// folders of the given path. Links to parent folders can be suppressed by setting
        /// direct_only to true.</para>
        /// </summary>
        /// <param name="listSharedLinksArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListSharedLinksError"/>.</exception>
        public t.Task<ListSharedLinksResult> ListSharedLinksAsync(ListSharedLinksArg listSharedLinksArg)
        {
            return this.Transport.SendRpcRequestAsync<ListSharedLinksArg, ListSharedLinksResult, ListSharedLinksError>(listSharedLinksArg, "api", "/sharing/list_shared_links", "user", global::Dropbox.Api.Sharing.ListSharedLinksArg.Encoder, global::Dropbox.Api.Sharing.ListSharedLinksResult.Decoder, global::Dropbox.Api.Sharing.ListSharedLinksError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the list shared links route.</para>
        /// </summary>
        /// <param name="listSharedLinksArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginListSharedLinks(ListSharedLinksArg listSharedLinksArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.ListSharedLinksAsync(listSharedLinksArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>List shared links of this user.</para>
        /// <para>If no path is given, returns a list of all shared links for the current
        /// user.</para>
        /// <para>If a non-empty path is given, returns a list of all shared links that allow
        /// access to the given path - direct links to the given path and links to parent
        /// folders of the given path. Links to parent folders can be suppressed by setting
        /// direct_only to true.</para>
        /// </summary>
        /// <param name="path">See <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListSharedLinksAsync" />
        /// description.</param>
        /// <param name="cursor">The cursor returned by your last call to <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListSharedLinksAsync"
        /// />.</param>
        /// <param name="directOnly">See <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListSharedLinksAsync" />
        /// description.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListSharedLinksError"/>.</exception>
        public t.Task<ListSharedLinksResult> ListSharedLinksAsync(string path = null,
                                                                  string cursor = null,
                                                                  bool? directOnly = null)
        {
            var listSharedLinksArg = new ListSharedLinksArg(path,
                                                            cursor,
                                                            directOnly);

            return this.ListSharedLinksAsync(listSharedLinksArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the list shared links route.</para>
        /// </summary>
        /// <param name="path">See <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListSharedLinksAsync" />
        /// description.</param>
        /// <param name="cursor">The cursor returned by your last call to <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListSharedLinksAsync"
        /// />.</param>
        /// <param name="directOnly">See <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListSharedLinksAsync" />
        /// description.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginListSharedLinks(string path = null,
                                                     string cursor = null,
                                                     bool? directOnly = null,
                                                     sys.AsyncCallback callback = null,
                                                     object callbackState = null)
        {
            var listSharedLinksArg = new ListSharedLinksArg(path,
                                                            cursor,
                                                            directOnly);

            return this.BeginListSharedLinks(listSharedLinksArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the list shared links route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListSharedLinksError"/>.</exception>
        public ListSharedLinksResult EndListSharedLinks(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<ListSharedLinksResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Modify the shared link's settings.</para>
        /// <para>If the requested visibility conflict with the shared links policy of the team
        /// or the shared folder (in case the linked file is part of a shared folder) then the
        /// <see cref="Dropbox.Api.Sharing.LinkPermissions.ResolvedVisibility" /> of the
        /// returned <see cref="SharedLinkMetadata" /> will reflect the actual visibility of
        /// the shared link and the <see
        /// cref="Dropbox.Api.Sharing.LinkPermissions.RequestedVisibility" /> will reflect the
        /// requested visibility.</para>
        /// </summary>
        /// <param name="modifySharedLinkSettingsArgs">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ModifySharedLinkSettingsError"/>.</exception>
        public t.Task<SharedLinkMetadata> ModifySharedLinkSettingsAsync(ModifySharedLinkSettingsArgs modifySharedLinkSettingsArgs)
        {
            return this.Transport.SendRpcRequestAsync<ModifySharedLinkSettingsArgs, SharedLinkMetadata, ModifySharedLinkSettingsError>(modifySharedLinkSettingsArgs, "api", "/sharing/modify_shared_link_settings", "user", global::Dropbox.Api.Sharing.ModifySharedLinkSettingsArgs.Encoder, global::Dropbox.Api.Sharing.SharedLinkMetadata.Decoder, global::Dropbox.Api.Sharing.ModifySharedLinkSettingsError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the modify shared link settings route.</para>
        /// </summary>
        /// <param name="modifySharedLinkSettingsArgs">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginModifySharedLinkSettings(ModifySharedLinkSettingsArgs modifySharedLinkSettingsArgs, sys.AsyncCallback callback, object state = null)
        {
            var task = this.ModifySharedLinkSettingsAsync(modifySharedLinkSettingsArgs);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Modify the shared link's settings.</para>
        /// <para>If the requested visibility conflict with the shared links policy of the team
        /// or the shared folder (in case the linked file is part of a shared folder) then the
        /// <see cref="Dropbox.Api.Sharing.LinkPermissions.ResolvedVisibility" /> of the
        /// returned <see cref="SharedLinkMetadata" /> will reflect the actual visibility of
        /// the shared link and the <see
        /// cref="Dropbox.Api.Sharing.LinkPermissions.RequestedVisibility" /> will reflect the
        /// requested visibility.</para>
        /// </summary>
        /// <param name="url">URL of the shared link to change its settings.</param>
        /// <param name="settings">Set of settings for the shared link.</param>
        /// <param name="removeExpiration">If set to true, removes the expiration of the shared
        /// link.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ModifySharedLinkSettingsError"/>.</exception>
        public t.Task<SharedLinkMetadata> ModifySharedLinkSettingsAsync(string url,
                                                                        SharedLinkSettings settings,
                                                                        bool removeExpiration = false)
        {
            var modifySharedLinkSettingsArgs = new ModifySharedLinkSettingsArgs(url,
                                                                                settings,
                                                                                removeExpiration);

            return this.ModifySharedLinkSettingsAsync(modifySharedLinkSettingsArgs);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the modify shared link settings route.</para>
        /// </summary>
        /// <param name="url">URL of the shared link to change its settings.</param>
        /// <param name="settings">Set of settings for the shared link.</param>
        /// <param name="removeExpiration">If set to true, removes the expiration of the shared
        /// link.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginModifySharedLinkSettings(string url,
                                                              SharedLinkSettings settings,
                                                              bool removeExpiration = false,
                                                              sys.AsyncCallback callback = null,
                                                              object callbackState = null)
        {
            var modifySharedLinkSettingsArgs = new ModifySharedLinkSettingsArgs(url,
                                                                                settings,
                                                                                removeExpiration);

            return this.BeginModifySharedLinkSettings(modifySharedLinkSettingsArgs, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the modify shared link settings
        /// route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ModifySharedLinkSettingsError"/>.</exception>
        public SharedLinkMetadata EndModifySharedLinkSettings(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<SharedLinkMetadata>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>The current user mounts the designated folder.</para>
        /// <para>Mount a shared folder for a user after they have been added as a member. Once
        /// mounted, the shared folder will appear in their Dropbox.</para>
        /// </summary>
        /// <param name="mountFolderArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MountFolderError"/>.</exception>
        public t.Task<SharedFolderMetadata> MountFolderAsync(MountFolderArg mountFolderArg)
        {
            return this.Transport.SendRpcRequestAsync<MountFolderArg, SharedFolderMetadata, MountFolderError>(mountFolderArg, "api", "/sharing/mount_folder", "user", global::Dropbox.Api.Sharing.MountFolderArg.Encoder, global::Dropbox.Api.Sharing.SharedFolderMetadata.Decoder, global::Dropbox.Api.Sharing.MountFolderError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the mount folder route.</para>
        /// </summary>
        /// <param name="mountFolderArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginMountFolder(MountFolderArg mountFolderArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.MountFolderAsync(mountFolderArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>The current user mounts the designated folder.</para>
        /// <para>Mount a shared folder for a user after they have been added as a member. Once
        /// mounted, the shared folder will appear in their Dropbox.</para>
        /// </summary>
        /// <param name="sharedFolderId">The ID of the shared folder to mount.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MountFolderError"/>.</exception>
        public t.Task<SharedFolderMetadata> MountFolderAsync(string sharedFolderId)
        {
            var mountFolderArg = new MountFolderArg(sharedFolderId);

            return this.MountFolderAsync(mountFolderArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the mount folder route.</para>
        /// </summary>
        /// <param name="sharedFolderId">The ID of the shared folder to mount.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginMountFolder(string sharedFolderId,
                                                 sys.AsyncCallback callback,
                                                 object callbackState = null)
        {
            var mountFolderArg = new MountFolderArg(sharedFolderId);

            return this.BeginMountFolder(mountFolderArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the mount folder route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="MountFolderError"/>.</exception>
        public SharedFolderMetadata EndMountFolder(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<SharedFolderMetadata>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>The current user relinquishes their membership in the designated file. Note
        /// that the current user may still have inherited access to this file through the
        /// parent folder.</para>
        /// </summary>
        /// <param name="relinquishFileMembershipArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RelinquishFileMembershipError"/>.</exception>
        public t.Task RelinquishFileMembershipAsync(RelinquishFileMembershipArg relinquishFileMembershipArg)
        {
            return this.Transport.SendRpcRequestAsync<RelinquishFileMembershipArg, enc.Empty, RelinquishFileMembershipError>(relinquishFileMembershipArg, "api", "/sharing/relinquish_file_membership", "user", global::Dropbox.Api.Sharing.RelinquishFileMembershipArg.Encoder, enc.EmptyDecoder.Instance, global::Dropbox.Api.Sharing.RelinquishFileMembershipError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the relinquish file membership route.</para>
        /// </summary>
        /// <param name="relinquishFileMembershipArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginRelinquishFileMembership(RelinquishFileMembershipArg relinquishFileMembershipArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.RelinquishFileMembershipAsync(relinquishFileMembershipArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>The current user relinquishes their membership in the designated file. Note
        /// that the current user may still have inherited access to this file through the
        /// parent folder.</para>
        /// </summary>
        /// <param name="file">The path or id for the file.</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RelinquishFileMembershipError"/>.</exception>
        public t.Task RelinquishFileMembershipAsync(string file)
        {
            var relinquishFileMembershipArg = new RelinquishFileMembershipArg(file);

            return this.RelinquishFileMembershipAsync(relinquishFileMembershipArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the relinquish file membership route.</para>
        /// </summary>
        /// <param name="file">The path or id for the file.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginRelinquishFileMembership(string file,
                                                              sys.AsyncCallback callback,
                                                              object callbackState = null)
        {
            var relinquishFileMembershipArg = new RelinquishFileMembershipArg(file);

            return this.BeginRelinquishFileMembership(relinquishFileMembershipArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the relinquish file membership
        /// route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RelinquishFileMembershipError"/>.</exception>
        public void EndRelinquishFileMembership(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }
        }

        /// <summary>
        /// <para>The current user relinquishes their membership in the designated shared
        /// folder and will no longer have access to the folder.  A folder owner cannot
        /// relinquish membership in their own folder.</para>
        /// <para>This will run synchronously if leave_a_copy is false, and asynchronously if
        /// leave_a_copy is true.</para>
        /// </summary>
        /// <param name="relinquishFolderMembershipArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RelinquishFolderMembershipError"/>.</exception>
        public t.Task<global::Dropbox.Api.Async.LaunchEmptyResult> RelinquishFolderMembershipAsync(RelinquishFolderMembershipArg relinquishFolderMembershipArg)
        {
            return this.Transport.SendRpcRequestAsync<RelinquishFolderMembershipArg, global::Dropbox.Api.Async.LaunchEmptyResult, RelinquishFolderMembershipError>(relinquishFolderMembershipArg, "api", "/sharing/relinquish_folder_membership", "user", global::Dropbox.Api.Sharing.RelinquishFolderMembershipArg.Encoder, global::Dropbox.Api.Async.LaunchEmptyResult.Decoder, global::Dropbox.Api.Sharing.RelinquishFolderMembershipError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the relinquish folder membership route.</para>
        /// </summary>
        /// <param name="relinquishFolderMembershipArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginRelinquishFolderMembership(RelinquishFolderMembershipArg relinquishFolderMembershipArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.RelinquishFolderMembershipAsync(relinquishFolderMembershipArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>The current user relinquishes their membership in the designated shared
        /// folder and will no longer have access to the folder.  A folder owner cannot
        /// relinquish membership in their own folder.</para>
        /// <para>This will run synchronously if leave_a_copy is false, and asynchronously if
        /// leave_a_copy is true.</para>
        /// </summary>
        /// <param name="sharedFolderId">The ID for the shared folder.</param>
        /// <param name="leaveACopy">Keep a copy of the folder's contents upon relinquishing
        /// membership.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RelinquishFolderMembershipError"/>.</exception>
        public t.Task<global::Dropbox.Api.Async.LaunchEmptyResult> RelinquishFolderMembershipAsync(string sharedFolderId,
                                                                                                   bool leaveACopy = false)
        {
            var relinquishFolderMembershipArg = new RelinquishFolderMembershipArg(sharedFolderId,
                                                                                  leaveACopy);

            return this.RelinquishFolderMembershipAsync(relinquishFolderMembershipArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the relinquish folder membership route.</para>
        /// </summary>
        /// <param name="sharedFolderId">The ID for the shared folder.</param>
        /// <param name="leaveACopy">Keep a copy of the folder's contents upon relinquishing
        /// membership.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginRelinquishFolderMembership(string sharedFolderId,
                                                                bool leaveACopy = false,
                                                                sys.AsyncCallback callback = null,
                                                                object callbackState = null)
        {
            var relinquishFolderMembershipArg = new RelinquishFolderMembershipArg(sharedFolderId,
                                                                                  leaveACopy);

            return this.BeginRelinquishFolderMembership(relinquishFolderMembershipArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the relinquish folder membership
        /// route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RelinquishFolderMembershipError"/>.</exception>
        public global::Dropbox.Api.Async.LaunchEmptyResult EndRelinquishFolderMembership(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<global::Dropbox.Api.Async.LaunchEmptyResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Identical to remove_file_member_2 but with less information returned.</para>
        /// </summary>
        /// <param name="removeFileMemberArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RemoveFileMemberError"/>.</exception>
        [sys.Obsolete("This function is deprecated, please use RemoveFileMember2Async instead.")]
        public t.Task<FileMemberActionIndividualResult> RemoveFileMemberAsync(RemoveFileMemberArg removeFileMemberArg)
        {
            return this.Transport.SendRpcRequestAsync<RemoveFileMemberArg, FileMemberActionIndividualResult, RemoveFileMemberError>(removeFileMemberArg, "api", "/sharing/remove_file_member", "user", global::Dropbox.Api.Sharing.RemoveFileMemberArg.Encoder, global::Dropbox.Api.Sharing.FileMemberActionIndividualResult.Decoder, global::Dropbox.Api.Sharing.RemoveFileMemberError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the remove file member route.</para>
        /// </summary>
        /// <param name="removeFileMemberArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated, please use BeginRemoveFileMember2 instead.")]
        public sys.IAsyncResult BeginRemoveFileMember(RemoveFileMemberArg removeFileMemberArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.RemoveFileMemberAsync(removeFileMemberArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Identical to remove_file_member_2 but with less information returned.</para>
        /// </summary>
        /// <param name="file">File from which to remove members.</param>
        /// <param name="member">Member to remove from this file. Note that even if an email is
        /// specified, it may result in the removal of a user (not an invitee) if the user's
        /// main account corresponds to that email address.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RemoveFileMemberError"/>.</exception>
        [sys.Obsolete("This function is deprecated, please use RemoveFileMember2Async instead.")]
        public t.Task<FileMemberActionIndividualResult> RemoveFileMemberAsync(string file,
                                                                              MemberSelector member)
        {
            var removeFileMemberArg = new RemoveFileMemberArg(file,
                                                              member);

            return this.RemoveFileMemberAsync(removeFileMemberArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the remove file member route.</para>
        /// </summary>
        /// <param name="file">File from which to remove members.</param>
        /// <param name="member">Member to remove from this file. Note that even if an email is
        /// specified, it may result in the removal of a user (not an invitee) if the user's
        /// main account corresponds to that email address.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        [sys.Obsolete("This function is deprecated, please use BeginRemoveFileMember2 instead.")]
        public sys.IAsyncResult BeginRemoveFileMember(string file,
                                                      MemberSelector member,
                                                      sys.AsyncCallback callback,
                                                      object callbackState = null)
        {
            var removeFileMemberArg = new RemoveFileMemberArg(file,
                                                              member);

            return this.BeginRemoveFileMember(removeFileMemberArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the remove file member route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RemoveFileMemberError"/>.</exception>
        [sys.Obsolete("This function is deprecated, please use EndRemoveFileMember2 instead.")]
        public FileMemberActionIndividualResult EndRemoveFileMember(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<FileMemberActionIndividualResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Removes a specified member from the file.</para>
        /// </summary>
        /// <param name="removeFileMemberArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RemoveFileMemberError"/>.</exception>
        public t.Task<FileMemberRemoveActionResult> RemoveFileMember2Async(RemoveFileMemberArg removeFileMemberArg)
        {
            return this.Transport.SendRpcRequestAsync<RemoveFileMemberArg, FileMemberRemoveActionResult, RemoveFileMemberError>(removeFileMemberArg, "api", "/sharing/remove_file_member_2", "user", global::Dropbox.Api.Sharing.RemoveFileMemberArg.Encoder, global::Dropbox.Api.Sharing.FileMemberRemoveActionResult.Decoder, global::Dropbox.Api.Sharing.RemoveFileMemberError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the remove file member 2 route.</para>
        /// </summary>
        /// <param name="removeFileMemberArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginRemoveFileMember2(RemoveFileMemberArg removeFileMemberArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.RemoveFileMember2Async(removeFileMemberArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Removes a specified member from the file.</para>
        /// </summary>
        /// <param name="file">File from which to remove members.</param>
        /// <param name="member">Member to remove from this file. Note that even if an email is
        /// specified, it may result in the removal of a user (not an invitee) if the user's
        /// main account corresponds to that email address.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RemoveFileMemberError"/>.</exception>
        public t.Task<FileMemberRemoveActionResult> RemoveFileMember2Async(string file,
                                                                           MemberSelector member)
        {
            var removeFileMemberArg = new RemoveFileMemberArg(file,
                                                              member);

            return this.RemoveFileMember2Async(removeFileMemberArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the remove file member 2 route.</para>
        /// </summary>
        /// <param name="file">File from which to remove members.</param>
        /// <param name="member">Member to remove from this file. Note that even if an email is
        /// specified, it may result in the removal of a user (not an invitee) if the user's
        /// main account corresponds to that email address.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginRemoveFileMember2(string file,
                                                       MemberSelector member,
                                                       sys.AsyncCallback callback,
                                                       object callbackState = null)
        {
            var removeFileMemberArg = new RemoveFileMemberArg(file,
                                                              member);

            return this.BeginRemoveFileMember2(removeFileMemberArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the remove file member 2 route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RemoveFileMemberError"/>.</exception>
        public FileMemberRemoveActionResult EndRemoveFileMember2(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<FileMemberRemoveActionResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Allows an owner or editor (if the ACL update policy allows) of a shared
        /// folder to remove another member.</para>
        /// </summary>
        /// <param name="removeFolderMemberArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RemoveFolderMemberError"/>.</exception>
        public t.Task<global::Dropbox.Api.Async.LaunchResultBase> RemoveFolderMemberAsync(RemoveFolderMemberArg removeFolderMemberArg)
        {
            return this.Transport.SendRpcRequestAsync<RemoveFolderMemberArg, global::Dropbox.Api.Async.LaunchResultBase, RemoveFolderMemberError>(removeFolderMemberArg, "api", "/sharing/remove_folder_member", "user", global::Dropbox.Api.Sharing.RemoveFolderMemberArg.Encoder, global::Dropbox.Api.Async.LaunchResultBase.Decoder, global::Dropbox.Api.Sharing.RemoveFolderMemberError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the remove folder member route.</para>
        /// </summary>
        /// <param name="removeFolderMemberArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginRemoveFolderMember(RemoveFolderMemberArg removeFolderMemberArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.RemoveFolderMemberAsync(removeFolderMemberArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Allows an owner or editor (if the ACL update policy allows) of a shared
        /// folder to remove another member.</para>
        /// </summary>
        /// <param name="sharedFolderId">The ID for the shared folder.</param>
        /// <param name="member">The member to remove from the folder.</param>
        /// <param name="leaveACopy">If true, the removed user will keep their copy of the
        /// folder after it's unshared, assuming it was mounted. Otherwise, it will be removed
        /// from their Dropbox. Also, this must be set to false when kicking a group.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RemoveFolderMemberError"/>.</exception>
        public t.Task<global::Dropbox.Api.Async.LaunchResultBase> RemoveFolderMemberAsync(string sharedFolderId,
                                                                                          MemberSelector member,
                                                                                          bool leaveACopy)
        {
            var removeFolderMemberArg = new RemoveFolderMemberArg(sharedFolderId,
                                                                  member,
                                                                  leaveACopy);

            return this.RemoveFolderMemberAsync(removeFolderMemberArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the remove folder member route.</para>
        /// </summary>
        /// <param name="sharedFolderId">The ID for the shared folder.</param>
        /// <param name="member">The member to remove from the folder.</param>
        /// <param name="leaveACopy">If true, the removed user will keep their copy of the
        /// folder after it's unshared, assuming it was mounted. Otherwise, it will be removed
        /// from their Dropbox. Also, this must be set to false when kicking a group.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginRemoveFolderMember(string sharedFolderId,
                                                        MemberSelector member,
                                                        bool leaveACopy,
                                                        sys.AsyncCallback callback,
                                                        object callbackState = null)
        {
            var removeFolderMemberArg = new RemoveFolderMemberArg(sharedFolderId,
                                                                  member,
                                                                  leaveACopy);

            return this.BeginRemoveFolderMember(removeFolderMemberArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the remove folder member route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RemoveFolderMemberError"/>.</exception>
        public global::Dropbox.Api.Async.LaunchResultBase EndRemoveFolderMember(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<global::Dropbox.Api.Async.LaunchResultBase>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Revoke a shared link.</para>
        /// <para>Note that even after revoking a shared link to a file, the file may be
        /// accessible if there are shared links leading to any of the file parent folders. To
        /// list all shared links that enable access to a specific file, you can use the <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListSharedLinksAsync" /> with
        /// the file as the <see cref="Dropbox.Api.Sharing.ListSharedLinksArg.Path" />
        /// argument.</para>
        /// </summary>
        /// <param name="revokeSharedLinkArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RevokeSharedLinkError"/>.</exception>
        public t.Task RevokeSharedLinkAsync(RevokeSharedLinkArg revokeSharedLinkArg)
        {
            return this.Transport.SendRpcRequestAsync<RevokeSharedLinkArg, enc.Empty, RevokeSharedLinkError>(revokeSharedLinkArg, "api", "/sharing/revoke_shared_link", "user", global::Dropbox.Api.Sharing.RevokeSharedLinkArg.Encoder, enc.EmptyDecoder.Instance, global::Dropbox.Api.Sharing.RevokeSharedLinkError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the revoke shared link route.</para>
        /// </summary>
        /// <param name="revokeSharedLinkArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginRevokeSharedLink(RevokeSharedLinkArg revokeSharedLinkArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.RevokeSharedLinkAsync(revokeSharedLinkArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Revoke a shared link.</para>
        /// <para>Note that even after revoking a shared link to a file, the file may be
        /// accessible if there are shared links leading to any of the file parent folders. To
        /// list all shared links that enable access to a specific file, you can use the <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.ListSharedLinksAsync" /> with
        /// the file as the <see cref="Dropbox.Api.Sharing.ListSharedLinksArg.Path" />
        /// argument.</para>
        /// </summary>
        /// <param name="url">URL of the shared link.</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RevokeSharedLinkError"/>.</exception>
        public t.Task RevokeSharedLinkAsync(string url)
        {
            var revokeSharedLinkArg = new RevokeSharedLinkArg(url);

            return this.RevokeSharedLinkAsync(revokeSharedLinkArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the revoke shared link route.</para>
        /// </summary>
        /// <param name="url">URL of the shared link.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginRevokeSharedLink(string url,
                                                      sys.AsyncCallback callback,
                                                      object callbackState = null)
        {
            var revokeSharedLinkArg = new RevokeSharedLinkArg(url);

            return this.BeginRevokeSharedLink(revokeSharedLinkArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the revoke shared link route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RevokeSharedLinkError"/>.</exception>
        public void EndRevokeSharedLink(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }
        }

        /// <summary>
        /// <para>Change the inheritance policy of an existing Shared Folder. Only permitted
        /// for shared folders in a shared team root.</para>
        /// <para>If a <see cref="Dropbox.Api.Sharing.ShareFolderLaunch.AsyncJobId" /> is
        /// returned, you'll need to call <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.CheckShareJobStatusAsync" />
        /// until the action completes to get the metadata for the folder.</para>
        /// </summary>
        /// <param name="setAccessInheritanceArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="SetAccessInheritanceError"/>.</exception>
        public t.Task<ShareFolderLaunch> SetAccessInheritanceAsync(SetAccessInheritanceArg setAccessInheritanceArg)
        {
            return this.Transport.SendRpcRequestAsync<SetAccessInheritanceArg, ShareFolderLaunch, SetAccessInheritanceError>(setAccessInheritanceArg, "api", "/sharing/set_access_inheritance", "user", global::Dropbox.Api.Sharing.SetAccessInheritanceArg.Encoder, global::Dropbox.Api.Sharing.ShareFolderLaunch.Decoder, global::Dropbox.Api.Sharing.SetAccessInheritanceError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the set access inheritance route.</para>
        /// </summary>
        /// <param name="setAccessInheritanceArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginSetAccessInheritance(SetAccessInheritanceArg setAccessInheritanceArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.SetAccessInheritanceAsync(setAccessInheritanceArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Change the inheritance policy of an existing Shared Folder. Only permitted
        /// for shared folders in a shared team root.</para>
        /// <para>If a <see cref="Dropbox.Api.Sharing.ShareFolderLaunch.AsyncJobId" /> is
        /// returned, you'll need to call <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.CheckShareJobStatusAsync" />
        /// until the action completes to get the metadata for the folder.</para>
        /// </summary>
        /// <param name="sharedFolderId">The ID for the shared folder.</param>
        /// <param name="accessInheritance">The access inheritance settings for the
        /// folder.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="SetAccessInheritanceError"/>.</exception>
        public t.Task<ShareFolderLaunch> SetAccessInheritanceAsync(string sharedFolderId,
                                                                   AccessInheritance accessInheritance = null)
        {
            var setAccessInheritanceArg = new SetAccessInheritanceArg(sharedFolderId,
                                                                      accessInheritance);

            return this.SetAccessInheritanceAsync(setAccessInheritanceArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the set access inheritance route.</para>
        /// </summary>
        /// <param name="sharedFolderId">The ID for the shared folder.</param>
        /// <param name="accessInheritance">The access inheritance settings for the
        /// folder.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginSetAccessInheritance(string sharedFolderId,
                                                          AccessInheritance accessInheritance = null,
                                                          sys.AsyncCallback callback = null,
                                                          object callbackState = null)
        {
            var setAccessInheritanceArg = new SetAccessInheritanceArg(sharedFolderId,
                                                                      accessInheritance);

            return this.BeginSetAccessInheritance(setAccessInheritanceArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the set access inheritance route
        /// to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="SetAccessInheritanceError"/>.</exception>
        public ShareFolderLaunch EndSetAccessInheritance(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<ShareFolderLaunch>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Share a folder with collaborators.</para>
        /// <para>Most sharing will be completed synchronously. Large folders will be completed
        /// asynchronously. To make testing the async case repeatable, set
        /// `ShareFolderArg.force_async`.</para>
        /// <para>If a <see cref="Dropbox.Api.Sharing.ShareFolderLaunch.AsyncJobId" /> is
        /// returned, you'll need to call <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.CheckShareJobStatusAsync" />
        /// until the action completes to get the metadata for the folder.</para>
        /// </summary>
        /// <param name="shareFolderArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ShareFolderError"/>.</exception>
        public t.Task<ShareFolderLaunch> ShareFolderAsync(ShareFolderArg shareFolderArg)
        {
            return this.Transport.SendRpcRequestAsync<ShareFolderArg, ShareFolderLaunch, ShareFolderError>(shareFolderArg, "api", "/sharing/share_folder", "user", global::Dropbox.Api.Sharing.ShareFolderArg.Encoder, global::Dropbox.Api.Sharing.ShareFolderLaunch.Decoder, global::Dropbox.Api.Sharing.ShareFolderError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the share folder route.</para>
        /// </summary>
        /// <param name="shareFolderArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginShareFolder(ShareFolderArg shareFolderArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.ShareFolderAsync(shareFolderArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Share a folder with collaborators.</para>
        /// <para>Most sharing will be completed synchronously. Large folders will be completed
        /// asynchronously. To make testing the async case repeatable, set
        /// `ShareFolderArg.force_async`.</para>
        /// <para>If a <see cref="Dropbox.Api.Sharing.ShareFolderLaunch.AsyncJobId" /> is
        /// returned, you'll need to call <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.CheckShareJobStatusAsync" />
        /// until the action completes to get the metadata for the folder.</para>
        /// </summary>
        /// <param name="path">The path to the folder to share. If it does not exist, then a
        /// new one is created.</param>
        /// <param name="aclUpdatePolicy">Who can add and remove members of this shared
        /// folder.</param>
        /// <param name="forceAsync">Whether to force the share to happen
        /// asynchronously.</param>
        /// <param name="memberPolicy">Who can be a member of this shared folder. Only
        /// applicable if the current user is on a team.</param>
        /// <param name="sharedLinkPolicy">The policy to apply to shared links created for
        /// content inside this shared folder.  The current user must be on a team to set this
        /// policy to <see cref="Dropbox.Api.Sharing.SharedLinkPolicy.Members" />.</param>
        /// <param name="viewerInfoPolicy">Who can enable/disable viewer info for this shared
        /// folder.</param>
        /// <param name="accessInheritance">The access inheritance settings for the
        /// folder.</param>
        /// <param name="actions">A list of `FolderAction`s corresponding to
        /// `FolderPermission`s that should appear in the  response's <see
        /// cref="Dropbox.Api.Sharing.SharedFolderMetadata.Permissions" /> field describing the
        /// actions the  authenticated user can perform on the folder.</param>
        /// <param name="linkSettings">Settings on the link for this folder.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ShareFolderError"/>.</exception>
        public t.Task<ShareFolderLaunch> ShareFolderAsync(string path,
                                                          AclUpdatePolicy aclUpdatePolicy = null,
                                                          bool forceAsync = false,
                                                          MemberPolicy memberPolicy = null,
                                                          SharedLinkPolicy sharedLinkPolicy = null,
                                                          ViewerInfoPolicy viewerInfoPolicy = null,
                                                          AccessInheritance accessInheritance = null,
                                                          col.IEnumerable<FolderAction> actions = null,
                                                          LinkSettings linkSettings = null)
        {
            var shareFolderArg = new ShareFolderArg(path,
                                                    aclUpdatePolicy,
                                                    forceAsync,
                                                    memberPolicy,
                                                    sharedLinkPolicy,
                                                    viewerInfoPolicy,
                                                    accessInheritance,
                                                    actions,
                                                    linkSettings);

            return this.ShareFolderAsync(shareFolderArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the share folder route.</para>
        /// </summary>
        /// <param name="path">The path to the folder to share. If it does not exist, then a
        /// new one is created.</param>
        /// <param name="aclUpdatePolicy">Who can add and remove members of this shared
        /// folder.</param>
        /// <param name="forceAsync">Whether to force the share to happen
        /// asynchronously.</param>
        /// <param name="memberPolicy">Who can be a member of this shared folder. Only
        /// applicable if the current user is on a team.</param>
        /// <param name="sharedLinkPolicy">The policy to apply to shared links created for
        /// content inside this shared folder.  The current user must be on a team to set this
        /// policy to <see cref="Dropbox.Api.Sharing.SharedLinkPolicy.Members" />.</param>
        /// <param name="viewerInfoPolicy">Who can enable/disable viewer info for this shared
        /// folder.</param>
        /// <param name="accessInheritance">The access inheritance settings for the
        /// folder.</param>
        /// <param name="actions">A list of `FolderAction`s corresponding to
        /// `FolderPermission`s that should appear in the  response's <see
        /// cref="Dropbox.Api.Sharing.SharedFolderMetadata.Permissions" /> field describing the
        /// actions the  authenticated user can perform on the folder.</param>
        /// <param name="linkSettings">Settings on the link for this folder.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginShareFolder(string path,
                                                 AclUpdatePolicy aclUpdatePolicy = null,
                                                 bool forceAsync = false,
                                                 MemberPolicy memberPolicy = null,
                                                 SharedLinkPolicy sharedLinkPolicy = null,
                                                 ViewerInfoPolicy viewerInfoPolicy = null,
                                                 AccessInheritance accessInheritance = null,
                                                 col.IEnumerable<FolderAction> actions = null,
                                                 LinkSettings linkSettings = null,
                                                 sys.AsyncCallback callback = null,
                                                 object callbackState = null)
        {
            var shareFolderArg = new ShareFolderArg(path,
                                                    aclUpdatePolicy,
                                                    forceAsync,
                                                    memberPolicy,
                                                    sharedLinkPolicy,
                                                    viewerInfoPolicy,
                                                    accessInheritance,
                                                    actions,
                                                    linkSettings);

            return this.BeginShareFolder(shareFolderArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the share folder route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ShareFolderError"/>.</exception>
        public ShareFolderLaunch EndShareFolder(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<ShareFolderLaunch>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Transfer ownership of a shared folder to a member of the shared
        /// folder.</para>
        /// <para>User must have <see cref="Dropbox.Api.Sharing.AccessLevel.Owner" /> access to
        /// the shared folder to perform a transfer.</para>
        /// </summary>
        /// <param name="transferFolderArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="TransferFolderError"/>.</exception>
        public t.Task TransferFolderAsync(TransferFolderArg transferFolderArg)
        {
            return this.Transport.SendRpcRequestAsync<TransferFolderArg, enc.Empty, TransferFolderError>(transferFolderArg, "api", "/sharing/transfer_folder", "user", global::Dropbox.Api.Sharing.TransferFolderArg.Encoder, enc.EmptyDecoder.Instance, global::Dropbox.Api.Sharing.TransferFolderError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the transfer folder route.</para>
        /// </summary>
        /// <param name="transferFolderArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginTransferFolder(TransferFolderArg transferFolderArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.TransferFolderAsync(transferFolderArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Transfer ownership of a shared folder to a member of the shared
        /// folder.</para>
        /// <para>User must have <see cref="Dropbox.Api.Sharing.AccessLevel.Owner" /> access to
        /// the shared folder to perform a transfer.</para>
        /// </summary>
        /// <param name="sharedFolderId">The ID for the shared folder.</param>
        /// <param name="toDropboxId">A account or team member ID to transfer ownership
        /// to.</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="TransferFolderError"/>.</exception>
        public t.Task TransferFolderAsync(string sharedFolderId,
                                          string toDropboxId)
        {
            var transferFolderArg = new TransferFolderArg(sharedFolderId,
                                                          toDropboxId);

            return this.TransferFolderAsync(transferFolderArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the transfer folder route.</para>
        /// </summary>
        /// <param name="sharedFolderId">The ID for the shared folder.</param>
        /// <param name="toDropboxId">A account or team member ID to transfer ownership
        /// to.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginTransferFolder(string sharedFolderId,
                                                    string toDropboxId,
                                                    sys.AsyncCallback callback,
                                                    object callbackState = null)
        {
            var transferFolderArg = new TransferFolderArg(sharedFolderId,
                                                          toDropboxId);

            return this.BeginTransferFolder(transferFolderArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the transfer folder route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="TransferFolderError"/>.</exception>
        public void EndTransferFolder(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }
        }

        /// <summary>
        /// <para>The current user unmounts the designated folder. They can re-mount the folder
        /// at a later time using <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.MountFolderAsync" />.</para>
        /// </summary>
        /// <param name="unmountFolderArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="UnmountFolderError"/>.</exception>
        public t.Task UnmountFolderAsync(UnmountFolderArg unmountFolderArg)
        {
            return this.Transport.SendRpcRequestAsync<UnmountFolderArg, enc.Empty, UnmountFolderError>(unmountFolderArg, "api", "/sharing/unmount_folder", "user", global::Dropbox.Api.Sharing.UnmountFolderArg.Encoder, enc.EmptyDecoder.Instance, global::Dropbox.Api.Sharing.UnmountFolderError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the unmount folder route.</para>
        /// </summary>
        /// <param name="unmountFolderArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginUnmountFolder(UnmountFolderArg unmountFolderArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.UnmountFolderAsync(unmountFolderArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>The current user unmounts the designated folder. They can re-mount the folder
        /// at a later time using <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.MountFolderAsync" />.</para>
        /// </summary>
        /// <param name="sharedFolderId">The ID for the shared folder.</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="UnmountFolderError"/>.</exception>
        public t.Task UnmountFolderAsync(string sharedFolderId)
        {
            var unmountFolderArg = new UnmountFolderArg(sharedFolderId);

            return this.UnmountFolderAsync(unmountFolderArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the unmount folder route.</para>
        /// </summary>
        /// <param name="sharedFolderId">The ID for the shared folder.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginUnmountFolder(string sharedFolderId,
                                                   sys.AsyncCallback callback,
                                                   object callbackState = null)
        {
            var unmountFolderArg = new UnmountFolderArg(sharedFolderId);

            return this.BeginUnmountFolder(unmountFolderArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the unmount folder route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="UnmountFolderError"/>.</exception>
        public void EndUnmountFolder(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }
        }

        /// <summary>
        /// <para>Remove all members from this file. Does not remove inherited members.</para>
        /// </summary>
        /// <param name="unshareFileArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="UnshareFileError"/>.</exception>
        public t.Task UnshareFileAsync(UnshareFileArg unshareFileArg)
        {
            return this.Transport.SendRpcRequestAsync<UnshareFileArg, enc.Empty, UnshareFileError>(unshareFileArg, "api", "/sharing/unshare_file", "user", global::Dropbox.Api.Sharing.UnshareFileArg.Encoder, enc.EmptyDecoder.Instance, global::Dropbox.Api.Sharing.UnshareFileError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the unshare file route.</para>
        /// </summary>
        /// <param name="unshareFileArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginUnshareFile(UnshareFileArg unshareFileArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.UnshareFileAsync(unshareFileArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Remove all members from this file. Does not remove inherited members.</para>
        /// </summary>
        /// <param name="file">The file to unshare.</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="UnshareFileError"/>.</exception>
        public t.Task UnshareFileAsync(string file)
        {
            var unshareFileArg = new UnshareFileArg(file);

            return this.UnshareFileAsync(unshareFileArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the unshare file route.</para>
        /// </summary>
        /// <param name="file">The file to unshare.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginUnshareFile(string file,
                                                 sys.AsyncCallback callback,
                                                 object callbackState = null)
        {
            var unshareFileArg = new UnshareFileArg(file);

            return this.BeginUnshareFile(unshareFileArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the unshare file route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="UnshareFileError"/>.</exception>
        public void EndUnshareFile(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }
        }

        /// <summary>
        /// <para>Allows a shared folder owner to unshare the folder.</para>
        /// <para>You'll need to call <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.CheckJobStatusAsync" /> to
        /// determine if the action has completed successfully.</para>
        /// </summary>
        /// <param name="unshareFolderArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="UnshareFolderError"/>.</exception>
        public t.Task<global::Dropbox.Api.Async.LaunchEmptyResult> UnshareFolderAsync(UnshareFolderArg unshareFolderArg)
        {
            return this.Transport.SendRpcRequestAsync<UnshareFolderArg, global::Dropbox.Api.Async.LaunchEmptyResult, UnshareFolderError>(unshareFolderArg, "api", "/sharing/unshare_folder", "user", global::Dropbox.Api.Sharing.UnshareFolderArg.Encoder, global::Dropbox.Api.Async.LaunchEmptyResult.Decoder, global::Dropbox.Api.Sharing.UnshareFolderError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the unshare folder route.</para>
        /// </summary>
        /// <param name="unshareFolderArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginUnshareFolder(UnshareFolderArg unshareFolderArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.UnshareFolderAsync(unshareFolderArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Allows a shared folder owner to unshare the folder.</para>
        /// <para>You'll need to call <see
        /// cref="Dropbox.Api.Sharing.Routes.SharingUserRoutes.CheckJobStatusAsync" /> to
        /// determine if the action has completed successfully.</para>
        /// </summary>
        /// <param name="sharedFolderId">The ID for the shared folder.</param>
        /// <param name="leaveACopy">If true, members of this shared folder will get a copy of
        /// this folder after it's unshared. Otherwise, it will be removed from their Dropbox.
        /// The current user, who is an owner, will always retain their copy.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="UnshareFolderError"/>.</exception>
        public t.Task<global::Dropbox.Api.Async.LaunchEmptyResult> UnshareFolderAsync(string sharedFolderId,
                                                                                      bool leaveACopy = false)
        {
            var unshareFolderArg = new UnshareFolderArg(sharedFolderId,
                                                        leaveACopy);

            return this.UnshareFolderAsync(unshareFolderArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the unshare folder route.</para>
        /// </summary>
        /// <param name="sharedFolderId">The ID for the shared folder.</param>
        /// <param name="leaveACopy">If true, members of this shared folder will get a copy of
        /// this folder after it's unshared. Otherwise, it will be removed from their Dropbox.
        /// The current user, who is an owner, will always retain their copy.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginUnshareFolder(string sharedFolderId,
                                                   bool leaveACopy = false,
                                                   sys.AsyncCallback callback = null,
                                                   object callbackState = null)
        {
            var unshareFolderArg = new UnshareFolderArg(sharedFolderId,
                                                        leaveACopy);

            return this.BeginUnshareFolder(unshareFolderArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the unshare folder route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="UnshareFolderError"/>.</exception>
        public global::Dropbox.Api.Async.LaunchEmptyResult EndUnshareFolder(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<global::Dropbox.Api.Async.LaunchEmptyResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Changes a member's access on a shared file.</para>
        /// </summary>
        /// <param name="updateFileMemberArgs">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="FileMemberActionError"/>.</exception>
        public t.Task<MemberAccessLevelResult> UpdateFileMemberAsync(UpdateFileMemberArgs updateFileMemberArgs)
        {
            return this.Transport.SendRpcRequestAsync<UpdateFileMemberArgs, MemberAccessLevelResult, FileMemberActionError>(updateFileMemberArgs, "api", "/sharing/update_file_member", "user", global::Dropbox.Api.Sharing.UpdateFileMemberArgs.Encoder, global::Dropbox.Api.Sharing.MemberAccessLevelResult.Decoder, global::Dropbox.Api.Sharing.FileMemberActionError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the update file member route.</para>
        /// </summary>
        /// <param name="updateFileMemberArgs">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginUpdateFileMember(UpdateFileMemberArgs updateFileMemberArgs, sys.AsyncCallback callback, object state = null)
        {
            var task = this.UpdateFileMemberAsync(updateFileMemberArgs);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Changes a member's access on a shared file.</para>
        /// </summary>
        /// <param name="file">File for which we are changing a member's access.</param>
        /// <param name="member">The member whose access we are changing.</param>
        /// <param name="accessLevel">The new access level for the member.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="FileMemberActionError"/>.</exception>
        public t.Task<MemberAccessLevelResult> UpdateFileMemberAsync(string file,
                                                                     MemberSelector member,
                                                                     AccessLevel accessLevel)
        {
            var updateFileMemberArgs = new UpdateFileMemberArgs(file,
                                                                member,
                                                                accessLevel);

            return this.UpdateFileMemberAsync(updateFileMemberArgs);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the update file member route.</para>
        /// </summary>
        /// <param name="file">File for which we are changing a member's access.</param>
        /// <param name="member">The member whose access we are changing.</param>
        /// <param name="accessLevel">The new access level for the member.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginUpdateFileMember(string file,
                                                      MemberSelector member,
                                                      AccessLevel accessLevel,
                                                      sys.AsyncCallback callback,
                                                      object callbackState = null)
        {
            var updateFileMemberArgs = new UpdateFileMemberArgs(file,
                                                                member,
                                                                accessLevel);

            return this.BeginUpdateFileMember(updateFileMemberArgs, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the update file member route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="FileMemberActionError"/>.</exception>
        public MemberAccessLevelResult EndUpdateFileMember(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<MemberAccessLevelResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Allows an owner or editor of a shared folder to update another member's
        /// permissions.</para>
        /// </summary>
        /// <param name="updateFolderMemberArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="UpdateFolderMemberError"/>.</exception>
        public t.Task<MemberAccessLevelResult> UpdateFolderMemberAsync(UpdateFolderMemberArg updateFolderMemberArg)
        {
            return this.Transport.SendRpcRequestAsync<UpdateFolderMemberArg, MemberAccessLevelResult, UpdateFolderMemberError>(updateFolderMemberArg, "api", "/sharing/update_folder_member", "user", global::Dropbox.Api.Sharing.UpdateFolderMemberArg.Encoder, global::Dropbox.Api.Sharing.MemberAccessLevelResult.Decoder, global::Dropbox.Api.Sharing.UpdateFolderMemberError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the update folder member route.</para>
        /// </summary>
        /// <param name="updateFolderMemberArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginUpdateFolderMember(UpdateFolderMemberArg updateFolderMemberArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.UpdateFolderMemberAsync(updateFolderMemberArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Allows an owner or editor of a shared folder to update another member's
        /// permissions.</para>
        /// </summary>
        /// <param name="sharedFolderId">The ID for the shared folder.</param>
        /// <param name="member">The member of the shared folder to update.  Only the <see
        /// cref="Dropbox.Api.Sharing.MemberSelector.DropboxId" /> may be set at this
        /// time.</param>
        /// <param name="accessLevel">The new access level for <paramref name="member" />. <see
        /// cref="Dropbox.Api.Sharing.AccessLevel.Owner" /> is disallowed.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="UpdateFolderMemberError"/>.</exception>
        public t.Task<MemberAccessLevelResult> UpdateFolderMemberAsync(string sharedFolderId,
                                                                       MemberSelector member,
                                                                       AccessLevel accessLevel)
        {
            var updateFolderMemberArg = new UpdateFolderMemberArg(sharedFolderId,
                                                                  member,
                                                                  accessLevel);

            return this.UpdateFolderMemberAsync(updateFolderMemberArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the update folder member route.</para>
        /// </summary>
        /// <param name="sharedFolderId">The ID for the shared folder.</param>
        /// <param name="member">The member of the shared folder to update.  Only the <see
        /// cref="Dropbox.Api.Sharing.MemberSelector.DropboxId" /> may be set at this
        /// time.</param>
        /// <param name="accessLevel">The new access level for <paramref name="member" />. <see
        /// cref="Dropbox.Api.Sharing.AccessLevel.Owner" /> is disallowed.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginUpdateFolderMember(string sharedFolderId,
                                                        MemberSelector member,
                                                        AccessLevel accessLevel,
                                                        sys.AsyncCallback callback,
                                                        object callbackState = null)
        {
            var updateFolderMemberArg = new UpdateFolderMemberArg(sharedFolderId,
                                                                  member,
                                                                  accessLevel);

            return this.BeginUpdateFolderMember(updateFolderMemberArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the update folder member route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="UpdateFolderMemberError"/>.</exception>
        public MemberAccessLevelResult EndUpdateFolderMember(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<MemberAccessLevelResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Update the sharing policies for a shared folder.</para>
        /// <para>User must have <see cref="Dropbox.Api.Sharing.AccessLevel.Owner" /> access to
        /// the shared folder to update its policies.</para>
        /// </summary>
        /// <param name="updateFolderPolicyArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="UpdateFolderPolicyError"/>.</exception>
        public t.Task<SharedFolderMetadata> UpdateFolderPolicyAsync(UpdateFolderPolicyArg updateFolderPolicyArg)
        {
            return this.Transport.SendRpcRequestAsync<UpdateFolderPolicyArg, SharedFolderMetadata, UpdateFolderPolicyError>(updateFolderPolicyArg, "api", "/sharing/update_folder_policy", "user", global::Dropbox.Api.Sharing.UpdateFolderPolicyArg.Encoder, global::Dropbox.Api.Sharing.SharedFolderMetadata.Decoder, global::Dropbox.Api.Sharing.UpdateFolderPolicyError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the update folder policy route.</para>
        /// </summary>
        /// <param name="updateFolderPolicyArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginUpdateFolderPolicy(UpdateFolderPolicyArg updateFolderPolicyArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.UpdateFolderPolicyAsync(updateFolderPolicyArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Update the sharing policies for a shared folder.</para>
        /// <para>User must have <see cref="Dropbox.Api.Sharing.AccessLevel.Owner" /> access to
        /// the shared folder to update its policies.</para>
        /// </summary>
        /// <param name="sharedFolderId">The ID for the shared folder.</param>
        /// <param name="memberPolicy">Who can be a member of this shared folder. Only
        /// applicable if the current user is on a team.</param>
        /// <param name="aclUpdatePolicy">Who can add and remove members of this shared
        /// folder.</param>
        /// <param name="viewerInfoPolicy">Who can enable/disable viewer info for this shared
        /// folder.</param>
        /// <param name="sharedLinkPolicy">The policy to apply to shared links created for
        /// content inside this shared folder. The current user must be on a team to set this
        /// policy to <see cref="Dropbox.Api.Sharing.SharedLinkPolicy.Members" />.</param>
        /// <param name="linkSettings">Settings on the link for this folder.</param>
        /// <param name="actions">A list of `FolderAction`s corresponding to
        /// `FolderPermission`s that should appear in the  response's <see
        /// cref="Dropbox.Api.Sharing.SharedFolderMetadata.Permissions" /> field describing the
        /// actions the  authenticated user can perform on the folder.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="UpdateFolderPolicyError"/>.</exception>
        public t.Task<SharedFolderMetadata> UpdateFolderPolicyAsync(string sharedFolderId,
                                                                    MemberPolicy memberPolicy = null,
                                                                    AclUpdatePolicy aclUpdatePolicy = null,
                                                                    ViewerInfoPolicy viewerInfoPolicy = null,
                                                                    SharedLinkPolicy sharedLinkPolicy = null,
                                                                    LinkSettings linkSettings = null,
                                                                    col.IEnumerable<FolderAction> actions = null)
        {
            var updateFolderPolicyArg = new UpdateFolderPolicyArg(sharedFolderId,
                                                                  memberPolicy,
                                                                  aclUpdatePolicy,
                                                                  viewerInfoPolicy,
                                                                  sharedLinkPolicy,
                                                                  linkSettings,
                                                                  actions);

            return this.UpdateFolderPolicyAsync(updateFolderPolicyArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the update folder policy route.</para>
        /// </summary>
        /// <param name="sharedFolderId">The ID for the shared folder.</param>
        /// <param name="memberPolicy">Who can be a member of this shared folder. Only
        /// applicable if the current user is on a team.</param>
        /// <param name="aclUpdatePolicy">Who can add and remove members of this shared
        /// folder.</param>
        /// <param name="viewerInfoPolicy">Who can enable/disable viewer info for this shared
        /// folder.</param>
        /// <param name="sharedLinkPolicy">The policy to apply to shared links created for
        /// content inside this shared folder. The current user must be on a team to set this
        /// policy to <see cref="Dropbox.Api.Sharing.SharedLinkPolicy.Members" />.</param>
        /// <param name="linkSettings">Settings on the link for this folder.</param>
        /// <param name="actions">A list of `FolderAction`s corresponding to
        /// `FolderPermission`s that should appear in the  response's <see
        /// cref="Dropbox.Api.Sharing.SharedFolderMetadata.Permissions" /> field describing the
        /// actions the  authenticated user can perform on the folder.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginUpdateFolderPolicy(string sharedFolderId,
                                                        MemberPolicy memberPolicy = null,
                                                        AclUpdatePolicy aclUpdatePolicy = null,
                                                        ViewerInfoPolicy viewerInfoPolicy = null,
                                                        SharedLinkPolicy sharedLinkPolicy = null,
                                                        LinkSettings linkSettings = null,
                                                        col.IEnumerable<FolderAction> actions = null,
                                                        sys.AsyncCallback callback = null,
                                                        object callbackState = null)
        {
            var updateFolderPolicyArg = new UpdateFolderPolicyArg(sharedFolderId,
                                                                  memberPolicy,
                                                                  aclUpdatePolicy,
                                                                  viewerInfoPolicy,
                                                                  sharedLinkPolicy,
                                                                  linkSettings,
                                                                  actions);

            return this.BeginUpdateFolderPolicy(updateFolderPolicyArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the update folder policy route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="UpdateFolderPolicyError"/>.</exception>
        public SharedFolderMetadata EndUpdateFolderPolicy(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<SharedFolderMetadata>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }
    }
}
