// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamLog
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Policy for controlling whether team members can send team invites</para>
    /// </summary>
    public class MemberSendInvitePolicy
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<MemberSendInvitePolicy> Encoder = new MemberSendInvitePolicyEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<MemberSendInvitePolicy> Decoder = new MemberSendInvitePolicyDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="MemberSendInvitePolicy" />
        /// class.</para>
        /// </summary>
        public MemberSendInvitePolicy()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Disabled</para>
        /// </summary>
        public bool IsDisabled
        {
            get
            {
                return this is Disabled;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Disabled, or <c>null</c>.</para>
        /// </summary>
        public Disabled AsDisabled
        {
            get
            {
                return this as Disabled;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Everyone</para>
        /// </summary>
        public bool IsEveryone
        {
            get
            {
                return this is Everyone;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Everyone, or <c>null</c>.</para>
        /// </summary>
        public Everyone AsEveryone
        {
            get
            {
                return this as Everyone;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is SpecificMembers</para>
        /// </summary>
        public bool IsSpecificMembers
        {
            get
            {
                return this is SpecificMembers;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a SpecificMembers, or <c>null</c>.</para>
        /// </summary>
        public SpecificMembers AsSpecificMembers
        {
            get
            {
                return this as SpecificMembers;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="MemberSendInvitePolicy" />.</para>
        /// </summary>
        private class MemberSendInvitePolicyEncoder : enc.StructEncoder<MemberSendInvitePolicy>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(MemberSendInvitePolicy value, enc.IJsonWriter writer)
            {
                if (value is Disabled)
                {
                    WriteProperty(".tag", "disabled", writer, enc.StringEncoder.Instance);
                    Disabled.Encoder.EncodeFields((Disabled)value, writer);
                    return;
                }
                if (value is Everyone)
                {
                    WriteProperty(".tag", "everyone", writer, enc.StringEncoder.Instance);
                    Everyone.Encoder.EncodeFields((Everyone)value, writer);
                    return;
                }
                if (value is SpecificMembers)
                {
                    WriteProperty(".tag", "specific_members", writer, enc.StringEncoder.Instance);
                    SpecificMembers.Encoder.EncodeFields((SpecificMembers)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="MemberSendInvitePolicy" />.</para>
        /// </summary>
        private class MemberSendInvitePolicyDecoder : enc.UnionDecoder<MemberSendInvitePolicy>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="MemberSendInvitePolicy"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override MemberSendInvitePolicy Create()
            {
                return new MemberSendInvitePolicy();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override MemberSendInvitePolicy Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "disabled":
                        return Disabled.Decoder.DecodeFields(reader);
                    case "everyone":
                        return Everyone.Decoder.DecodeFields(reader);
                    case "specific_members":
                        return SpecificMembers.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The disabled object</para>
        /// </summary>
        public sealed class Disabled : MemberSendInvitePolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Disabled> Encoder = new DisabledEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Disabled> Decoder = new DisabledDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Disabled" /> class.</para>
            /// </summary>
            private Disabled()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Disabled</para>
            /// </summary>
            public static readonly Disabled Instance = new Disabled();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Disabled" />.</para>
            /// </summary>
            private class DisabledEncoder : enc.StructEncoder<Disabled>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Disabled value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Disabled" />.</para>
            /// </summary>
            private class DisabledDecoder : enc.StructDecoder<Disabled>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Disabled" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Disabled Create()
                {
                    return Disabled.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The everyone object</para>
        /// </summary>
        public sealed class Everyone : MemberSendInvitePolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Everyone> Encoder = new EveryoneEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Everyone> Decoder = new EveryoneDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Everyone" /> class.</para>
            /// </summary>
            private Everyone()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Everyone</para>
            /// </summary>
            public static readonly Everyone Instance = new Everyone();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Everyone" />.</para>
            /// </summary>
            private class EveryoneEncoder : enc.StructEncoder<Everyone>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Everyone value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Everyone" />.</para>
            /// </summary>
            private class EveryoneDecoder : enc.StructDecoder<Everyone>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Everyone" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Everyone Create()
                {
                    return Everyone.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The specific members object</para>
        /// </summary>
        public sealed class SpecificMembers : MemberSendInvitePolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<SpecificMembers> Encoder = new SpecificMembersEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<SpecificMembers> Decoder = new SpecificMembersDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="SpecificMembers" />
            /// class.</para>
            /// </summary>
            private SpecificMembers()
            {
            }

            /// <summary>
            /// <para>A singleton instance of SpecificMembers</para>
            /// </summary>
            public static readonly SpecificMembers Instance = new SpecificMembers();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="SpecificMembers" />.</para>
            /// </summary>
            private class SpecificMembersEncoder : enc.StructEncoder<SpecificMembers>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(SpecificMembers value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="SpecificMembers" />.</para>
            /// </summary>
            private class SpecificMembersDecoder : enc.StructDecoder<SpecificMembers>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="SpecificMembers" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override SpecificMembers Create()
                {
                    return SpecificMembers.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : MemberSendInvitePolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}
