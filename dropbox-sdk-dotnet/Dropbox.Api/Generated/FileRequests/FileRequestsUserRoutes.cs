// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.FileRequests.Routes
{
    using sys = System;
    using io = System.IO;
    using col = System.Collections.Generic;
    using t = System.Threading.Tasks;
    using tr = System.Threading;
    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The routes for the <see cref="N:Dropbox.Api.FileRequests"/> namespace</para>
    /// </summary>
    public class FileRequestsUserRoutes
    {
        /// <summary>
        /// <para>Initializes a new instance of the <see cref="FileRequestsUserRoutes" />
        /// class.</para>
        /// </summary>
        /// <param name="transport">The transport to use</param>
        internal FileRequestsUserRoutes(enc.ITransport transport)
        {
            this.Transport = transport;
        }

        /// <summary>
        /// <para>Gets the transport used for these routes</para>
        /// </summary>
        internal enc.ITransport Transport { get; private set; }

        /// <summary>
        /// <para>Returns the total number of file requests owned by this user. Includes both
        /// open and closed file requests.</para>
        /// </summary>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="CountFileRequestsError"/>.</exception>
        public t.Task<CountFileRequestsResult> CountAsync(tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<enc.Empty, CountFileRequestsResult, CountFileRequestsError>(enc.Empty.Instance, "api", "/file_requests/count", "user", enc.EmptyEncoder.Instance, global::Dropbox.Api.FileRequests.CountFileRequestsResult.Decoder, global::Dropbox.Api.FileRequests.CountFileRequestsError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the count route.</para>
        /// </summary>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginCount(sys.AsyncCallback callback, object state = null)
        {
            var task = this.CountAsync();

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the count route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="CountFileRequestsError"/>.</exception>
        public CountFileRequestsResult EndCount(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<CountFileRequestsResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Creates a file request for this user.</para>
        /// </summary>
        /// <param name="createFileRequestArgs">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="CreateFileRequestError"/>.</exception>
        public t.Task<FileRequest> CreateAsync(CreateFileRequestArgs createFileRequestArgs, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<CreateFileRequestArgs, FileRequest, CreateFileRequestError>(createFileRequestArgs, "api", "/file_requests/create", "user", global::Dropbox.Api.FileRequests.CreateFileRequestArgs.Encoder, global::Dropbox.Api.FileRequests.FileRequest.Decoder, global::Dropbox.Api.FileRequests.CreateFileRequestError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the create route.</para>
        /// </summary>
        /// <param name="createFileRequestArgs">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginCreate(CreateFileRequestArgs createFileRequestArgs, sys.AsyncCallback callback, object state = null)
        {
            var task = this.CreateAsync(createFileRequestArgs);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Creates a file request for this user.</para>
        /// </summary>
        /// <param name="title">The title of the file request. Must not be empty.</param>
        /// <param name="destination">The path of the folder in the Dropbox where uploaded
        /// files will be sent. For apps with the app folder permission, this will be relative
        /// to the app folder.</param>
        /// <param name="deadline">The deadline for the file request. Deadlines can only be set
        /// by Professional and Business accounts.</param>
        /// <param name="open">Whether or not the file request should be open. If the file
        /// request is closed, it will not accept any file submissions, but it can be opened
        /// later.</param>
        /// <param name="description">A description of the file request.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="CreateFileRequestError"/>.</exception>
        public t.Task<FileRequest> CreateAsync(string title,
                                               string destination,
                                               FileRequestDeadline deadline = null,
                                               bool open = true,
                                               string description = null,
                                               tr.CancellationToken cancellationToken = default)
        {
            var createFileRequestArgs = new CreateFileRequestArgs(title,
                                                                  destination,
                                                                  deadline,
                                                                  open,
                                                                  description);

            return this.CreateAsync(createFileRequestArgs, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the create route.</para>
        /// </summary>
        /// <param name="title">The title of the file request. Must not be empty.</param>
        /// <param name="destination">The path of the folder in the Dropbox where uploaded
        /// files will be sent. For apps with the app folder permission, this will be relative
        /// to the app folder.</param>
        /// <param name="deadline">The deadline for the file request. Deadlines can only be set
        /// by Professional and Business accounts.</param>
        /// <param name="open">Whether or not the file request should be open. If the file
        /// request is closed, it will not accept any file submissions, but it can be opened
        /// later.</param>
        /// <param name="description">A description of the file request.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginCreate(string title,
                                            string destination,
                                            FileRequestDeadline deadline = null,
                                            bool open = true,
                                            string description = null,
                                            sys.AsyncCallback callback = null,
                                            object callbackState = null)
        {
            var createFileRequestArgs = new CreateFileRequestArgs(title,
                                                                  destination,
                                                                  deadline,
                                                                  open,
                                                                  description);

            return this.BeginCreate(createFileRequestArgs, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the create route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="CreateFileRequestError"/>.</exception>
        public FileRequest EndCreate(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<FileRequest>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Delete a batch of closed file requests.</para>
        /// </summary>
        /// <param name="deleteFileRequestArgs">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DeleteFileRequestError"/>.</exception>
        public t.Task<DeleteFileRequestsResult> DeleteAsync(DeleteFileRequestArgs deleteFileRequestArgs, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<DeleteFileRequestArgs, DeleteFileRequestsResult, DeleteFileRequestError>(deleteFileRequestArgs, "api", "/file_requests/delete", "user", global::Dropbox.Api.FileRequests.DeleteFileRequestArgs.Encoder, global::Dropbox.Api.FileRequests.DeleteFileRequestsResult.Decoder, global::Dropbox.Api.FileRequests.DeleteFileRequestError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the delete route.</para>
        /// </summary>
        /// <param name="deleteFileRequestArgs">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginDelete(DeleteFileRequestArgs deleteFileRequestArgs, sys.AsyncCallback callback, object state = null)
        {
            var task = this.DeleteAsync(deleteFileRequestArgs);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Delete a batch of closed file requests.</para>
        /// </summary>
        /// <param name="ids">List IDs of the file requests to delete.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DeleteFileRequestError"/>.</exception>
        public t.Task<DeleteFileRequestsResult> DeleteAsync(col.IEnumerable<string> ids,
                                                            tr.CancellationToken cancellationToken = default)
        {
            var deleteFileRequestArgs = new DeleteFileRequestArgs(ids);

            return this.DeleteAsync(deleteFileRequestArgs, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the delete route.</para>
        /// </summary>
        /// <param name="ids">List IDs of the file requests to delete.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginDelete(col.IEnumerable<string> ids,
                                            sys.AsyncCallback callback,
                                            object callbackState = null)
        {
            var deleteFileRequestArgs = new DeleteFileRequestArgs(ids);

            return this.BeginDelete(deleteFileRequestArgs, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the delete route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DeleteFileRequestError"/>.</exception>
        public DeleteFileRequestsResult EndDelete(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<DeleteFileRequestsResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Delete all closed file requests owned by this user.</para>
        /// </summary>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DeleteAllClosedFileRequestsError"/>.</exception>
        public t.Task<DeleteAllClosedFileRequestsResult> DeleteAllClosedAsync(tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<enc.Empty, DeleteAllClosedFileRequestsResult, DeleteAllClosedFileRequestsError>(enc.Empty.Instance, "api", "/file_requests/delete_all_closed", "user", enc.EmptyEncoder.Instance, global::Dropbox.Api.FileRequests.DeleteAllClosedFileRequestsResult.Decoder, global::Dropbox.Api.FileRequests.DeleteAllClosedFileRequestsError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the delete all closed route.</para>
        /// </summary>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginDeleteAllClosed(sys.AsyncCallback callback, object state = null)
        {
            var task = this.DeleteAllClosedAsync();

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the delete all closed route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DeleteAllClosedFileRequestsError"/>.</exception>
        public DeleteAllClosedFileRequestsResult EndDeleteAllClosed(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<DeleteAllClosedFileRequestsResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Returns the specified file request.</para>
        /// </summary>
        /// <param name="getFileRequestArgs">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GetFileRequestError"/>.</exception>
        public t.Task<FileRequest> GetAsync(GetFileRequestArgs getFileRequestArgs, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<GetFileRequestArgs, FileRequest, GetFileRequestError>(getFileRequestArgs, "api", "/file_requests/get", "user", global::Dropbox.Api.FileRequests.GetFileRequestArgs.Encoder, global::Dropbox.Api.FileRequests.FileRequest.Decoder, global::Dropbox.Api.FileRequests.GetFileRequestError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the get route.</para>
        /// </summary>
        /// <param name="getFileRequestArgs">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGet(GetFileRequestArgs getFileRequestArgs, sys.AsyncCallback callback, object state = null)
        {
            var task = this.GetAsync(getFileRequestArgs);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Returns the specified file request.</para>
        /// </summary>
        /// <param name="id">The ID of the file request to retrieve.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GetFileRequestError"/>.</exception>
        public t.Task<FileRequest> GetAsync(string id,
                                            tr.CancellationToken cancellationToken = default)
        {
            var getFileRequestArgs = new GetFileRequestArgs(id);

            return this.GetAsync(getFileRequestArgs, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the get route.</para>
        /// </summary>
        /// <param name="id">The ID of the file request to retrieve.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginGet(string id,
                                         sys.AsyncCallback callback,
                                         object callbackState = null)
        {
            var getFileRequestArgs = new GetFileRequestArgs(id);

            return this.BeginGet(getFileRequestArgs, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the get route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="GetFileRequestError"/>.</exception>
        public FileRequest EndGet(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<FileRequest>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Returns a list of file requests owned by this user. For apps with the app
        /// folder permission, this will only return file requests with destinations in the app
        /// folder.</para>
        /// </summary>
        /// <param name="listFileRequestsArg">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListFileRequestsError"/>.</exception>
        public t.Task<ListFileRequestsV2Result> ListV2Async(ListFileRequestsArg listFileRequestsArg, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<ListFileRequestsArg, ListFileRequestsV2Result, ListFileRequestsError>(listFileRequestsArg, "api", "/file_requests/list_v2", "user", global::Dropbox.Api.FileRequests.ListFileRequestsArg.Encoder, global::Dropbox.Api.FileRequests.ListFileRequestsV2Result.Decoder, global::Dropbox.Api.FileRequests.ListFileRequestsError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the list route.</para>
        /// </summary>
        /// <param name="listFileRequestsArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginListV2(ListFileRequestsArg listFileRequestsArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.ListV2Async(listFileRequestsArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Returns a list of file requests owned by this user. For apps with the app
        /// folder permission, this will only return file requests with destinations in the app
        /// folder.</para>
        /// </summary>
        /// <param name="limit">The maximum number of file requests that should be returned per
        /// request.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListFileRequestsError"/>.</exception>
        public t.Task<ListFileRequestsV2Result> ListV2Async(ulong limit = 1000,
                                                            tr.CancellationToken cancellationToken = default)
        {
            var listFileRequestsArg = new ListFileRequestsArg(limit);

            return this.ListV2Async(listFileRequestsArg, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the list route.</para>
        /// </summary>
        /// <param name="limit">The maximum number of file requests that should be returned per
        /// request.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginListV2(ulong limit = 1000,
                                            sys.AsyncCallback callback = null,
                                            object callbackState = null)
        {
            var listFileRequestsArg = new ListFileRequestsArg(limit);

            return this.BeginListV2(listFileRequestsArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the list route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListFileRequestsError"/>.</exception>
        public ListFileRequestsV2Result EndListV2(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<ListFileRequestsV2Result>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Returns a list of file requests owned by this user. For apps with the app
        /// folder permission, this will only return file requests with destinations in the app
        /// folder.</para>
        /// </summary>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListFileRequestsError"/>.</exception>
        public t.Task<ListFileRequestsResult> ListAsync(tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<enc.Empty, ListFileRequestsResult, ListFileRequestsError>(enc.Empty.Instance, "api", "/file_requests/list", "user", enc.EmptyEncoder.Instance, global::Dropbox.Api.FileRequests.ListFileRequestsResult.Decoder, global::Dropbox.Api.FileRequests.ListFileRequestsError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the list route.</para>
        /// </summary>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginList(sys.AsyncCallback callback, object state = null)
        {
            var task = this.ListAsync();

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the list route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListFileRequestsError"/>.</exception>
        public ListFileRequestsResult EndList(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<ListFileRequestsResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Once a cursor has been retrieved from <see
        /// cref="Dropbox.Api.FileRequests.Routes.FileRequestsUserRoutes.ListV2Async" />, use
        /// this to paginate through all file requests. The cursor must come from a previous
        /// call to <see
        /// cref="Dropbox.Api.FileRequests.Routes.FileRequestsUserRoutes.ListV2Async" /> or
        /// <see
        /// cref="Dropbox.Api.FileRequests.Routes.FileRequestsUserRoutes.ListContinueAsync"
        /// />.</para>
        /// </summary>
        /// <param name="listFileRequestsContinueArg">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListFileRequestsContinueError"/>.</exception>
        public t.Task<ListFileRequestsV2Result> ListContinueAsync(ListFileRequestsContinueArg listFileRequestsContinueArg, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<ListFileRequestsContinueArg, ListFileRequestsV2Result, ListFileRequestsContinueError>(listFileRequestsContinueArg, "api", "/file_requests/list/continue", "user", global::Dropbox.Api.FileRequests.ListFileRequestsContinueArg.Encoder, global::Dropbox.Api.FileRequests.ListFileRequestsV2Result.Decoder, global::Dropbox.Api.FileRequests.ListFileRequestsContinueError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the list continue route.</para>
        /// </summary>
        /// <param name="listFileRequestsContinueArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginListContinue(ListFileRequestsContinueArg listFileRequestsContinueArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.ListContinueAsync(listFileRequestsContinueArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Once a cursor has been retrieved from <see
        /// cref="Dropbox.Api.FileRequests.Routes.FileRequestsUserRoutes.ListV2Async" />, use
        /// this to paginate through all file requests. The cursor must come from a previous
        /// call to <see
        /// cref="Dropbox.Api.FileRequests.Routes.FileRequestsUserRoutes.ListV2Async" /> or
        /// <see
        /// cref="Dropbox.Api.FileRequests.Routes.FileRequestsUserRoutes.ListContinueAsync"
        /// />.</para>
        /// </summary>
        /// <param name="cursor">The cursor returned by the previous API call specified in the
        /// endpoint description.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListFileRequestsContinueError"/>.</exception>
        public t.Task<ListFileRequestsV2Result> ListContinueAsync(string cursor,
                                                                  tr.CancellationToken cancellationToken = default)
        {
            var listFileRequestsContinueArg = new ListFileRequestsContinueArg(cursor);

            return this.ListContinueAsync(listFileRequestsContinueArg, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the list continue route.</para>
        /// </summary>
        /// <param name="cursor">The cursor returned by the previous API call specified in the
        /// endpoint description.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginListContinue(string cursor,
                                                  sys.AsyncCallback callback,
                                                  object callbackState = null)
        {
            var listFileRequestsContinueArg = new ListFileRequestsContinueArg(cursor);

            return this.BeginListContinue(listFileRequestsContinueArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the list continue route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ListFileRequestsContinueError"/>.</exception>
        public ListFileRequestsV2Result EndListContinue(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<ListFileRequestsV2Result>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Update a file request.</para>
        /// </summary>
        /// <param name="updateFileRequestArgs">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="UpdateFileRequestError"/>.</exception>
        public t.Task<FileRequest> UpdateAsync(UpdateFileRequestArgs updateFileRequestArgs, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<UpdateFileRequestArgs, FileRequest, UpdateFileRequestError>(updateFileRequestArgs, "api", "/file_requests/update", "user", global::Dropbox.Api.FileRequests.UpdateFileRequestArgs.Encoder, global::Dropbox.Api.FileRequests.FileRequest.Decoder, global::Dropbox.Api.FileRequests.UpdateFileRequestError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the update route.</para>
        /// </summary>
        /// <param name="updateFileRequestArgs">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginUpdate(UpdateFileRequestArgs updateFileRequestArgs, sys.AsyncCallback callback, object state = null)
        {
            var task = this.UpdateAsync(updateFileRequestArgs);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Update a file request.</para>
        /// </summary>
        /// <param name="id">The ID of the file request to update.</param>
        /// <param name="title">The new title of the file request. Must not be empty.</param>
        /// <param name="destination">The new path of the folder in the Dropbox where uploaded
        /// files will be sent. For apps with the app folder permission, this will be relative
        /// to the app folder.</param>
        /// <param name="deadline">The new deadline for the file request. Deadlines can only be
        /// set by Professional and Business accounts.</param>
        /// <param name="open">Whether to set this file request as open or closed.</param>
        /// <param name="description">The description of the file request.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="UpdateFileRequestError"/>.</exception>
        public t.Task<FileRequest> UpdateAsync(string id,
                                               string title = null,
                                               string destination = null,
                                               UpdateFileRequestDeadline deadline = null,
                                               bool? open = null,
                                               string description = null,
                                               tr.CancellationToken cancellationToken = default)
        {
            var updateFileRequestArgs = new UpdateFileRequestArgs(id,
                                                                  title,
                                                                  destination,
                                                                  deadline,
                                                                  open,
                                                                  description);

            return this.UpdateAsync(updateFileRequestArgs, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the update route.</para>
        /// </summary>
        /// <param name="id">The ID of the file request to update.</param>
        /// <param name="title">The new title of the file request. Must not be empty.</param>
        /// <param name="destination">The new path of the folder in the Dropbox where uploaded
        /// files will be sent. For apps with the app folder permission, this will be relative
        /// to the app folder.</param>
        /// <param name="deadline">The new deadline for the file request. Deadlines can only be
        /// set by Professional and Business accounts.</param>
        /// <param name="open">Whether to set this file request as open or closed.</param>
        /// <param name="description">The description of the file request.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginUpdate(string id,
                                            string title = null,
                                            string destination = null,
                                            UpdateFileRequestDeadline deadline = null,
                                            bool? open = null,
                                            string description = null,
                                            sys.AsyncCallback callback = null,
                                            object callbackState = null)
        {
            var updateFileRequestArgs = new UpdateFileRequestArgs(id,
                                                                  title,
                                                                  destination,
                                                                  deadline,
                                                                  open,
                                                                  description);

            return this.BeginUpdate(updateFileRequestArgs, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the update route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="UpdateFileRequestError"/>.</exception>
        public FileRequest EndUpdate(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<FileRequest>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }
    }
}
