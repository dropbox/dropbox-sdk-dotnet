// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamLog
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>External Drive Backup eligibility status</para>
    /// </summary>
    public class ExternalDriveBackupEligibilityStatus
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<ExternalDriveBackupEligibilityStatus> Encoder = new ExternalDriveBackupEligibilityStatusEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<ExternalDriveBackupEligibilityStatus> Decoder = new ExternalDriveBackupEligibilityStatusDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see
        /// cref="ExternalDriveBackupEligibilityStatus" /> class.</para>
        /// </summary>
        public ExternalDriveBackupEligibilityStatus()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is ExceedLicenseCap</para>
        /// </summary>
        public bool IsExceedLicenseCap
        {
            get
            {
                return this is ExceedLicenseCap;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a ExceedLicenseCap, or <c>null</c>.</para>
        /// </summary>
        public ExceedLicenseCap AsExceedLicenseCap
        {
            get
            {
                return this as ExceedLicenseCap;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Success</para>
        /// </summary>
        public bool IsSuccess
        {
            get
            {
                return this is Success;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Success, or <c>null</c>.</para>
        /// </summary>
        public Success AsSuccess
        {
            get
            {
                return this as Success;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="ExternalDriveBackupEligibilityStatus" />.</para>
        /// </summary>
        private class ExternalDriveBackupEligibilityStatusEncoder : enc.StructEncoder<ExternalDriveBackupEligibilityStatus>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(ExternalDriveBackupEligibilityStatus value, enc.IJsonWriter writer)
            {
                if (value is ExceedLicenseCap)
                {
                    WriteProperty(".tag", "exceed_license_cap", writer, enc.StringEncoder.Instance);
                    ExceedLicenseCap.Encoder.EncodeFields((ExceedLicenseCap)value, writer);
                    return;
                }
                if (value is Success)
                {
                    WriteProperty(".tag", "success", writer, enc.StringEncoder.Instance);
                    Success.Encoder.EncodeFields((Success)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="ExternalDriveBackupEligibilityStatus" />.</para>
        /// </summary>
        private class ExternalDriveBackupEligibilityStatusDecoder : enc.UnionDecoder<ExternalDriveBackupEligibilityStatus>
        {
            /// <summary>
            /// <para>Create a new instance of type <see
            /// cref="ExternalDriveBackupEligibilityStatus" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override ExternalDriveBackupEligibilityStatus Create()
            {
                return new ExternalDriveBackupEligibilityStatus();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override ExternalDriveBackupEligibilityStatus Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "exceed_license_cap":
                        return ExceedLicenseCap.Decoder.DecodeFields(reader);
                    case "success":
                        return Success.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The exceed license cap object</para>
        /// </summary>
        public sealed class ExceedLicenseCap : ExternalDriveBackupEligibilityStatus
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<ExceedLicenseCap> Encoder = new ExceedLicenseCapEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<ExceedLicenseCap> Decoder = new ExceedLicenseCapDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="ExceedLicenseCap" />
            /// class.</para>
            /// </summary>
            private ExceedLicenseCap()
            {
            }

            /// <summary>
            /// <para>A singleton instance of ExceedLicenseCap</para>
            /// </summary>
            public static readonly ExceedLicenseCap Instance = new ExceedLicenseCap();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="ExceedLicenseCap" />.</para>
            /// </summary>
            private class ExceedLicenseCapEncoder : enc.StructEncoder<ExceedLicenseCap>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(ExceedLicenseCap value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="ExceedLicenseCap" />.</para>
            /// </summary>
            private class ExceedLicenseCapDecoder : enc.StructDecoder<ExceedLicenseCap>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="ExceedLicenseCap" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override ExceedLicenseCap Create()
                {
                    return ExceedLicenseCap.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The success object</para>
        /// </summary>
        public sealed class Success : ExternalDriveBackupEligibilityStatus
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Success> Encoder = new SuccessEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Success> Decoder = new SuccessDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Success" /> class.</para>
            /// </summary>
            private Success()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Success</para>
            /// </summary>
            public static readonly Success Instance = new Success();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Success" />.</para>
            /// </summary>
            private class SuccessEncoder : enc.StructEncoder<Success>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Success value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Success" />.</para>
            /// </summary>
            private class SuccessDecoder : enc.StructDecoder<Success>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Success" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Success Create()
                {
                    return Success.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : ExternalDriveBackupEligibilityStatus
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}
