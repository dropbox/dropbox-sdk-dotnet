// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Team
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The sharing allowlist remove error object</para>
    /// </summary>
    public class SharingAllowlistRemoveError
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<SharingAllowlistRemoveError> Encoder = new SharingAllowlistRemoveErrorEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<SharingAllowlistRemoveError> Decoder = new SharingAllowlistRemoveErrorDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="SharingAllowlistRemoveError" />
        /// class.</para>
        /// </summary>
        public SharingAllowlistRemoveError()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is MalformedEntry</para>
        /// </summary>
        public bool IsMalformedEntry
        {
            get
            {
                return this is MalformedEntry;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a MalformedEntry, or <c>null</c>.</para>
        /// </summary>
        public MalformedEntry AsMalformedEntry
        {
            get
            {
                return this as MalformedEntry;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is EntriesDoNotExist</para>
        /// </summary>
        public bool IsEntriesDoNotExist
        {
            get
            {
                return this is EntriesDoNotExist;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a EntriesDoNotExist, or <c>null</c>.</para>
        /// </summary>
        public EntriesDoNotExist AsEntriesDoNotExist
        {
            get
            {
                return this as EntriesDoNotExist;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is NoEntriesProvided</para>
        /// </summary>
        public bool IsNoEntriesProvided
        {
            get
            {
                return this is NoEntriesProvided;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a NoEntriesProvided, or <c>null</c>.</para>
        /// </summary>
        public NoEntriesProvided AsNoEntriesProvided
        {
            get
            {
                return this as NoEntriesProvided;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is
        /// TooManyEntriesProvided</para>
        /// </summary>
        public bool IsTooManyEntriesProvided
        {
            get
            {
                return this is TooManyEntriesProvided;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TooManyEntriesProvided, or <c>null</c>.</para>
        /// </summary>
        public TooManyEntriesProvided AsTooManyEntriesProvided
        {
            get
            {
                return this as TooManyEntriesProvided;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is UnknownError</para>
        /// </summary>
        public bool IsUnknownError
        {
            get
            {
                return this is UnknownError;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a UnknownError, or <c>null</c>.</para>
        /// </summary>
        public UnknownError AsUnknownError
        {
            get
            {
                return this as UnknownError;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="SharingAllowlistRemoveError" />.</para>
        /// </summary>
        private class SharingAllowlistRemoveErrorEncoder : enc.StructEncoder<SharingAllowlistRemoveError>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(SharingAllowlistRemoveError value, enc.IJsonWriter writer)
            {
                if (value is MalformedEntry)
                {
                    WriteProperty(".tag", "malformed_entry", writer, enc.StringEncoder.Instance);
                    MalformedEntry.Encoder.EncodeFields((MalformedEntry)value, writer);
                    return;
                }
                if (value is EntriesDoNotExist)
                {
                    WriteProperty(".tag", "entries_do_not_exist", writer, enc.StringEncoder.Instance);
                    EntriesDoNotExist.Encoder.EncodeFields((EntriesDoNotExist)value, writer);
                    return;
                }
                if (value is NoEntriesProvided)
                {
                    WriteProperty(".tag", "no_entries_provided", writer, enc.StringEncoder.Instance);
                    NoEntriesProvided.Encoder.EncodeFields((NoEntriesProvided)value, writer);
                    return;
                }
                if (value is TooManyEntriesProvided)
                {
                    WriteProperty(".tag", "too_many_entries_provided", writer, enc.StringEncoder.Instance);
                    TooManyEntriesProvided.Encoder.EncodeFields((TooManyEntriesProvided)value, writer);
                    return;
                }
                if (value is UnknownError)
                {
                    WriteProperty(".tag", "unknown_error", writer, enc.StringEncoder.Instance);
                    UnknownError.Encoder.EncodeFields((UnknownError)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="SharingAllowlistRemoveError" />.</para>
        /// </summary>
        private class SharingAllowlistRemoveErrorDecoder : enc.UnionDecoder<SharingAllowlistRemoveError>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="SharingAllowlistRemoveError"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override SharingAllowlistRemoveError Create()
            {
                return new SharingAllowlistRemoveError();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override SharingAllowlistRemoveError Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "malformed_entry":
                        return MalformedEntry.Decoder.DecodeFields(reader);
                    case "entries_do_not_exist":
                        return EntriesDoNotExist.Decoder.DecodeFields(reader);
                    case "no_entries_provided":
                        return NoEntriesProvided.Decoder.DecodeFields(reader);
                    case "too_many_entries_provided":
                        return TooManyEntriesProvided.Decoder.DecodeFields(reader);
                    case "unknown_error":
                        return UnknownError.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>One of provided values is not valid.</para>
        /// </summary>
        public sealed class MalformedEntry : SharingAllowlistRemoveError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<MalformedEntry> Encoder = new MalformedEntryEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<MalformedEntry> Decoder = new MalformedEntryDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="MalformedEntry" />
            /// class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public MalformedEntry(string value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="MalformedEntry" />
            /// class.</para>
            /// </summary>
            private MalformedEntry()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public string Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="MalformedEntry" />.</para>
            /// </summary>
            private class MalformedEntryEncoder : enc.StructEncoder<MalformedEntry>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(MalformedEntry value, enc.IJsonWriter writer)
                {
                    WriteProperty("malformed_entry", value.Value, writer, enc.StringEncoder.Instance);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="MalformedEntry" />.</para>
            /// </summary>
            private class MalformedEntryDecoder : enc.StructDecoder<MalformedEntry>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="MalformedEntry" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override MalformedEntry Create()
                {
                    return new MalformedEntry();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(MalformedEntry value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "malformed_entry":
                            value.Value = enc.StringDecoder.Instance.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>One or more provided values do not exist.</para>
        /// </summary>
        public sealed class EntriesDoNotExist : SharingAllowlistRemoveError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<EntriesDoNotExist> Encoder = new EntriesDoNotExistEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<EntriesDoNotExist> Decoder = new EntriesDoNotExistDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="EntriesDoNotExist" />
            /// class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public EntriesDoNotExist(string value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="EntriesDoNotExist" />
            /// class.</para>
            /// </summary>
            private EntriesDoNotExist()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public string Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="EntriesDoNotExist" />.</para>
            /// </summary>
            private class EntriesDoNotExistEncoder : enc.StructEncoder<EntriesDoNotExist>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(EntriesDoNotExist value, enc.IJsonWriter writer)
                {
                    WriteProperty("entries_do_not_exist", value.Value, writer, enc.StringEncoder.Instance);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="EntriesDoNotExist" />.</para>
            /// </summary>
            private class EntriesDoNotExistDecoder : enc.StructDecoder<EntriesDoNotExist>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="EntriesDoNotExist"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override EntriesDoNotExist Create()
                {
                    return new EntriesDoNotExist();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(EntriesDoNotExist value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "entries_do_not_exist":
                            value.Value = enc.StringDecoder.Instance.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>Neither single domain nor email provided.</para>
        /// </summary>
        public sealed class NoEntriesProvided : SharingAllowlistRemoveError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<NoEntriesProvided> Encoder = new NoEntriesProvidedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<NoEntriesProvided> Decoder = new NoEntriesProvidedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="NoEntriesProvided" />
            /// class.</para>
            /// </summary>
            private NoEntriesProvided()
            {
            }

            /// <summary>
            /// <para>A singleton instance of NoEntriesProvided</para>
            /// </summary>
            public static readonly NoEntriesProvided Instance = new NoEntriesProvided();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="NoEntriesProvided" />.</para>
            /// </summary>
            private class NoEntriesProvidedEncoder : enc.StructEncoder<NoEntriesProvided>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(NoEntriesProvided value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="NoEntriesProvided" />.</para>
            /// </summary>
            private class NoEntriesProvidedDecoder : enc.StructDecoder<NoEntriesProvided>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="NoEntriesProvided"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override NoEntriesProvided Create()
                {
                    return NoEntriesProvided.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Too many entries provided within one call.</para>
        /// </summary>
        public sealed class TooManyEntriesProvided : SharingAllowlistRemoveError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<TooManyEntriesProvided> Encoder = new TooManyEntriesProvidedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<TooManyEntriesProvided> Decoder = new TooManyEntriesProvidedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TooManyEntriesProvided" />
            /// class.</para>
            /// </summary>
            private TooManyEntriesProvided()
            {
            }

            /// <summary>
            /// <para>A singleton instance of TooManyEntriesProvided</para>
            /// </summary>
            public static readonly TooManyEntriesProvided Instance = new TooManyEntriesProvided();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="TooManyEntriesProvided" />.</para>
            /// </summary>
            private class TooManyEntriesProvidedEncoder : enc.StructEncoder<TooManyEntriesProvided>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(TooManyEntriesProvided value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="TooManyEntriesProvided" />.</para>
            /// </summary>
            private class TooManyEntriesProvidedDecoder : enc.StructDecoder<TooManyEntriesProvided>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="TooManyEntriesProvided"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override TooManyEntriesProvided Create()
                {
                    return TooManyEntriesProvided.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Unknown error.</para>
        /// </summary>
        public sealed class UnknownError : SharingAllowlistRemoveError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<UnknownError> Encoder = new UnknownErrorEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<UnknownError> Decoder = new UnknownErrorDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="UnknownError" />
            /// class.</para>
            /// </summary>
            private UnknownError()
            {
            }

            /// <summary>
            /// <para>A singleton instance of UnknownError</para>
            /// </summary>
            public static readonly UnknownError Instance = new UnknownError();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="UnknownError" />.</para>
            /// </summary>
            private class UnknownErrorEncoder : enc.StructEncoder<UnknownError>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(UnknownError value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="UnknownError" />.</para>
            /// </summary>
            private class UnknownErrorDecoder : enc.StructDecoder<UnknownError>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="UnknownError" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override UnknownError Create()
                {
                    return UnknownError.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : SharingAllowlistRemoveError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}
