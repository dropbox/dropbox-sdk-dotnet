// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Team
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Describes which team-related admin permissions a user has.</para>
    /// </summary>
    public class AdminTier
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<AdminTier> Encoder = new AdminTierEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<AdminTier> Decoder = new AdminTierDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="AdminTier" /> class.</para>
        /// </summary>
        public AdminTier()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is TeamAdmin</para>
        /// </summary>
        public bool IsTeamAdmin
        {
            get
            {
                return this is TeamAdmin;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TeamAdmin, or <c>null</c>.</para>
        /// </summary>
        public TeamAdmin AsTeamAdmin
        {
            get
            {
                return this as TeamAdmin;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is UserManagementAdmin</para>
        /// </summary>
        public bool IsUserManagementAdmin
        {
            get
            {
                return this is UserManagementAdmin;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a UserManagementAdmin, or <c>null</c>.</para>
        /// </summary>
        public UserManagementAdmin AsUserManagementAdmin
        {
            get
            {
                return this as UserManagementAdmin;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is SupportAdmin</para>
        /// </summary>
        public bool IsSupportAdmin
        {
            get
            {
                return this is SupportAdmin;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a SupportAdmin, or <c>null</c>.</para>
        /// </summary>
        public SupportAdmin AsSupportAdmin
        {
            get
            {
                return this as SupportAdmin;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is MemberOnly</para>
        /// </summary>
        public bool IsMemberOnly
        {
            get
            {
                return this is MemberOnly;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a MemberOnly, or <c>null</c>.</para>
        /// </summary>
        public MemberOnly AsMemberOnly
        {
            get
            {
                return this as MemberOnly;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="AdminTier" />.</para>
        /// </summary>
        private class AdminTierEncoder : enc.StructEncoder<AdminTier>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(AdminTier value, enc.IJsonWriter writer)
            {
                if (value is TeamAdmin)
                {
                    WriteProperty(".tag", "team_admin", writer, enc.StringEncoder.Instance);
                    TeamAdmin.Encoder.EncodeFields((TeamAdmin)value, writer);
                    return;
                }
                if (value is UserManagementAdmin)
                {
                    WriteProperty(".tag", "user_management_admin", writer, enc.StringEncoder.Instance);
                    UserManagementAdmin.Encoder.EncodeFields((UserManagementAdmin)value, writer);
                    return;
                }
                if (value is SupportAdmin)
                {
                    WriteProperty(".tag", "support_admin", writer, enc.StringEncoder.Instance);
                    SupportAdmin.Encoder.EncodeFields((SupportAdmin)value, writer);
                    return;
                }
                if (value is MemberOnly)
                {
                    WriteProperty(".tag", "member_only", writer, enc.StringEncoder.Instance);
                    MemberOnly.Encoder.EncodeFields((MemberOnly)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="AdminTier" />.</para>
        /// </summary>
        private class AdminTierDecoder : enc.UnionDecoder<AdminTier>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="AdminTier" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override AdminTier Create()
            {
                return new AdminTier();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override AdminTier Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "team_admin":
                        return TeamAdmin.Decoder.DecodeFields(reader);
                    case "user_management_admin":
                        return UserManagementAdmin.Decoder.DecodeFields(reader);
                    case "support_admin":
                        return SupportAdmin.Decoder.DecodeFields(reader);
                    case "member_only":
                        return MemberOnly.Decoder.DecodeFields(reader);
                    default:
                        throw new sys.InvalidOperationException();
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>User is an administrator of the team - has all permissions.</para>
        /// </summary>
        public sealed class TeamAdmin : AdminTier
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<TeamAdmin> Encoder = new TeamAdminEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<TeamAdmin> Decoder = new TeamAdminDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TeamAdmin" /> class.</para>
            /// </summary>
            private TeamAdmin()
            {
            }

            /// <summary>
            /// <para>A singleton instance of TeamAdmin</para>
            /// </summary>
            public static readonly TeamAdmin Instance = new TeamAdmin();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="TeamAdmin" />.</para>
            /// </summary>
            private class TeamAdminEncoder : enc.StructEncoder<TeamAdmin>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(TeamAdmin value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="TeamAdmin" />.</para>
            /// </summary>
            private class TeamAdminDecoder : enc.StructDecoder<TeamAdmin>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="TeamAdmin" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override TeamAdmin Create()
                {
                    return TeamAdmin.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>User can do most user provisioning, de-provisioning and management.</para>
        /// </summary>
        public sealed class UserManagementAdmin : AdminTier
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<UserManagementAdmin> Encoder = new UserManagementAdminEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<UserManagementAdmin> Decoder = new UserManagementAdminDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="UserManagementAdmin" />
            /// class.</para>
            /// </summary>
            private UserManagementAdmin()
            {
            }

            /// <summary>
            /// <para>A singleton instance of UserManagementAdmin</para>
            /// </summary>
            public static readonly UserManagementAdmin Instance = new UserManagementAdmin();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="UserManagementAdmin" />.</para>
            /// </summary>
            private class UserManagementAdminEncoder : enc.StructEncoder<UserManagementAdmin>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(UserManagementAdmin value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="UserManagementAdmin" />.</para>
            /// </summary>
            private class UserManagementAdminDecoder : enc.StructDecoder<UserManagementAdmin>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="UserManagementAdmin"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override UserManagementAdmin Create()
                {
                    return UserManagementAdmin.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>User can do a limited set of common support tasks for existing users. Note:
        /// Dropbox is adding new types of admin roles; these may display as
        /// support_admin.</para>
        /// </summary>
        public sealed class SupportAdmin : AdminTier
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<SupportAdmin> Encoder = new SupportAdminEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<SupportAdmin> Decoder = new SupportAdminDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="SupportAdmin" />
            /// class.</para>
            /// </summary>
            private SupportAdmin()
            {
            }

            /// <summary>
            /// <para>A singleton instance of SupportAdmin</para>
            /// </summary>
            public static readonly SupportAdmin Instance = new SupportAdmin();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="SupportAdmin" />.</para>
            /// </summary>
            private class SupportAdminEncoder : enc.StructEncoder<SupportAdmin>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(SupportAdmin value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="SupportAdmin" />.</para>
            /// </summary>
            private class SupportAdminDecoder : enc.StructDecoder<SupportAdmin>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="SupportAdmin" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override SupportAdmin Create()
                {
                    return SupportAdmin.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>User is not an admin of the team.</para>
        /// </summary>
        public sealed class MemberOnly : AdminTier
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<MemberOnly> Encoder = new MemberOnlyEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<MemberOnly> Decoder = new MemberOnlyDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="MemberOnly" /> class.</para>
            /// </summary>
            private MemberOnly()
            {
            }

            /// <summary>
            /// <para>A singleton instance of MemberOnly</para>
            /// </summary>
            public static readonly MemberOnly Instance = new MemberOnly();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="MemberOnly" />.</para>
            /// </summary>
            private class MemberOnlyEncoder : enc.StructEncoder<MemberOnly>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(MemberOnly value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="MemberOnly" />.</para>
            /// </summary>
            private class MemberOnlyDecoder : enc.StructDecoder<MemberOnly>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="MemberOnly" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override MemberOnly Create()
                {
                    return MemberOnly.Instance;
                }

            }

            #endregion
        }
    }
}
