// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The paper create error object</para>
    /// </summary>
    public class PaperCreateError
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<PaperCreateError> Encoder = new PaperCreateErrorEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<PaperCreateError> Decoder = new PaperCreateErrorDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="PaperCreateError" />
        /// class.</para>
        /// </summary>
        public PaperCreateError()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is InvalidPath</para>
        /// </summary>
        public bool IsInvalidPath
        {
            get
            {
                return this is InvalidPath;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a InvalidPath, or <c>null</c>.</para>
        /// </summary>
        public InvalidPath AsInvalidPath
        {
            get
            {
                return this as InvalidPath;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is EmailUnverified</para>
        /// </summary>
        public bool IsEmailUnverified
        {
            get
            {
                return this is EmailUnverified;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a EmailUnverified, or <c>null</c>.</para>
        /// </summary>
        public EmailUnverified AsEmailUnverified
        {
            get
            {
                return this as EmailUnverified;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is InvalidFileExtension</para>
        /// </summary>
        public bool IsInvalidFileExtension
        {
            get
            {
                return this is InvalidFileExtension;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a InvalidFileExtension, or <c>null</c>.</para>
        /// </summary>
        public InvalidFileExtension AsInvalidFileExtension
        {
            get
            {
                return this as InvalidFileExtension;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is PaperDisabled</para>
        /// </summary>
        public bool IsPaperDisabled
        {
            get
            {
                return this is PaperDisabled;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a PaperDisabled, or <c>null</c>.</para>
        /// </summary>
        public PaperDisabled AsPaperDisabled
        {
            get
            {
                return this as PaperDisabled;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is
        /// InsufficientPermissions</para>
        /// </summary>
        public bool IsInsufficientPermissions
        {
            get
            {
                return this is InsufficientPermissions;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a InsufficientPermissions, or <c>null</c>.</para>
        /// </summary>
        public InsufficientPermissions AsInsufficientPermissions
        {
            get
            {
                return this as InsufficientPermissions;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is ContentMalformed</para>
        /// </summary>
        public bool IsContentMalformed
        {
            get
            {
                return this is ContentMalformed;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a ContentMalformed, or <c>null</c>.</para>
        /// </summary>
        public ContentMalformed AsContentMalformed
        {
            get
            {
                return this as ContentMalformed;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is DocLengthExceeded</para>
        /// </summary>
        public bool IsDocLengthExceeded
        {
            get
            {
                return this is DocLengthExceeded;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a DocLengthExceeded, or <c>null</c>.</para>
        /// </summary>
        public DocLengthExceeded AsDocLengthExceeded
        {
            get
            {
                return this as DocLengthExceeded;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is ImageSizeExceeded</para>
        /// </summary>
        public bool IsImageSizeExceeded
        {
            get
            {
                return this is ImageSizeExceeded;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a ImageSizeExceeded, or <c>null</c>.</para>
        /// </summary>
        public ImageSizeExceeded AsImageSizeExceeded
        {
            get
            {
                return this as ImageSizeExceeded;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="PaperCreateError" />.</para>
        /// </summary>
        private class PaperCreateErrorEncoder : enc.StructEncoder<PaperCreateError>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(PaperCreateError value, enc.IJsonWriter writer)
            {
                if (value is InvalidPath)
                {
                    WriteProperty(".tag", "invalid_path", writer, enc.StringEncoder.Instance);
                    InvalidPath.Encoder.EncodeFields((InvalidPath)value, writer);
                    return;
                }
                if (value is EmailUnverified)
                {
                    WriteProperty(".tag", "email_unverified", writer, enc.StringEncoder.Instance);
                    EmailUnverified.Encoder.EncodeFields((EmailUnverified)value, writer);
                    return;
                }
                if (value is InvalidFileExtension)
                {
                    WriteProperty(".tag", "invalid_file_extension", writer, enc.StringEncoder.Instance);
                    InvalidFileExtension.Encoder.EncodeFields((InvalidFileExtension)value, writer);
                    return;
                }
                if (value is PaperDisabled)
                {
                    WriteProperty(".tag", "paper_disabled", writer, enc.StringEncoder.Instance);
                    PaperDisabled.Encoder.EncodeFields((PaperDisabled)value, writer);
                    return;
                }
                if (value is InsufficientPermissions)
                {
                    WriteProperty(".tag", "insufficient_permissions", writer, enc.StringEncoder.Instance);
                    InsufficientPermissions.Encoder.EncodeFields((InsufficientPermissions)value, writer);
                    return;
                }
                if (value is ContentMalformed)
                {
                    WriteProperty(".tag", "content_malformed", writer, enc.StringEncoder.Instance);
                    ContentMalformed.Encoder.EncodeFields((ContentMalformed)value, writer);
                    return;
                }
                if (value is DocLengthExceeded)
                {
                    WriteProperty(".tag", "doc_length_exceeded", writer, enc.StringEncoder.Instance);
                    DocLengthExceeded.Encoder.EncodeFields((DocLengthExceeded)value, writer);
                    return;
                }
                if (value is ImageSizeExceeded)
                {
                    WriteProperty(".tag", "image_size_exceeded", writer, enc.StringEncoder.Instance);
                    ImageSizeExceeded.Encoder.EncodeFields((ImageSizeExceeded)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="PaperCreateError" />.</para>
        /// </summary>
        private class PaperCreateErrorDecoder : enc.UnionDecoder<PaperCreateError>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="PaperCreateError" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override PaperCreateError Create()
            {
                return new PaperCreateError();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override PaperCreateError Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "invalid_path":
                        return InvalidPath.Decoder.DecodeFields(reader);
                    case "email_unverified":
                        return EmailUnverified.Decoder.DecodeFields(reader);
                    case "invalid_file_extension":
                        return InvalidFileExtension.Decoder.DecodeFields(reader);
                    case "paper_disabled":
                        return PaperDisabled.Decoder.DecodeFields(reader);
                    case "insufficient_permissions":
                        return InsufficientPermissions.Decoder.DecodeFields(reader);
                    case "content_malformed":
                        return ContentMalformed.Decoder.DecodeFields(reader);
                    case "doc_length_exceeded":
                        return DocLengthExceeded.Decoder.DecodeFields(reader);
                    case "image_size_exceeded":
                        return ImageSizeExceeded.Decoder.DecodeFields(reader);
                    case "other":
                        return Other.Decoder.DecodeFields(reader);
                    default:
                        throw new sys.InvalidOperationException();
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The file could not be saved to the specified location.</para>
        /// </summary>
        public sealed class InvalidPath : PaperCreateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<InvalidPath> Encoder = new InvalidPathEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<InvalidPath> Decoder = new InvalidPathDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="InvalidPath" />
            /// class.</para>
            /// </summary>
            private InvalidPath()
            {
            }

            /// <summary>
            /// <para>A singleton instance of InvalidPath</para>
            /// </summary>
            public static readonly InvalidPath Instance = new InvalidPath();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="InvalidPath" />.</para>
            /// </summary>
            private class InvalidPathEncoder : enc.StructEncoder<InvalidPath>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(InvalidPath value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="InvalidPath" />.</para>
            /// </summary>
            private class InvalidPathDecoder : enc.StructDecoder<InvalidPath>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="InvalidPath" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override InvalidPath Create()
                {
                    return InvalidPath.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The user's email must be verified to create Paper docs.</para>
        /// </summary>
        public sealed class EmailUnverified : PaperCreateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<EmailUnverified> Encoder = new EmailUnverifiedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<EmailUnverified> Decoder = new EmailUnverifiedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="EmailUnverified" />
            /// class.</para>
            /// </summary>
            private EmailUnverified()
            {
            }

            /// <summary>
            /// <para>A singleton instance of EmailUnverified</para>
            /// </summary>
            public static readonly EmailUnverified Instance = new EmailUnverified();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="EmailUnverified" />.</para>
            /// </summary>
            private class EmailUnverifiedEncoder : enc.StructEncoder<EmailUnverified>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(EmailUnverified value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="EmailUnverified" />.</para>
            /// </summary>
            private class EmailUnverifiedDecoder : enc.StructDecoder<EmailUnverified>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="EmailUnverified" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override EmailUnverified Create()
                {
                    return EmailUnverified.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The file path must end in .paper.</para>
        /// </summary>
        public sealed class InvalidFileExtension : PaperCreateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<InvalidFileExtension> Encoder = new InvalidFileExtensionEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<InvalidFileExtension> Decoder = new InvalidFileExtensionDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="InvalidFileExtension" />
            /// class.</para>
            /// </summary>
            private InvalidFileExtension()
            {
            }

            /// <summary>
            /// <para>A singleton instance of InvalidFileExtension</para>
            /// </summary>
            public static readonly InvalidFileExtension Instance = new InvalidFileExtension();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="InvalidFileExtension" />.</para>
            /// </summary>
            private class InvalidFileExtensionEncoder : enc.StructEncoder<InvalidFileExtension>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(InvalidFileExtension value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="InvalidFileExtension" />.</para>
            /// </summary>
            private class InvalidFileExtensionDecoder : enc.StructDecoder<InvalidFileExtension>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="InvalidFileExtension"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override InvalidFileExtension Create()
                {
                    return InvalidFileExtension.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Paper is disabled for your team.</para>
        /// </summary>
        public sealed class PaperDisabled : PaperCreateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<PaperDisabled> Encoder = new PaperDisabledEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<PaperDisabled> Decoder = new PaperDisabledDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="PaperDisabled" />
            /// class.</para>
            /// </summary>
            private PaperDisabled()
            {
            }

            /// <summary>
            /// <para>A singleton instance of PaperDisabled</para>
            /// </summary>
            public static readonly PaperDisabled Instance = new PaperDisabled();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="PaperDisabled" />.</para>
            /// </summary>
            private class PaperDisabledEncoder : enc.StructEncoder<PaperDisabled>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(PaperDisabled value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="PaperDisabled" />.</para>
            /// </summary>
            private class PaperDisabledDecoder : enc.StructDecoder<PaperDisabled>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="PaperDisabled" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override PaperDisabled Create()
                {
                    return PaperDisabled.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Your account does not have permissions to edit Paper docs.</para>
        /// </summary>
        public sealed class InsufficientPermissions : PaperCreateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<InsufficientPermissions> Encoder = new InsufficientPermissionsEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<InsufficientPermissions> Decoder = new InsufficientPermissionsDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="InsufficientPermissions" />
            /// class.</para>
            /// </summary>
            private InsufficientPermissions()
            {
            }

            /// <summary>
            /// <para>A singleton instance of InsufficientPermissions</para>
            /// </summary>
            public static readonly InsufficientPermissions Instance = new InsufficientPermissions();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="InsufficientPermissions" />.</para>
            /// </summary>
            private class InsufficientPermissionsEncoder : enc.StructEncoder<InsufficientPermissions>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(InsufficientPermissions value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="InsufficientPermissions" />.</para>
            /// </summary>
            private class InsufficientPermissionsDecoder : enc.StructDecoder<InsufficientPermissions>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="InsufficientPermissions"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override InsufficientPermissions Create()
                {
                    return InsufficientPermissions.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The provided content was malformed and cannot be imported to Paper.</para>
        /// </summary>
        public sealed class ContentMalformed : PaperCreateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<ContentMalformed> Encoder = new ContentMalformedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<ContentMalformed> Decoder = new ContentMalformedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="ContentMalformed" />
            /// class.</para>
            /// </summary>
            private ContentMalformed()
            {
            }

            /// <summary>
            /// <para>A singleton instance of ContentMalformed</para>
            /// </summary>
            public static readonly ContentMalformed Instance = new ContentMalformed();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="ContentMalformed" />.</para>
            /// </summary>
            private class ContentMalformedEncoder : enc.StructEncoder<ContentMalformed>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(ContentMalformed value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="ContentMalformed" />.</para>
            /// </summary>
            private class ContentMalformedDecoder : enc.StructDecoder<ContentMalformed>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="ContentMalformed" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override ContentMalformed Create()
                {
                    return ContentMalformed.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The Paper doc would be too large, split the content into multiple
        /// docs.</para>
        /// </summary>
        public sealed class DocLengthExceeded : PaperCreateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<DocLengthExceeded> Encoder = new DocLengthExceededEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<DocLengthExceeded> Decoder = new DocLengthExceededDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="DocLengthExceeded" />
            /// class.</para>
            /// </summary>
            private DocLengthExceeded()
            {
            }

            /// <summary>
            /// <para>A singleton instance of DocLengthExceeded</para>
            /// </summary>
            public static readonly DocLengthExceeded Instance = new DocLengthExceeded();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="DocLengthExceeded" />.</para>
            /// </summary>
            private class DocLengthExceededEncoder : enc.StructEncoder<DocLengthExceeded>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(DocLengthExceeded value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="DocLengthExceeded" />.</para>
            /// </summary>
            private class DocLengthExceededDecoder : enc.StructDecoder<DocLengthExceeded>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="DocLengthExceeded"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override DocLengthExceeded Create()
                {
                    return DocLengthExceeded.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The imported document contains an image that is too large. The current limit
        /// is 1MB. This only applies to HTML with data URI.</para>
        /// </summary>
        public sealed class ImageSizeExceeded : PaperCreateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<ImageSizeExceeded> Encoder = new ImageSizeExceededEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<ImageSizeExceeded> Decoder = new ImageSizeExceededDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="ImageSizeExceeded" />
            /// class.</para>
            /// </summary>
            private ImageSizeExceeded()
            {
            }

            /// <summary>
            /// <para>A singleton instance of ImageSizeExceeded</para>
            /// </summary>
            public static readonly ImageSizeExceeded Instance = new ImageSizeExceeded();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="ImageSizeExceeded" />.</para>
            /// </summary>
            private class ImageSizeExceededEncoder : enc.StructEncoder<ImageSizeExceeded>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(ImageSizeExceeded value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="ImageSizeExceeded" />.</para>
            /// </summary>
            private class ImageSizeExceededDecoder : enc.StructDecoder<ImageSizeExceeded>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="ImageSizeExceeded"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override ImageSizeExceeded Create()
                {
                    return ImageSizeExceeded.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : PaperCreateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}
