// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamLog
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Policy for the default number of days until an externally shared link
    /// expires</para>
    /// </summary>
    public class DefaultLinkExpirationDaysPolicy
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<DefaultLinkExpirationDaysPolicy> Encoder = new DefaultLinkExpirationDaysPolicyEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<DefaultLinkExpirationDaysPolicy> Decoder = new DefaultLinkExpirationDaysPolicyDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="DefaultLinkExpirationDaysPolicy"
        /// /> class.</para>
        /// </summary>
        public DefaultLinkExpirationDaysPolicy()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Day1</para>
        /// </summary>
        public bool IsDay1
        {
            get
            {
                return this is Day1;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Day1, or <c>null</c>.</para>
        /// </summary>
        public Day1 AsDay1
        {
            get
            {
                return this as Day1;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Day180</para>
        /// </summary>
        public bool IsDay180
        {
            get
            {
                return this is Day180;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Day180, or <c>null</c>.</para>
        /// </summary>
        public Day180 AsDay180
        {
            get
            {
                return this as Day180;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Day3</para>
        /// </summary>
        public bool IsDay3
        {
            get
            {
                return this is Day3;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Day3, or <c>null</c>.</para>
        /// </summary>
        public Day3 AsDay3
        {
            get
            {
                return this as Day3;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Day30</para>
        /// </summary>
        public bool IsDay30
        {
            get
            {
                return this is Day30;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Day30, or <c>null</c>.</para>
        /// </summary>
        public Day30 AsDay30
        {
            get
            {
                return this as Day30;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Day7</para>
        /// </summary>
        public bool IsDay7
        {
            get
            {
                return this is Day7;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Day7, or <c>null</c>.</para>
        /// </summary>
        public Day7 AsDay7
        {
            get
            {
                return this as Day7;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Day90</para>
        /// </summary>
        public bool IsDay90
        {
            get
            {
                return this is Day90;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Day90, or <c>null</c>.</para>
        /// </summary>
        public Day90 AsDay90
        {
            get
            {
                return this as Day90;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is None</para>
        /// </summary>
        public bool IsNone
        {
            get
            {
                return this is None;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a None, or <c>null</c>.</para>
        /// </summary>
        public None AsNone
        {
            get
            {
                return this as None;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Year1</para>
        /// </summary>
        public bool IsYear1
        {
            get
            {
                return this is Year1;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Year1, or <c>null</c>.</para>
        /// </summary>
        public Year1 AsYear1
        {
            get
            {
                return this as Year1;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="DefaultLinkExpirationDaysPolicy" />.</para>
        /// </summary>
        private class DefaultLinkExpirationDaysPolicyEncoder : enc.StructEncoder<DefaultLinkExpirationDaysPolicy>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(DefaultLinkExpirationDaysPolicy value, enc.IJsonWriter writer)
            {
                if (value is Day1)
                {
                    WriteProperty(".tag", "day_1", writer, enc.StringEncoder.Instance);
                    Day1.Encoder.EncodeFields((Day1)value, writer);
                    return;
                }
                if (value is Day180)
                {
                    WriteProperty(".tag", "day_180", writer, enc.StringEncoder.Instance);
                    Day180.Encoder.EncodeFields((Day180)value, writer);
                    return;
                }
                if (value is Day3)
                {
                    WriteProperty(".tag", "day_3", writer, enc.StringEncoder.Instance);
                    Day3.Encoder.EncodeFields((Day3)value, writer);
                    return;
                }
                if (value is Day30)
                {
                    WriteProperty(".tag", "day_30", writer, enc.StringEncoder.Instance);
                    Day30.Encoder.EncodeFields((Day30)value, writer);
                    return;
                }
                if (value is Day7)
                {
                    WriteProperty(".tag", "day_7", writer, enc.StringEncoder.Instance);
                    Day7.Encoder.EncodeFields((Day7)value, writer);
                    return;
                }
                if (value is Day90)
                {
                    WriteProperty(".tag", "day_90", writer, enc.StringEncoder.Instance);
                    Day90.Encoder.EncodeFields((Day90)value, writer);
                    return;
                }
                if (value is None)
                {
                    WriteProperty(".tag", "none", writer, enc.StringEncoder.Instance);
                    None.Encoder.EncodeFields((None)value, writer);
                    return;
                }
                if (value is Year1)
                {
                    WriteProperty(".tag", "year_1", writer, enc.StringEncoder.Instance);
                    Year1.Encoder.EncodeFields((Year1)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="DefaultLinkExpirationDaysPolicy" />.</para>
        /// </summary>
        private class DefaultLinkExpirationDaysPolicyDecoder : enc.UnionDecoder<DefaultLinkExpirationDaysPolicy>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="DefaultLinkExpirationDaysPolicy"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override DefaultLinkExpirationDaysPolicy Create()
            {
                return new DefaultLinkExpirationDaysPolicy();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override DefaultLinkExpirationDaysPolicy Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "day_1":
                        return Day1.Decoder.DecodeFields(reader);
                    case "day_180":
                        return Day180.Decoder.DecodeFields(reader);
                    case "day_3":
                        return Day3.Decoder.DecodeFields(reader);
                    case "day_30":
                        return Day30.Decoder.DecodeFields(reader);
                    case "day_7":
                        return Day7.Decoder.DecodeFields(reader);
                    case "day_90":
                        return Day90.Decoder.DecodeFields(reader);
                    case "none":
                        return None.Decoder.DecodeFields(reader);
                    case "year_1":
                        return Year1.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The day 1 object</para>
        /// </summary>
        public sealed class Day1 : DefaultLinkExpirationDaysPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Day1> Encoder = new Day1Encoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Day1> Decoder = new Day1Decoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Day1" /> class.</para>
            /// </summary>
            private Day1()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Day1</para>
            /// </summary>
            public static readonly Day1 Instance = new Day1();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Day1" />.</para>
            /// </summary>
            private class Day1Encoder : enc.StructEncoder<Day1>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Day1 value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Day1" />.</para>
            /// </summary>
            private class Day1Decoder : enc.StructDecoder<Day1>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Day1" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Day1 Create()
                {
                    return Day1.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The day 180 object</para>
        /// </summary>
        public sealed class Day180 : DefaultLinkExpirationDaysPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Day180> Encoder = new Day180Encoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Day180> Decoder = new Day180Decoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Day180" /> class.</para>
            /// </summary>
            private Day180()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Day180</para>
            /// </summary>
            public static readonly Day180 Instance = new Day180();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Day180" />.</para>
            /// </summary>
            private class Day180Encoder : enc.StructEncoder<Day180>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Day180 value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Day180" />.</para>
            /// </summary>
            private class Day180Decoder : enc.StructDecoder<Day180>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Day180" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Day180 Create()
                {
                    return Day180.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The day 3 object</para>
        /// </summary>
        public sealed class Day3 : DefaultLinkExpirationDaysPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Day3> Encoder = new Day3Encoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Day3> Decoder = new Day3Decoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Day3" /> class.</para>
            /// </summary>
            private Day3()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Day3</para>
            /// </summary>
            public static readonly Day3 Instance = new Day3();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Day3" />.</para>
            /// </summary>
            private class Day3Encoder : enc.StructEncoder<Day3>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Day3 value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Day3" />.</para>
            /// </summary>
            private class Day3Decoder : enc.StructDecoder<Day3>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Day3" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Day3 Create()
                {
                    return Day3.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The day 30 object</para>
        /// </summary>
        public sealed class Day30 : DefaultLinkExpirationDaysPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Day30> Encoder = new Day30Encoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Day30> Decoder = new Day30Decoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Day30" /> class.</para>
            /// </summary>
            private Day30()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Day30</para>
            /// </summary>
            public static readonly Day30 Instance = new Day30();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Day30" />.</para>
            /// </summary>
            private class Day30Encoder : enc.StructEncoder<Day30>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Day30 value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Day30" />.</para>
            /// </summary>
            private class Day30Decoder : enc.StructDecoder<Day30>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Day30" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Day30 Create()
                {
                    return Day30.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The day 7 object</para>
        /// </summary>
        public sealed class Day7 : DefaultLinkExpirationDaysPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Day7> Encoder = new Day7Encoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Day7> Decoder = new Day7Decoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Day7" /> class.</para>
            /// </summary>
            private Day7()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Day7</para>
            /// </summary>
            public static readonly Day7 Instance = new Day7();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Day7" />.</para>
            /// </summary>
            private class Day7Encoder : enc.StructEncoder<Day7>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Day7 value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Day7" />.</para>
            /// </summary>
            private class Day7Decoder : enc.StructDecoder<Day7>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Day7" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Day7 Create()
                {
                    return Day7.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The day 90 object</para>
        /// </summary>
        public sealed class Day90 : DefaultLinkExpirationDaysPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Day90> Encoder = new Day90Encoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Day90> Decoder = new Day90Decoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Day90" /> class.</para>
            /// </summary>
            private Day90()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Day90</para>
            /// </summary>
            public static readonly Day90 Instance = new Day90();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Day90" />.</para>
            /// </summary>
            private class Day90Encoder : enc.StructEncoder<Day90>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Day90 value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Day90" />.</para>
            /// </summary>
            private class Day90Decoder : enc.StructDecoder<Day90>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Day90" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Day90 Create()
                {
                    return Day90.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The none object</para>
        /// </summary>
        public sealed class None : DefaultLinkExpirationDaysPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<None> Encoder = new NoneEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<None> Decoder = new NoneDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="None" /> class.</para>
            /// </summary>
            private None()
            {
            }

            /// <summary>
            /// <para>A singleton instance of None</para>
            /// </summary>
            public static readonly None Instance = new None();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="None" />.</para>
            /// </summary>
            private class NoneEncoder : enc.StructEncoder<None>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(None value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="None" />.</para>
            /// </summary>
            private class NoneDecoder : enc.StructDecoder<None>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="None" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override None Create()
                {
                    return None.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The year 1 object</para>
        /// </summary>
        public sealed class Year1 : DefaultLinkExpirationDaysPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Year1> Encoder = new Year1Encoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Year1> Decoder = new Year1Decoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Year1" /> class.</para>
            /// </summary>
            private Year1()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Year1</para>
            /// </summary>
            public static readonly Year1 Instance = new Year1();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Year1" />.</para>
            /// </summary>
            private class Year1Encoder : enc.StructEncoder<Year1>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Year1 value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Year1" />.</para>
            /// </summary>
            private class Year1Decoder : enc.StructDecoder<Year1>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Year1" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Year1 Create()
                {
                    return Year1.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : DefaultLinkExpirationDaysPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}
