// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.FileProperties.Routes
{
    using sys = System;
    using io = System.IO;
    using col = System.Collections.Generic;
    using t = System.Threading.Tasks;
    using tr = System.Threading;
    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The routes for the <see cref="N:Dropbox.Api.FileProperties"/> namespace</para>
    /// </summary>
    public class FilePropertiesUserRoutes
    {
        /// <summary>
        /// <para>Initializes a new instance of the <see cref="FilePropertiesUserRoutes" />
        /// class.</para>
        /// </summary>
        /// <param name="transport">The transport to use</param>
        internal FilePropertiesUserRoutes(enc.ITransport transport)
        {
            this.Transport = transport;
        }

        /// <summary>
        /// <para>Gets the transport used for these routes</para>
        /// </summary>
        internal enc.ITransport Transport { get; private set; }

        /// <summary>
        /// <para>Add property groups to a Dropbox file. See <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync"
        /// /> or <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesAddForTeamAsync"
        /// /> to create new templates.</para>
        /// </summary>
        /// <param name="addPropertiesArg">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="AddPropertiesError"/>.</exception>
        public t.Task PropertiesAddAsync(AddPropertiesArg addPropertiesArg, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<AddPropertiesArg, enc.Empty, AddPropertiesError>(addPropertiesArg, "api", "/file_properties/properties/add", "user", global::Dropbox.Api.FileProperties.AddPropertiesArg.Encoder, enc.EmptyDecoder.Instance, global::Dropbox.Api.FileProperties.AddPropertiesError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the properties add route.</para>
        /// </summary>
        /// <param name="addPropertiesArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginPropertiesAdd(AddPropertiesArg addPropertiesArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.PropertiesAddAsync(addPropertiesArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Add property groups to a Dropbox file. See <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync"
        /// /> or <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesAddForTeamAsync"
        /// /> to create new templates.</para>
        /// </summary>
        /// <param name="path">A unique identifier for the file or folder.</param>
        /// <param name="propertyGroups">The property groups which are to be added to a Dropbox
        /// file. No two groups in the input should  refer to the same template.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="AddPropertiesError"/>.</exception>
        public t.Task PropertiesAddAsync(string path,
                                         col.IEnumerable<PropertyGroup> propertyGroups,
                                         tr.CancellationToken cancellationToken = default)
        {
            var addPropertiesArg = new AddPropertiesArg(path,
                                                        propertyGroups);

            return this.PropertiesAddAsync(addPropertiesArg, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the properties add route.</para>
        /// </summary>
        /// <param name="path">A unique identifier for the file or folder.</param>
        /// <param name="propertyGroups">The property groups which are to be added to a Dropbox
        /// file. No two groups in the input should  refer to the same template.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginPropertiesAdd(string path,
                                                   col.IEnumerable<PropertyGroup> propertyGroups,
                                                   sys.AsyncCallback callback,
                                                   object callbackState = null)
        {
            var addPropertiesArg = new AddPropertiesArg(path,
                                                        propertyGroups);

            return this.BeginPropertiesAdd(addPropertiesArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the properties add route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="AddPropertiesError"/>.</exception>
        public void EndPropertiesAdd(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }
        }

        /// <summary>
        /// <para>Overwrite property groups associated with a file. This endpoint should be
        /// used instead of <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.PropertiesUpdateAsync"
        /// /> when property groups are being updated via a "snapshot" instead of via a
        /// "delta". In other words, this endpoint will delete all omitted fields from a
        /// property group, whereas <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.PropertiesUpdateAsync"
        /// /> will only delete fields that are explicitly marked for deletion.</para>
        /// </summary>
        /// <param name="overwritePropertyGroupArg">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="InvalidPropertyGroupError"/>.</exception>
        public t.Task PropertiesOverwriteAsync(OverwritePropertyGroupArg overwritePropertyGroupArg, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<OverwritePropertyGroupArg, enc.Empty, InvalidPropertyGroupError>(overwritePropertyGroupArg, "api", "/file_properties/properties/overwrite", "user", global::Dropbox.Api.FileProperties.OverwritePropertyGroupArg.Encoder, enc.EmptyDecoder.Instance, global::Dropbox.Api.FileProperties.InvalidPropertyGroupError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the properties overwrite route.</para>
        /// </summary>
        /// <param name="overwritePropertyGroupArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginPropertiesOverwrite(OverwritePropertyGroupArg overwritePropertyGroupArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.PropertiesOverwriteAsync(overwritePropertyGroupArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Overwrite property groups associated with a file. This endpoint should be
        /// used instead of <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.PropertiesUpdateAsync"
        /// /> when property groups are being updated via a "snapshot" instead of via a
        /// "delta". In other words, this endpoint will delete all omitted fields from a
        /// property group, whereas <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.PropertiesUpdateAsync"
        /// /> will only delete fields that are explicitly marked for deletion.</para>
        /// </summary>
        /// <param name="path">A unique identifier for the file or folder.</param>
        /// <param name="propertyGroups">The property groups "snapshot" updates to force apply.
        /// No two groups in the input should  refer to the same template.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="InvalidPropertyGroupError"/>.</exception>
        public t.Task PropertiesOverwriteAsync(string path,
                                               col.IEnumerable<PropertyGroup> propertyGroups,
                                               tr.CancellationToken cancellationToken = default)
        {
            var overwritePropertyGroupArg = new OverwritePropertyGroupArg(path,
                                                                          propertyGroups);

            return this.PropertiesOverwriteAsync(overwritePropertyGroupArg, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the properties overwrite route.</para>
        /// </summary>
        /// <param name="path">A unique identifier for the file or folder.</param>
        /// <param name="propertyGroups">The property groups "snapshot" updates to force apply.
        /// No two groups in the input should  refer to the same template.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginPropertiesOverwrite(string path,
                                                         col.IEnumerable<PropertyGroup> propertyGroups,
                                                         sys.AsyncCallback callback,
                                                         object callbackState = null)
        {
            var overwritePropertyGroupArg = new OverwritePropertyGroupArg(path,
                                                                          propertyGroups);

            return this.BeginPropertiesOverwrite(overwritePropertyGroupArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the properties overwrite route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="InvalidPropertyGroupError"/>.</exception>
        public void EndPropertiesOverwrite(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }
        }

        /// <summary>
        /// <para>Permanently removes the specified property group from the file. To remove
        /// specific property field key value pairs, see <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.PropertiesUpdateAsync"
        /// />. To update a template, see <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesUpdateForUserAsync"
        /// /> or <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesUpdateForTeamAsync"
        /// />. To remove a template, see <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesRemoveForUserAsync"
        /// /> or <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesRemoveForTeamAsync"
        /// />.</para>
        /// </summary>
        /// <param name="removePropertiesArg">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RemovePropertiesError"/>.</exception>
        public t.Task PropertiesRemoveAsync(RemovePropertiesArg removePropertiesArg, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<RemovePropertiesArg, enc.Empty, RemovePropertiesError>(removePropertiesArg, "api", "/file_properties/properties/remove", "user", global::Dropbox.Api.FileProperties.RemovePropertiesArg.Encoder, enc.EmptyDecoder.Instance, global::Dropbox.Api.FileProperties.RemovePropertiesError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the properties remove route.</para>
        /// </summary>
        /// <param name="removePropertiesArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginPropertiesRemove(RemovePropertiesArg removePropertiesArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.PropertiesRemoveAsync(removePropertiesArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Permanently removes the specified property group from the file. To remove
        /// specific property field key value pairs, see <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.PropertiesUpdateAsync"
        /// />. To update a template, see <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesUpdateForUserAsync"
        /// /> or <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesUpdateForTeamAsync"
        /// />. To remove a template, see <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesRemoveForUserAsync"
        /// /> or <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesRemoveForTeamAsync"
        /// />.</para>
        /// </summary>
        /// <param name="path">A unique identifier for the file or folder.</param>
        /// <param name="propertyTemplateIds">A list of identifiers for a template created by
        /// <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync"
        /// /> or <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesAddForTeamAsync"
        /// />.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RemovePropertiesError"/>.</exception>
        public t.Task PropertiesRemoveAsync(string path,
                                            col.IEnumerable<string> propertyTemplateIds,
                                            tr.CancellationToken cancellationToken = default)
        {
            var removePropertiesArg = new RemovePropertiesArg(path,
                                                              propertyTemplateIds);

            return this.PropertiesRemoveAsync(removePropertiesArg, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the properties remove route.</para>
        /// </summary>
        /// <param name="path">A unique identifier for the file or folder.</param>
        /// <param name="propertyTemplateIds">A list of identifiers for a template created by
        /// <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync"
        /// /> or <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesAddForTeamAsync"
        /// />.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginPropertiesRemove(string path,
                                                      col.IEnumerable<string> propertyTemplateIds,
                                                      sys.AsyncCallback callback,
                                                      object callbackState = null)
        {
            var removePropertiesArg = new RemovePropertiesArg(path,
                                                              propertyTemplateIds);

            return this.BeginPropertiesRemove(removePropertiesArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the properties remove route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="RemovePropertiesError"/>.</exception>
        public void EndPropertiesRemove(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }
        }

        /// <summary>
        /// <para>Search across property templates for particular property field values.</para>
        /// </summary>
        /// <param name="propertiesSearchArg">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="PropertiesSearchError"/>.</exception>
        public t.Task<PropertiesSearchResult> PropertiesSearchAsync(PropertiesSearchArg propertiesSearchArg, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<PropertiesSearchArg, PropertiesSearchResult, PropertiesSearchError>(propertiesSearchArg, "api", "/file_properties/properties/search", "user", global::Dropbox.Api.FileProperties.PropertiesSearchArg.Encoder, global::Dropbox.Api.FileProperties.PropertiesSearchResult.Decoder, global::Dropbox.Api.FileProperties.PropertiesSearchError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the properties search route.</para>
        /// </summary>
        /// <param name="propertiesSearchArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginPropertiesSearch(PropertiesSearchArg propertiesSearchArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.PropertiesSearchAsync(propertiesSearchArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Search across property templates for particular property field values.</para>
        /// </summary>
        /// <param name="queries">Queries to search.</param>
        /// <param name="templateFilter">Filter results to contain only properties associated
        /// with these template IDs.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="PropertiesSearchError"/>.</exception>
        public t.Task<PropertiesSearchResult> PropertiesSearchAsync(col.IEnumerable<PropertiesSearchQuery> queries,
                                                                    TemplateFilter templateFilter = null,
                                                                    tr.CancellationToken cancellationToken = default)
        {
            var propertiesSearchArg = new PropertiesSearchArg(queries,
                                                              templateFilter);

            return this.PropertiesSearchAsync(propertiesSearchArg, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the properties search route.</para>
        /// </summary>
        /// <param name="queries">Queries to search.</param>
        /// <param name="templateFilter">Filter results to contain only properties associated
        /// with these template IDs.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginPropertiesSearch(col.IEnumerable<PropertiesSearchQuery> queries,
                                                      TemplateFilter templateFilter = null,
                                                      sys.AsyncCallback callback = null,
                                                      object callbackState = null)
        {
            var propertiesSearchArg = new PropertiesSearchArg(queries,
                                                              templateFilter);

            return this.BeginPropertiesSearch(propertiesSearchArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the properties search route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="PropertiesSearchError"/>.</exception>
        public PropertiesSearchResult EndPropertiesSearch(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<PropertiesSearchResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Once a cursor has been retrieved from <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.PropertiesSearchAsync"
        /// />, use this to paginate through all search results.</para>
        /// </summary>
        /// <param name="propertiesSearchContinueArg">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="PropertiesSearchContinueError"/>.</exception>
        public t.Task<PropertiesSearchResult> PropertiesSearchContinueAsync(PropertiesSearchContinueArg propertiesSearchContinueArg, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<PropertiesSearchContinueArg, PropertiesSearchResult, PropertiesSearchContinueError>(propertiesSearchContinueArg, "api", "/file_properties/properties/search/continue", "user", global::Dropbox.Api.FileProperties.PropertiesSearchContinueArg.Encoder, global::Dropbox.Api.FileProperties.PropertiesSearchResult.Decoder, global::Dropbox.Api.FileProperties.PropertiesSearchContinueError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the properties search continue route.</para>
        /// </summary>
        /// <param name="propertiesSearchContinueArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginPropertiesSearchContinue(PropertiesSearchContinueArg propertiesSearchContinueArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.PropertiesSearchContinueAsync(propertiesSearchContinueArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Once a cursor has been retrieved from <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.PropertiesSearchAsync"
        /// />, use this to paginate through all search results.</para>
        /// </summary>
        /// <param name="cursor">The cursor returned by your last call to <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.PropertiesSearchAsync"
        /// /> or <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.PropertiesSearchContinueAsync"
        /// />.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="PropertiesSearchContinueError"/>.</exception>
        public t.Task<PropertiesSearchResult> PropertiesSearchContinueAsync(string cursor,
                                                                            tr.CancellationToken cancellationToken = default)
        {
            var propertiesSearchContinueArg = new PropertiesSearchContinueArg(cursor);

            return this.PropertiesSearchContinueAsync(propertiesSearchContinueArg, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the properties search continue route.</para>
        /// </summary>
        /// <param name="cursor">The cursor returned by your last call to <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.PropertiesSearchAsync"
        /// /> or <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.PropertiesSearchContinueAsync"
        /// />.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginPropertiesSearchContinue(string cursor,
                                                              sys.AsyncCallback callback,
                                                              object callbackState = null)
        {
            var propertiesSearchContinueArg = new PropertiesSearchContinueArg(cursor);

            return this.BeginPropertiesSearchContinue(propertiesSearchContinueArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the properties search continue
        /// route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="PropertiesSearchContinueError"/>.</exception>
        public PropertiesSearchResult EndPropertiesSearchContinue(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<PropertiesSearchResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Add, update or remove properties associated with the supplied file and
        /// templates. This endpoint should be used instead of <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.PropertiesOverwriteAsync"
        /// /> when property groups are being updated via a "delta" instead of via a "snapshot"
        /// . In other words, this endpoint will not delete any omitted fields from a property
        /// group, whereas <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.PropertiesOverwriteAsync"
        /// /> will delete any fields that are omitted from a property group.</para>
        /// </summary>
        /// <param name="updatePropertiesArg">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="UpdatePropertiesError"/>.</exception>
        public t.Task PropertiesUpdateAsync(UpdatePropertiesArg updatePropertiesArg, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<UpdatePropertiesArg, enc.Empty, UpdatePropertiesError>(updatePropertiesArg, "api", "/file_properties/properties/update", "user", global::Dropbox.Api.FileProperties.UpdatePropertiesArg.Encoder, enc.EmptyDecoder.Instance, global::Dropbox.Api.FileProperties.UpdatePropertiesError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the properties update route.</para>
        /// </summary>
        /// <param name="updatePropertiesArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginPropertiesUpdate(UpdatePropertiesArg updatePropertiesArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.PropertiesUpdateAsync(updatePropertiesArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Add, update or remove properties associated with the supplied file and
        /// templates. This endpoint should be used instead of <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.PropertiesOverwriteAsync"
        /// /> when property groups are being updated via a "delta" instead of via a "snapshot"
        /// . In other words, this endpoint will not delete any omitted fields from a property
        /// group, whereas <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.PropertiesOverwriteAsync"
        /// /> will delete any fields that are omitted from a property group.</para>
        /// </summary>
        /// <param name="path">A unique identifier for the file or folder.</param>
        /// <param name="updatePropertyGroups">The property groups "delta" updates to
        /// apply.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="UpdatePropertiesError"/>.</exception>
        public t.Task PropertiesUpdateAsync(string path,
                                            col.IEnumerable<PropertyGroupUpdate> updatePropertyGroups,
                                            tr.CancellationToken cancellationToken = default)
        {
            var updatePropertiesArg = new UpdatePropertiesArg(path,
                                                              updatePropertyGroups);

            return this.PropertiesUpdateAsync(updatePropertiesArg, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the properties update route.</para>
        /// </summary>
        /// <param name="path">A unique identifier for the file or folder.</param>
        /// <param name="updatePropertyGroups">The property groups "delta" updates to
        /// apply.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginPropertiesUpdate(string path,
                                                      col.IEnumerable<PropertyGroupUpdate> updatePropertyGroups,
                                                      sys.AsyncCallback callback,
                                                      object callbackState = null)
        {
            var updatePropertiesArg = new UpdatePropertiesArg(path,
                                                              updatePropertyGroups);

            return this.BeginPropertiesUpdate(updatePropertiesArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the properties update route to
        /// complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="UpdatePropertiesError"/>.</exception>
        public void EndPropertiesUpdate(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }
        }

        /// <summary>
        /// <para>Add a template associated with a user. See <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.PropertiesAddAsync"
        /// /> to add properties to a file. This endpoint can't be called on a team member or
        /// admin's behalf.</para>
        /// </summary>
        /// <param name="addTemplateArg">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ModifyTemplateError"/>.</exception>
        public t.Task<AddTemplateResult> TemplatesAddForUserAsync(AddTemplateArg addTemplateArg, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<AddTemplateArg, AddTemplateResult, ModifyTemplateError>(addTemplateArg, "api", "/file_properties/templates/add_for_user", "user", global::Dropbox.Api.FileProperties.AddTemplateArg.Encoder, global::Dropbox.Api.FileProperties.AddTemplateResult.Decoder, global::Dropbox.Api.FileProperties.ModifyTemplateError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the templates add for user route.</para>
        /// </summary>
        /// <param name="addTemplateArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginTemplatesAddForUser(AddTemplateArg addTemplateArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.TemplatesAddForUserAsync(addTemplateArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Add a template associated with a user. See <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.PropertiesAddAsync"
        /// /> to add properties to a file. This endpoint can't be called on a team member or
        /// admin's behalf.</para>
        /// </summary>
        /// <param name="name">Display name for the template. Template names can be up to 256
        /// bytes.</param>
        /// <param name="description">Description for the template. Template descriptions can
        /// be up to 1024 bytes.</param>
        /// <param name="fields">Definitions of the property fields associated with this
        /// template. There can be up to 32 properties in a single template.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ModifyTemplateError"/>.</exception>
        public t.Task<AddTemplateResult> TemplatesAddForUserAsync(string name,
                                                                  string description,
                                                                  col.IEnumerable<PropertyFieldTemplate> fields,
                                                                  tr.CancellationToken cancellationToken = default)
        {
            var addTemplateArg = new AddTemplateArg(name,
                                                    description,
                                                    fields);

            return this.TemplatesAddForUserAsync(addTemplateArg, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the templates add for user route.</para>
        /// </summary>
        /// <param name="name">Display name for the template. Template names can be up to 256
        /// bytes.</param>
        /// <param name="description">Description for the template. Template descriptions can
        /// be up to 1024 bytes.</param>
        /// <param name="fields">Definitions of the property fields associated with this
        /// template. There can be up to 32 properties in a single template.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginTemplatesAddForUser(string name,
                                                         string description,
                                                         col.IEnumerable<PropertyFieldTemplate> fields,
                                                         sys.AsyncCallback callback,
                                                         object callbackState = null)
        {
            var addTemplateArg = new AddTemplateArg(name,
                                                    description,
                                                    fields);

            return this.BeginTemplatesAddForUser(addTemplateArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the templates add for user route
        /// to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ModifyTemplateError"/>.</exception>
        public AddTemplateResult EndTemplatesAddForUser(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<AddTemplateResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Get the schema for a specified template. This endpoint can't be called on a
        /// team member or admin's behalf.</para>
        /// </summary>
        /// <param name="getTemplateArg">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="TemplateError"/>.</exception>
        public t.Task<GetTemplateResult> TemplatesGetForUserAsync(GetTemplateArg getTemplateArg, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<GetTemplateArg, GetTemplateResult, TemplateError>(getTemplateArg, "api", "/file_properties/templates/get_for_user", "user", global::Dropbox.Api.FileProperties.GetTemplateArg.Encoder, global::Dropbox.Api.FileProperties.GetTemplateResult.Decoder, global::Dropbox.Api.FileProperties.TemplateError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the templates get for user route.</para>
        /// </summary>
        /// <param name="getTemplateArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginTemplatesGetForUser(GetTemplateArg getTemplateArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.TemplatesGetForUserAsync(getTemplateArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Get the schema for a specified template. This endpoint can't be called on a
        /// team member or admin's behalf.</para>
        /// </summary>
        /// <param name="templateId">An identifier for template added by route  See <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync"
        /// /> or <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesAddForTeamAsync"
        /// />.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="TemplateError"/>.</exception>
        public t.Task<GetTemplateResult> TemplatesGetForUserAsync(string templateId,
                                                                  tr.CancellationToken cancellationToken = default)
        {
            var getTemplateArg = new GetTemplateArg(templateId);

            return this.TemplatesGetForUserAsync(getTemplateArg, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the templates get for user route.</para>
        /// </summary>
        /// <param name="templateId">An identifier for template added by route  See <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync"
        /// /> or <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesAddForTeamAsync"
        /// />.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginTemplatesGetForUser(string templateId,
                                                         sys.AsyncCallback callback,
                                                         object callbackState = null)
        {
            var getTemplateArg = new GetTemplateArg(templateId);

            return this.BeginTemplatesGetForUser(getTemplateArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the templates get for user route
        /// to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="TemplateError"/>.</exception>
        public GetTemplateResult EndTemplatesGetForUser(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<GetTemplateResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Get the template identifiers for a team. To get the schema of each template
        /// use <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesGetForUserAsync"
        /// />. This endpoint can't be called on a team member or admin's behalf.</para>
        /// </summary>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="TemplateError"/>.</exception>
        public t.Task<ListTemplateResult> TemplatesListForUserAsync(tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<enc.Empty, ListTemplateResult, TemplateError>(enc.Empty.Instance, "api", "/file_properties/templates/list_for_user", "user", enc.EmptyEncoder.Instance, global::Dropbox.Api.FileProperties.ListTemplateResult.Decoder, global::Dropbox.Api.FileProperties.TemplateError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the templates list for user route.</para>
        /// </summary>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginTemplatesListForUser(sys.AsyncCallback callback, object state = null)
        {
            var task = this.TemplatesListForUserAsync();

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the templates list for user route
        /// to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="TemplateError"/>.</exception>
        public ListTemplateResult EndTemplatesListForUser(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<ListTemplateResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }

        /// <summary>
        /// <para>Permanently removes the specified template created from <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync"
        /// />. All properties associated with the template will also be removed. This action
        /// cannot be undone.</para>
        /// </summary>
        /// <param name="removeTemplateArg">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="TemplateError"/>.</exception>
        public t.Task TemplatesRemoveForUserAsync(RemoveTemplateArg removeTemplateArg, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<RemoveTemplateArg, enc.Empty, TemplateError>(removeTemplateArg, "api", "/file_properties/templates/remove_for_user", "user", global::Dropbox.Api.FileProperties.RemoveTemplateArg.Encoder, enc.EmptyDecoder.Instance, global::Dropbox.Api.FileProperties.TemplateError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the templates remove for user route.</para>
        /// </summary>
        /// <param name="removeTemplateArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginTemplatesRemoveForUser(RemoveTemplateArg removeTemplateArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.TemplatesRemoveForUserAsync(removeTemplateArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Permanently removes the specified template created from <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync"
        /// />. All properties associated with the template will also be removed. This action
        /// cannot be undone.</para>
        /// </summary>
        /// <param name="templateId">An identifier for a template created by <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync"
        /// /> or <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesAddForTeamAsync"
        /// />.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="TemplateError"/>.</exception>
        public t.Task TemplatesRemoveForUserAsync(string templateId,
                                                  tr.CancellationToken cancellationToken = default)
        {
            var removeTemplateArg = new RemoveTemplateArg(templateId);

            return this.TemplatesRemoveForUserAsync(removeTemplateArg, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the templates remove for user route.</para>
        /// </summary>
        /// <param name="templateId">An identifier for a template created by <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync"
        /// /> or <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesAddForTeamAsync"
        /// />.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginTemplatesRemoveForUser(string templateId,
                                                            sys.AsyncCallback callback,
                                                            object callbackState = null)
        {
            var removeTemplateArg = new RemoveTemplateArg(templateId);

            return this.BeginTemplatesRemoveForUser(removeTemplateArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the templates remove for user
        /// route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="TemplateError"/>.</exception>
        public void EndTemplatesRemoveForUser(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }
        }

        /// <summary>
        /// <para>Update a template associated with a user. This route can update the template
        /// name, the template description and add optional properties to templates. This
        /// endpoint can't be called on a team member or admin's behalf.</para>
        /// </summary>
        /// <param name="updateTemplateArg">The request parameters</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ModifyTemplateError"/>.</exception>
        public t.Task<UpdateTemplateResult> TemplatesUpdateForUserAsync(UpdateTemplateArg updateTemplateArg, tr.CancellationToken cancellationToken = default)
        {
            return this.Transport.SendRpcRequestAsync<UpdateTemplateArg, UpdateTemplateResult, ModifyTemplateError>(updateTemplateArg, "api", "/file_properties/templates/update_for_user", "user", global::Dropbox.Api.FileProperties.UpdateTemplateArg.Encoder, global::Dropbox.Api.FileProperties.UpdateTemplateResult.Decoder, global::Dropbox.Api.FileProperties.ModifyTemplateError.Decoder, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the templates update for user route.</para>
        /// </summary>
        /// <param name="updateTemplateArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginTemplatesUpdateForUser(UpdateTemplateArg updateTemplateArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.TemplatesUpdateForUserAsync(updateTemplateArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Update a template associated with a user. This route can update the template
        /// name, the template description and add optional properties to templates. This
        /// endpoint can't be called on a team member or admin's behalf.</para>
        /// </summary>
        /// <param name="templateId">An identifier for template added by  See <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync"
        /// /> or <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesAddForTeamAsync"
        /// />.</param>
        /// <param name="name">A display name for the template. template names can be up to 256
        /// bytes.</param>
        /// <param name="description">Description for the new template. Template descriptions
        /// can be up to 1024 bytes.</param>
        /// <param name="addFields">Property field templates to be added to the group template.
        /// There can be up to 32 properties in a single template.</param>
        /// <param name="cancellationToken">The cancellation token to cancel operation.</param>
        /// <returns>The task that represents the asynchronous send operation. The TResult
        /// parameter contains the response from the server.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ModifyTemplateError"/>.</exception>
        public t.Task<UpdateTemplateResult> TemplatesUpdateForUserAsync(string templateId,
                                                                        string name = null,
                                                                        string description = null,
                                                                        col.IEnumerable<PropertyFieldTemplate> addFields = null,
                                                                        tr.CancellationToken cancellationToken = default)
        {
            var updateTemplateArg = new UpdateTemplateArg(templateId,
                                                          name,
                                                          description,
                                                          addFields);

            return this.TemplatesUpdateForUserAsync(updateTemplateArg, cancellationToken);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the templates update for user route.</para>
        /// </summary>
        /// <param name="templateId">An identifier for template added by  See <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync"
        /// /> or <see
        /// cref="Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesAddForTeamAsync"
        /// />.</param>
        /// <param name="name">A display name for the template. template names can be up to 256
        /// bytes.</param>
        /// <param name="description">Description for the new template. Template descriptions
        /// can be up to 1024 bytes.</param>
        /// <param name="addFields">Property field templates to be added to the group template.
        /// There can be up to 32 properties in a single template.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginTemplatesUpdateForUser(string templateId,
                                                            string name = null,
                                                            string description = null,
                                                            col.IEnumerable<PropertyFieldTemplate> addFields = null,
                                                            sys.AsyncCallback callback = null,
                                                            object callbackState = null)
        {
            var updateTemplateArg = new UpdateTemplateArg(templateId,
                                                          name,
                                                          description,
                                                          addFields);

            return this.BeginTemplatesUpdateForUser(updateTemplateArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the templates update for user
        /// route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <returns>The response to the send request</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="ModifyTemplateError"/>.</exception>
        public UpdateTemplateResult EndTemplatesUpdateForUser(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task<UpdateTemplateResult>;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }

            return task.Result;
        }
    }
}
