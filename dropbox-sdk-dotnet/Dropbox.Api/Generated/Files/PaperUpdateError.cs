// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The paper update error object</para>
    /// </summary>
    public class PaperUpdateError
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<PaperUpdateError> Encoder = new PaperUpdateErrorEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<PaperUpdateError> Decoder = new PaperUpdateErrorDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="PaperUpdateError" />
        /// class.</para>
        /// </summary>
        public PaperUpdateError()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Path</para>
        /// </summary>
        public bool IsPath
        {
            get
            {
                return this is Path;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Path, or <c>null</c>.</para>
        /// </summary>
        public Path AsPath
        {
            get
            {
                return this as Path;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is RevisionMismatch</para>
        /// </summary>
        public bool IsRevisionMismatch
        {
            get
            {
                return this is RevisionMismatch;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a RevisionMismatch, or <c>null</c>.</para>
        /// </summary>
        public RevisionMismatch AsRevisionMismatch
        {
            get
            {
                return this as RevisionMismatch;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is DocArchived</para>
        /// </summary>
        public bool IsDocArchived
        {
            get
            {
                return this is DocArchived;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a DocArchived, or <c>null</c>.</para>
        /// </summary>
        public DocArchived AsDocArchived
        {
            get
            {
                return this as DocArchived;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is DocDeleted</para>
        /// </summary>
        public bool IsDocDeleted
        {
            get
            {
                return this is DocDeleted;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a DocDeleted, or <c>null</c>.</para>
        /// </summary>
        public DocDeleted AsDocDeleted
        {
            get
            {
                return this as DocDeleted;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is
        /// InsufficientPermissions</para>
        /// </summary>
        public bool IsInsufficientPermissions
        {
            get
            {
                return this is InsufficientPermissions;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a InsufficientPermissions, or <c>null</c>.</para>
        /// </summary>
        public InsufficientPermissions AsInsufficientPermissions
        {
            get
            {
                return this as InsufficientPermissions;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is ContentMalformed</para>
        /// </summary>
        public bool IsContentMalformed
        {
            get
            {
                return this is ContentMalformed;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a ContentMalformed, or <c>null</c>.</para>
        /// </summary>
        public ContentMalformed AsContentMalformed
        {
            get
            {
                return this as ContentMalformed;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is DocLengthExceeded</para>
        /// </summary>
        public bool IsDocLengthExceeded
        {
            get
            {
                return this is DocLengthExceeded;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a DocLengthExceeded, or <c>null</c>.</para>
        /// </summary>
        public DocLengthExceeded AsDocLengthExceeded
        {
            get
            {
                return this as DocLengthExceeded;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is ImageSizeExceeded</para>
        /// </summary>
        public bool IsImageSizeExceeded
        {
            get
            {
                return this is ImageSizeExceeded;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a ImageSizeExceeded, or <c>null</c>.</para>
        /// </summary>
        public ImageSizeExceeded AsImageSizeExceeded
        {
            get
            {
                return this as ImageSizeExceeded;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="PaperUpdateError" />.</para>
        /// </summary>
        private class PaperUpdateErrorEncoder : enc.StructEncoder<PaperUpdateError>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(PaperUpdateError value, enc.IJsonWriter writer)
            {
                if (value is Path)
                {
                    WriteProperty(".tag", "path", writer, enc.StringEncoder.Instance);
                    Path.Encoder.EncodeFields((Path)value, writer);
                    return;
                }
                if (value is RevisionMismatch)
                {
                    WriteProperty(".tag", "revision_mismatch", writer, enc.StringEncoder.Instance);
                    RevisionMismatch.Encoder.EncodeFields((RevisionMismatch)value, writer);
                    return;
                }
                if (value is DocArchived)
                {
                    WriteProperty(".tag", "doc_archived", writer, enc.StringEncoder.Instance);
                    DocArchived.Encoder.EncodeFields((DocArchived)value, writer);
                    return;
                }
                if (value is DocDeleted)
                {
                    WriteProperty(".tag", "doc_deleted", writer, enc.StringEncoder.Instance);
                    DocDeleted.Encoder.EncodeFields((DocDeleted)value, writer);
                    return;
                }
                if (value is InsufficientPermissions)
                {
                    WriteProperty(".tag", "insufficient_permissions", writer, enc.StringEncoder.Instance);
                    InsufficientPermissions.Encoder.EncodeFields((InsufficientPermissions)value, writer);
                    return;
                }
                if (value is ContentMalformed)
                {
                    WriteProperty(".tag", "content_malformed", writer, enc.StringEncoder.Instance);
                    ContentMalformed.Encoder.EncodeFields((ContentMalformed)value, writer);
                    return;
                }
                if (value is DocLengthExceeded)
                {
                    WriteProperty(".tag", "doc_length_exceeded", writer, enc.StringEncoder.Instance);
                    DocLengthExceeded.Encoder.EncodeFields((DocLengthExceeded)value, writer);
                    return;
                }
                if (value is ImageSizeExceeded)
                {
                    WriteProperty(".tag", "image_size_exceeded", writer, enc.StringEncoder.Instance);
                    ImageSizeExceeded.Encoder.EncodeFields((ImageSizeExceeded)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="PaperUpdateError" />.</para>
        /// </summary>
        private class PaperUpdateErrorDecoder : enc.UnionDecoder<PaperUpdateError>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="PaperUpdateError" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override PaperUpdateError Create()
            {
                return new PaperUpdateError();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override PaperUpdateError Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "path":
                        return Path.Decoder.DecodeFields(reader);
                    case "revision_mismatch":
                        return RevisionMismatch.Decoder.DecodeFields(reader);
                    case "doc_archived":
                        return DocArchived.Decoder.DecodeFields(reader);
                    case "doc_deleted":
                        return DocDeleted.Decoder.DecodeFields(reader);
                    case "insufficient_permissions":
                        return InsufficientPermissions.Decoder.DecodeFields(reader);
                    case "content_malformed":
                        return ContentMalformed.Decoder.DecodeFields(reader);
                    case "doc_length_exceeded":
                        return DocLengthExceeded.Decoder.DecodeFields(reader);
                    case "image_size_exceeded":
                        return ImageSizeExceeded.Decoder.DecodeFields(reader);
                    case "other":
                        return Other.Decoder.DecodeFields(reader);
                    default:
                        throw new sys.InvalidOperationException();
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The path object</para>
        /// </summary>
        public sealed class Path : PaperUpdateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Path> Encoder = new PathEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Path> Decoder = new PathDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Path" /> class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public Path(LookupError value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Path" /> class.</para>
            /// </summary>
            private Path()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public LookupError Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Path" />.</para>
            /// </summary>
            private class PathEncoder : enc.StructEncoder<Path>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Path value, enc.IJsonWriter writer)
                {
                    WriteProperty("path", value.Value, writer, global::Dropbox.Api.Files.LookupError.Encoder);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Path" />.</para>
            /// </summary>
            private class PathDecoder : enc.StructDecoder<Path>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Path" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Path Create()
                {
                    return new Path();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(Path value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "path":
                            value.Value = global::Dropbox.Api.Files.LookupError.Decoder.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>The provided revision does not match the document head.</para>
        /// </summary>
        public sealed class RevisionMismatch : PaperUpdateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<RevisionMismatch> Encoder = new RevisionMismatchEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<RevisionMismatch> Decoder = new RevisionMismatchDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="RevisionMismatch" />
            /// class.</para>
            /// </summary>
            private RevisionMismatch()
            {
            }

            /// <summary>
            /// <para>A singleton instance of RevisionMismatch</para>
            /// </summary>
            public static readonly RevisionMismatch Instance = new RevisionMismatch();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="RevisionMismatch" />.</para>
            /// </summary>
            private class RevisionMismatchEncoder : enc.StructEncoder<RevisionMismatch>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(RevisionMismatch value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="RevisionMismatch" />.</para>
            /// </summary>
            private class RevisionMismatchDecoder : enc.StructDecoder<RevisionMismatch>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="RevisionMismatch" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override RevisionMismatch Create()
                {
                    return RevisionMismatch.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>This operation is not allowed on archived Paper docs.</para>
        /// </summary>
        public sealed class DocArchived : PaperUpdateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<DocArchived> Encoder = new DocArchivedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<DocArchived> Decoder = new DocArchivedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="DocArchived" />
            /// class.</para>
            /// </summary>
            private DocArchived()
            {
            }

            /// <summary>
            /// <para>A singleton instance of DocArchived</para>
            /// </summary>
            public static readonly DocArchived Instance = new DocArchived();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="DocArchived" />.</para>
            /// </summary>
            private class DocArchivedEncoder : enc.StructEncoder<DocArchived>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(DocArchived value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="DocArchived" />.</para>
            /// </summary>
            private class DocArchivedDecoder : enc.StructDecoder<DocArchived>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="DocArchived" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override DocArchived Create()
                {
                    return DocArchived.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>This operation is not allowed on deleted Paper docs.</para>
        /// </summary>
        public sealed class DocDeleted : PaperUpdateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<DocDeleted> Encoder = new DocDeletedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<DocDeleted> Decoder = new DocDeletedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="DocDeleted" /> class.</para>
            /// </summary>
            private DocDeleted()
            {
            }

            /// <summary>
            /// <para>A singleton instance of DocDeleted</para>
            /// </summary>
            public static readonly DocDeleted Instance = new DocDeleted();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="DocDeleted" />.</para>
            /// </summary>
            private class DocDeletedEncoder : enc.StructEncoder<DocDeleted>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(DocDeleted value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="DocDeleted" />.</para>
            /// </summary>
            private class DocDeletedDecoder : enc.StructDecoder<DocDeleted>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="DocDeleted" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override DocDeleted Create()
                {
                    return DocDeleted.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Your account does not have permissions to edit Paper docs.</para>
        /// </summary>
        public sealed class InsufficientPermissions : PaperUpdateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<InsufficientPermissions> Encoder = new InsufficientPermissionsEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<InsufficientPermissions> Decoder = new InsufficientPermissionsDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="InsufficientPermissions" />
            /// class.</para>
            /// </summary>
            private InsufficientPermissions()
            {
            }

            /// <summary>
            /// <para>A singleton instance of InsufficientPermissions</para>
            /// </summary>
            public static readonly InsufficientPermissions Instance = new InsufficientPermissions();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="InsufficientPermissions" />.</para>
            /// </summary>
            private class InsufficientPermissionsEncoder : enc.StructEncoder<InsufficientPermissions>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(InsufficientPermissions value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="InsufficientPermissions" />.</para>
            /// </summary>
            private class InsufficientPermissionsDecoder : enc.StructDecoder<InsufficientPermissions>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="InsufficientPermissions"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override InsufficientPermissions Create()
                {
                    return InsufficientPermissions.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The provided content was malformed and cannot be imported to Paper.</para>
        /// </summary>
        public sealed class ContentMalformed : PaperUpdateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<ContentMalformed> Encoder = new ContentMalformedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<ContentMalformed> Decoder = new ContentMalformedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="ContentMalformed" />
            /// class.</para>
            /// </summary>
            private ContentMalformed()
            {
            }

            /// <summary>
            /// <para>A singleton instance of ContentMalformed</para>
            /// </summary>
            public static readonly ContentMalformed Instance = new ContentMalformed();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="ContentMalformed" />.</para>
            /// </summary>
            private class ContentMalformedEncoder : enc.StructEncoder<ContentMalformed>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(ContentMalformed value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="ContentMalformed" />.</para>
            /// </summary>
            private class ContentMalformedDecoder : enc.StructDecoder<ContentMalformed>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="ContentMalformed" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override ContentMalformed Create()
                {
                    return ContentMalformed.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The Paper doc would be too large, split the content into multiple
        /// docs.</para>
        /// </summary>
        public sealed class DocLengthExceeded : PaperUpdateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<DocLengthExceeded> Encoder = new DocLengthExceededEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<DocLengthExceeded> Decoder = new DocLengthExceededDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="DocLengthExceeded" />
            /// class.</para>
            /// </summary>
            private DocLengthExceeded()
            {
            }

            /// <summary>
            /// <para>A singleton instance of DocLengthExceeded</para>
            /// </summary>
            public static readonly DocLengthExceeded Instance = new DocLengthExceeded();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="DocLengthExceeded" />.</para>
            /// </summary>
            private class DocLengthExceededEncoder : enc.StructEncoder<DocLengthExceeded>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(DocLengthExceeded value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="DocLengthExceeded" />.</para>
            /// </summary>
            private class DocLengthExceededDecoder : enc.StructDecoder<DocLengthExceeded>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="DocLengthExceeded"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override DocLengthExceeded Create()
                {
                    return DocLengthExceeded.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The imported document contains an image that is too large. The current limit
        /// is 1MB. This only applies to HTML with data URI.</para>
        /// </summary>
        public sealed class ImageSizeExceeded : PaperUpdateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<ImageSizeExceeded> Encoder = new ImageSizeExceededEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<ImageSizeExceeded> Decoder = new ImageSizeExceededDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="ImageSizeExceeded" />
            /// class.</para>
            /// </summary>
            private ImageSizeExceeded()
            {
            }

            /// <summary>
            /// <para>A singleton instance of ImageSizeExceeded</para>
            /// </summary>
            public static readonly ImageSizeExceeded Instance = new ImageSizeExceeded();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="ImageSizeExceeded" />.</para>
            /// </summary>
            private class ImageSizeExceededEncoder : enc.StructEncoder<ImageSizeExceeded>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(ImageSizeExceeded value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="ImageSizeExceeded" />.</para>
            /// </summary>
            private class ImageSizeExceededDecoder : enc.StructDecoder<ImageSizeExceeded>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="ImageSizeExceeded"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override ImageSizeExceeded Create()
                {
                    return ImageSizeExceeded.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : PaperUpdateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}
