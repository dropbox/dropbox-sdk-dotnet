// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Team
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The legal holds list held revision result object</para>
    /// </summary>
    public class LegalHoldsListHeldRevisionResult
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<LegalHoldsListHeldRevisionResult> Encoder = new LegalHoldsListHeldRevisionResultEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<LegalHoldsListHeldRevisionResult> Decoder = new LegalHoldsListHeldRevisionResultDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see
        /// cref="LegalHoldsListHeldRevisionResult" /> class.</para>
        /// </summary>
        /// <param name="entries">List of file entries that under the hold.</param>
        /// <param name="hasMore">True if there are more file entries that haven't been
        /// returned. You can retrieve them with a call to
        /// /legal_holds/list_held_revisions_continue.</param>
        /// <param name="cursor">The cursor idicates where to continue reading file metadata
        /// entries for the next API call. When there are no more entries, the cursor will
        /// return none. Pass the cursor into
        /// /2/team/legal_holds/list_held_revisions/continue.</param>
        public LegalHoldsListHeldRevisionResult(col.IEnumerable<LegalHoldHeldRevisionMetadata> entries,
                                                bool hasMore,
                                                string cursor = null)
        {
            var entriesList = enc.Util.ToList(entries);

            if (entries == null)
            {
                throw new sys.ArgumentNullException("entries");
            }

            if (cursor != null)
            {
                if (cursor.Length < 1)
                {
                    throw new sys.ArgumentOutOfRangeException("cursor", "Length should be at least 1");
                }
            }

            this.Entries = entriesList;
            this.HasMore = hasMore;
            this.Cursor = cursor;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see
        /// cref="LegalHoldsListHeldRevisionResult" /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public LegalHoldsListHeldRevisionResult()
        {
        }

        /// <summary>
        /// <para>List of file entries that under the hold.</para>
        /// </summary>
        public col.IList<LegalHoldHeldRevisionMetadata> Entries { get; protected set; }

        /// <summary>
        /// <para>True if there are more file entries that haven't been returned. You can
        /// retrieve them with a call to /legal_holds/list_held_revisions_continue.</para>
        /// </summary>
        public bool HasMore { get; protected set; }

        /// <summary>
        /// <para>The cursor idicates where to continue reading file metadata entries for the
        /// next API call. When there are no more entries, the cursor will return none.</para>
        /// <para>Pass the cursor into /2/team/legal_holds/list_held_revisions/continue.</para>
        /// </summary>
        public string Cursor { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="LegalHoldsListHeldRevisionResult" />.</para>
        /// </summary>
        private class LegalHoldsListHeldRevisionResultEncoder : enc.StructEncoder<LegalHoldsListHeldRevisionResult>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(LegalHoldsListHeldRevisionResult value, enc.IJsonWriter writer)
            {
                WriteListProperty("entries", value.Entries, writer, global::Dropbox.Api.Team.LegalHoldHeldRevisionMetadata.Encoder);
                WriteProperty("has_more", value.HasMore, writer, enc.BooleanEncoder.Instance);
                if (value.Cursor != null)
                {
                    WriteProperty("cursor", value.Cursor, writer, enc.StringEncoder.Instance);
                }
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="LegalHoldsListHeldRevisionResult" />.</para>
        /// </summary>
        private class LegalHoldsListHeldRevisionResultDecoder : enc.StructDecoder<LegalHoldsListHeldRevisionResult>
        {
            /// <summary>
            /// <para>Create a new instance of type <see
            /// cref="LegalHoldsListHeldRevisionResult" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override LegalHoldsListHeldRevisionResult Create()
            {
                return new LegalHoldsListHeldRevisionResult();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(LegalHoldsListHeldRevisionResult value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "entries":
                        value.Entries = ReadList<LegalHoldHeldRevisionMetadata>(reader, global::Dropbox.Api.Team.LegalHoldHeldRevisionMetadata.Decoder);
                        break;
                    case "has_more":
                        value.HasMore = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    case "cursor":
                        value.Cursor = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
