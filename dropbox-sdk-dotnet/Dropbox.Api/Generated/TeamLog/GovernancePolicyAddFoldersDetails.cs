// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamLog
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Added folders to policy.</para>
    /// </summary>
    public class GovernancePolicyAddFoldersDetails
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<GovernancePolicyAddFoldersDetails> Encoder = new GovernancePolicyAddFoldersDetailsEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<GovernancePolicyAddFoldersDetails> Decoder = new GovernancePolicyAddFoldersDetailsDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see
        /// cref="GovernancePolicyAddFoldersDetails" /> class.</para>
        /// </summary>
        /// <param name="governancePolicyId">Policy ID.</param>
        /// <param name="name">Policy name.</param>
        /// <param name="policyType">Policy type.</param>
        /// <param name="folders">Folders.</param>
        public GovernancePolicyAddFoldersDetails(string governancePolicyId,
                                                 string name,
                                                 PolicyType policyType = null,
                                                 col.IEnumerable<string> folders = null)
        {
            if (governancePolicyId == null)
            {
                throw new sys.ArgumentNullException("governancePolicyId");
            }

            if (name == null)
            {
                throw new sys.ArgumentNullException("name");
            }

            var foldersList = enc.Util.ToList(folders);

            this.GovernancePolicyId = governancePolicyId;
            this.Name = name;
            this.PolicyType = policyType;
            this.Folders = foldersList;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see
        /// cref="GovernancePolicyAddFoldersDetails" /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public GovernancePolicyAddFoldersDetails()
        {
        }

        /// <summary>
        /// <para>Policy ID.</para>
        /// </summary>
        public string GovernancePolicyId { get; protected set; }

        /// <summary>
        /// <para>Policy name.</para>
        /// </summary>
        public string Name { get; protected set; }

        /// <summary>
        /// <para>Policy type.</para>
        /// </summary>
        public PolicyType PolicyType { get; protected set; }

        /// <summary>
        /// <para>Folders.</para>
        /// </summary>
        public col.IList<string> Folders { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="GovernancePolicyAddFoldersDetails" />.</para>
        /// </summary>
        private class GovernancePolicyAddFoldersDetailsEncoder : enc.StructEncoder<GovernancePolicyAddFoldersDetails>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(GovernancePolicyAddFoldersDetails value, enc.IJsonWriter writer)
            {
                WriteProperty("governance_policy_id", value.GovernancePolicyId, writer, enc.StringEncoder.Instance);
                WriteProperty("name", value.Name, writer, enc.StringEncoder.Instance);
                if (value.PolicyType != null)
                {
                    WriteProperty("policy_type", value.PolicyType, writer, global::Dropbox.Api.TeamLog.PolicyType.Encoder);
                }
                if (value.Folders.Count > 0)
                {
                    WriteListProperty("folders", value.Folders, writer, enc.StringEncoder.Instance);
                }
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="GovernancePolicyAddFoldersDetails" />.</para>
        /// </summary>
        private class GovernancePolicyAddFoldersDetailsDecoder : enc.StructDecoder<GovernancePolicyAddFoldersDetails>
        {
            /// <summary>
            /// <para>Create a new instance of type <see
            /// cref="GovernancePolicyAddFoldersDetails" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override GovernancePolicyAddFoldersDetails Create()
            {
                return new GovernancePolicyAddFoldersDetails();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(GovernancePolicyAddFoldersDetails value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "governance_policy_id":
                        value.GovernancePolicyId = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "name":
                        value.Name = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "policy_type":
                        value.PolicyType = global::Dropbox.Api.TeamLog.PolicyType.Decoder.Decode(reader);
                        break;
                    case "folders":
                        value.Folders = ReadList<string>(reader, enc.StringDecoder.Instance);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
