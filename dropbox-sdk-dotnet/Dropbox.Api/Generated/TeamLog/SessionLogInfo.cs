// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamLog
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Session's logged information.</para>
    /// </summary>
    /// <seealso cref="DesktopSessionLogInfo" />
    /// <seealso cref="MobileSessionLogInfo" />
    /// <seealso cref="WebSessionLogInfo" />
    public class SessionLogInfo
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<SessionLogInfo> Encoder = new SessionLogInfoEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<SessionLogInfo> Decoder = new SessionLogInfoDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="SessionLogInfo" /> class.</para>
        /// </summary>
        /// <param name="sessionId">Session ID.</param>
        protected SessionLogInfo(string sessionId = null)
        {
            this.SessionId = sessionId;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="SessionLogInfo" /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public SessionLogInfo()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Web</para>
        /// </summary>
        public bool IsWeb
        {
            get
            {
                return this is WebSessionLogInfo;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a <see cref="WebSessionLogInfo" />, or
        /// <c>null</c>.</para>
        /// </summary>
        public WebSessionLogInfo AsWeb
        {
            get
            {
                return this as WebSessionLogInfo;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Desktop</para>
        /// </summary>
        public bool IsDesktop
        {
            get
            {
                return this is DesktopSessionLogInfo;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a <see cref="DesktopSessionLogInfo" />, or
        /// <c>null</c>.</para>
        /// </summary>
        public DesktopSessionLogInfo AsDesktop
        {
            get
            {
                return this as DesktopSessionLogInfo;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Mobile</para>
        /// </summary>
        public bool IsMobile
        {
            get
            {
                return this is MobileSessionLogInfo;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a <see cref="MobileSessionLogInfo" />, or
        /// <c>null</c>.</para>
        /// </summary>
        public MobileSessionLogInfo AsMobile
        {
            get
            {
                return this as MobileSessionLogInfo;
            }
        }

        /// <summary>
        /// <para>Session ID.</para>
        /// </summary>
        public string SessionId { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="SessionLogInfo" />.</para>
        /// </summary>
        private class SessionLogInfoEncoder : enc.StructEncoder<SessionLogInfo>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(SessionLogInfo value, enc.IJsonWriter writer)
            {
                if (value is WebSessionLogInfo)
                {
                    WriteProperty(".tag", "web", writer, enc.StringEncoder.Instance);
                    WebSessionLogInfo.Encoder.EncodeFields((WebSessionLogInfo)value, writer);
                    return;
                }
                if (value is DesktopSessionLogInfo)
                {
                    WriteProperty(".tag", "desktop", writer, enc.StringEncoder.Instance);
                    DesktopSessionLogInfo.Encoder.EncodeFields((DesktopSessionLogInfo)value, writer);
                    return;
                }
                if (value is MobileSessionLogInfo)
                {
                    WriteProperty(".tag", "mobile", writer, enc.StringEncoder.Instance);
                    MobileSessionLogInfo.Encoder.EncodeFields((MobileSessionLogInfo)value, writer);
                    return;
                }
                if (value.SessionId != null)
                {
                    WriteProperty("session_id", value.SessionId, writer, enc.StringEncoder.Instance);
                }
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="SessionLogInfo" />.</para>
        /// </summary>
        private class SessionLogInfoDecoder : enc.UnionDecoder<SessionLogInfo>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="SessionLogInfo" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override SessionLogInfo Create()
            {
                return new SessionLogInfo();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override SessionLogInfo Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "web":
                        return WebSessionLogInfo.Decoder.DecodeFields(reader);
                    case "desktop":
                        return DesktopSessionLogInfo.Decoder.DecodeFields(reader);
                    case "mobile":
                        return MobileSessionLogInfo.Decoder.DecodeFields(reader);
                    default:
                        return base.Decode(reader);
                }
            }
            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(SessionLogInfo value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "session_id":
                        value.SessionId = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
