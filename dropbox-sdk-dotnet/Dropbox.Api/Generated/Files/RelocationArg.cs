// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The relocation arg object</para>
    /// </summary>
    /// <seealso cref="Global::Dropbox.Api.Files.RelocationPath" />
    public class RelocationArg : RelocationPath
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<RelocationArg> Encoder = new RelocationArgEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<RelocationArg> Decoder = new RelocationArgDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="RelocationArg" /> class.</para>
        /// </summary>
        /// <param name="fromPath">Path in the user's Dropbox to be copied or moved.</param>
        /// <param name="toPath">Path in the user's Dropbox that is the destination.</param>
        /// <param name="allowSharedFolder">This flag has no effect.</param>
        /// <param name="autorename">If there's a conflict, have the Dropbox server try to
        /// autorename the file to avoid the conflict.</param>
        /// <param name="allowOwnershipTransfer">Allow moves by owner even if it would result
        /// in an ownership transfer for the content being moved. This does not apply to
        /// copies.</param>
        public RelocationArg(string fromPath,
                             string toPath,
                             bool allowSharedFolder = false,
                             bool autorename = false,
                             bool allowOwnershipTransfer = false)
            : base(fromPath, toPath)
        {
            this.AllowSharedFolder = allowSharedFolder;
            this.Autorename = autorename;
            this.AllowOwnershipTransfer = allowOwnershipTransfer;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="RelocationArg" /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public RelocationArg()
        {
            this.AllowSharedFolder = false;
            this.Autorename = false;
            this.AllowOwnershipTransfer = false;
        }

        /// <summary>
        /// <para>This flag has no effect.</para>
        /// </summary>
        public bool AllowSharedFolder { get; protected set; }

        /// <summary>
        /// <para>If there's a conflict, have the Dropbox server try to autorename the file to
        /// avoid the conflict.</para>
        /// </summary>
        public bool Autorename { get; protected set; }

        /// <summary>
        /// <para>Allow moves by owner even if it would result in an ownership transfer for the
        /// content being moved. This does not apply to copies.</para>
        /// </summary>
        public bool AllowOwnershipTransfer { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="RelocationArg" />.</para>
        /// </summary>
        private class RelocationArgEncoder : enc.StructEncoder<RelocationArg>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(RelocationArg value, enc.IJsonWriter writer)
            {
                WriteProperty("from_path", value.FromPath, writer, enc.StringEncoder.Instance);
                WriteProperty("to_path", value.ToPath, writer, enc.StringEncoder.Instance);
                WriteProperty("allow_shared_folder", value.AllowSharedFolder, writer, enc.BooleanEncoder.Instance);
                WriteProperty("autorename", value.Autorename, writer, enc.BooleanEncoder.Instance);
                WriteProperty("allow_ownership_transfer", value.AllowOwnershipTransfer, writer, enc.BooleanEncoder.Instance);
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="RelocationArg" />.</para>
        /// </summary>
        private class RelocationArgDecoder : enc.StructDecoder<RelocationArg>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="RelocationArg" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override RelocationArg Create()
            {
                return new RelocationArg();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(RelocationArg value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "from_path":
                        value.FromPath = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "to_path":
                        value.ToPath = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "allow_shared_folder":
                        value.AllowSharedFolder = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    case "autorename":
                        value.Autorename = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    case "allow_ownership_transfer":
                        value.AllowOwnershipTransfer = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
