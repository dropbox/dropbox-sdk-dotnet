// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Contacts.Routes
{
    using sys = System;
    using io = System.IO;
    using col = System.Collections.Generic;
    using t = System.Threading.Tasks;
    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The routes for the <see cref="N:Dropbox.Api.Contacts"/> namespace</para>
    /// </summary>
    public class ContactsUserRoutes
    {
        /// <summary>
        /// <para>Initializes a new instance of the <see cref="ContactsUserRoutes" />
        /// class.</para>
        /// </summary>
        /// <param name="transport">The transport to use</param>
        internal ContactsUserRoutes(enc.ITransport transport)
        {
            this.Transport = transport;
        }

        /// <summary>
        /// <para>Gets the transport used for these routes</para>
        /// </summary>
        internal enc.ITransport Transport { get; private set; }

        /// <summary>
        /// <para>Removes all manually added contacts. You'll still keep contacts who are on
        /// your team or who you imported. New contacts will be added when you share.</para>
        /// </summary>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        public t.Task DeleteManualContactsAsync()
        {
            return this.Transport.SendRpcRequestAsync<enc.Empty, enc.Empty, enc.Empty>(enc.Empty.Instance, "api", "/contacts/delete_manual_contacts", "user", enc.EmptyEncoder.Instance, enc.EmptyDecoder.Instance, enc.EmptyDecoder.Instance);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the delete manual contacts route.</para>
        /// </summary>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginDeleteManualContacts(sys.AsyncCallback callback, object state = null)
        {
            var task = this.DeleteManualContactsAsync();

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the delete manual contacts route
        /// to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        public void EndDeleteManualContacts(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }
        }

        /// <summary>
        /// <para>Removes manually added contacts from the given list.</para>
        /// </summary>
        /// <param name="deleteManualContactsArg">The request parameters</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DeleteManualContactsError"/>.</exception>
        public t.Task DeleteManualContactsBatchAsync(DeleteManualContactsArg deleteManualContactsArg)
        {
            return this.Transport.SendRpcRequestAsync<DeleteManualContactsArg, enc.Empty, DeleteManualContactsError>(deleteManualContactsArg, "api", "/contacts/delete_manual_contacts_batch", "user", global::Dropbox.Api.Contacts.DeleteManualContactsArg.Encoder, enc.EmptyDecoder.Instance, global::Dropbox.Api.Contacts.DeleteManualContactsError.Decoder);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the delete manual contacts batch route.</para>
        /// </summary>
        /// <param name="deleteManualContactsArg">The request parameters.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="state">A user provided object that distinguished this send from other
        /// send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginDeleteManualContactsBatch(DeleteManualContactsArg deleteManualContactsArg, sys.AsyncCallback callback, object state = null)
        {
            var task = this.DeleteManualContactsBatchAsync(deleteManualContactsArg);

            return enc.Util.ToApm(task, callback, state);
        }

        /// <summary>
        /// <para>Removes manually added contacts from the given list.</para>
        /// </summary>
        /// <param name="emailAddresses">List of manually added contacts to be deleted.</param>
        /// <returns>The task that represents the asynchronous send operation.</returns>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DeleteManualContactsError"/>.</exception>
        public t.Task DeleteManualContactsBatchAsync(col.IEnumerable<string> emailAddresses)
        {
            var deleteManualContactsArg = new DeleteManualContactsArg(emailAddresses);

            return this.DeleteManualContactsBatchAsync(deleteManualContactsArg);
        }

        /// <summary>
        /// <para>Begins an asynchronous send to the delete manual contacts batch route.</para>
        /// </summary>
        /// <param name="emailAddresses">List of manually added contacts to be deleted.</param>
        /// <param name="callback">The method to be called when the asynchronous send is
        /// completed.</param>
        /// <param name="callbackState">A user provided object that distinguished this send
        /// from other send requests.</param>
        /// <returns>An object that represents the asynchronous send request.</returns>
        public sys.IAsyncResult BeginDeleteManualContactsBatch(col.IEnumerable<string> emailAddresses,
                                                               sys.AsyncCallback callback,
                                                               object callbackState = null)
        {
            var deleteManualContactsArg = new DeleteManualContactsArg(emailAddresses);

            return this.BeginDeleteManualContactsBatch(deleteManualContactsArg, callback, callbackState);
        }

        /// <summary>
        /// <para>Waits for the pending asynchronous send to the delete manual contacts batch
        /// route to complete</para>
        /// </summary>
        /// <param name="asyncResult">The reference to the pending asynchronous send
        /// request</param>
        /// <exception cref="Dropbox.Api.ApiException{TError}">Thrown if there is an error
        /// processing the request; This will contain a <see
        /// cref="DeleteManualContactsError"/>.</exception>
        public void EndDeleteManualContactsBatch(sys.IAsyncResult asyncResult)
        {
            var task = asyncResult as t.Task;
            if (task == null)
            {
                throw new sys.InvalidOperationException();
            }
        }
    }
}
